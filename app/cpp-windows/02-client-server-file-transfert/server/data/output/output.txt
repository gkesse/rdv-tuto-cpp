### [C++]
C++ ( / ˈsiːplʌsplʌs / , prononcé « C plus plus » et parfois abrégé en CPP ) est un langage de programmation de haut niveau à usage général créé par l' informaticien danois Bjarne Stroustrup . Initialement publié en 1985 comme une extension du langage de programmation C , il s'est depuis considérablement développé au fil du temps ; en 1997 , C++ possède des fonctionnalités orientées objet , génériques et fonctionnelles , en plus de fonctionnalités de manipulation de mémoire de bas niveau pour des systèmes comme les micro-ordinateurs ou pour créer des systèmes d'exploitation comme Linux ou Windows . Il est généralement implémenté comme un langage compilé , et de nombreux fournisseurs fournissent des compilateurs C++ , notamment la Free Software Foundation , LLVM , Microsoft , Intel , Embarcadero , Oracle et IBM . [ 14 ]

C++ a été conçu pour la programmation de systèmes et de logiciels embarqués , à ressources limitées et de grands systèmes, avec la performance , l'efficacité et la flexibilité d'utilisation comme points forts de sa conception. [ 15 ] C++ s'est également avéré utile dans de nombreux autres contextes, ses principaux atouts étant l'infrastructure logicielle et les applications à ressources limitées, [ 15 ] y compris les applications de bureau , les jeux vidéo , les serveurs (par exemple, le commerce électronique , la recherche sur le Web ou les bases de données ) et les applications critiques en termes de performances (par exemple, les commutateurs téléphoniques ou les sondes spatiales ). [ 16 ]

Français C++ est normalisé par l' Organisation internationale de normalisation (ISO), la dernière version de la norme ayant été ratifiée et publiée par l'ISO en octobre 2024 sous le nom d' ISO/IEC 14882:2024 (connue officieusement sous le nom de C++23 ). [ 17 ] Le langage de programmation C++ a été initialement normalisé en 1998 sous le nom d'ISO/IEC 14882:1998 , qui a ensuite été modifié par les normes C++03 , C++11 , C ++14 , C++17 et C++20 . La norme C++23 actuelle les remplace par de nouvelles fonctionnalités et une bibliothèque standard élargie . Avant la normalisation initiale en 1998, C++ a été développé par Stroustrup aux Bell Labs depuis 1979 comme une extension du langage C ; il voulait un langage efficace et flexible similaire à C qui fournisse également des fonctionnalités de haut niveau pour l'organisation des programmes. [ 18 ] Depuis 2012, C++ suit un calendrier de publication de trois ans [ 19 ] avec C++26 comme prochaine norme prévue. [ 20 ]

Malgré son adoption généralisée, certains programmeurs notables ont critiqué le langage C++ , notamment Linus Torvalds , [ 21 ] Richard Stallman , [ 22 ] Joshua Bloch , Ken Thompson , [ 23 ] [ 24 ] [ 25 ] et Donald Knuth . [ 26 ] [ 27 ] Cela est dû en grande partie à sa gestion manuelle de la mémoire, qui le rend vulnérable aux bogues de dépassement de tampon , qui représentent un risque de sécurité. [ 28 ]

Histoire

Bjarne Stroustrup, le créateur de C++, dans son bureau d'AT&T dans le New Jersey, vers  2000
En 1979, Bjarne Stroustrup , un informaticien danois , a commencé à travailler sur «C avec classes , prédécesseur de C++. [ 29 ] La création d'un nouveau langage est née de l'expérience de Stroustrup en programmation pour sa thèse de doctorat. Stroustrup a constaté que Simula possédait des fonctionnalités très utiles pour le développement de logiciels de grande envergure, mais que le langage était trop lent pour une utilisation pratique, tandis que BCPL était rapide mais trop bas niveau pour convenir au développement de logiciels de grande envergure. Lorsque Stroustrup a commencé à travailler chez AT&T Bell Labs , il a dû analyser le noyau UNIX en termes de calcul distribué . Se souvenant de son doctorat, Stroustrup a entrepris d'améliorer le langage C avec des fonctionnalités similaires à Simula. [ 30 ] Le C a été choisi pour sa polyvalence, sa rapidité, sa portabilité et sa large diffusion. Outre l'influence de C et de Simula, d'autres langages ont influencé ce nouveau langage, notamment ALGOL 68 , Ada , CLU et ML . [ citation requise ]

Initialement, le « C avec classes » de Stroustrup ajoutait des fonctionnalités au compilateur C, Cpre, notamment les classes , les classes dérivées , le typage fort , l'inlining et les arguments par défaut . [ 31 ]


Un quiz sur les fonctionnalités de C++11 donné à Paris en 2015
En 1982, Stroustrup commença à développer un successeur au C avec des classes, qu'il baptisa « C++ » ( ++opérateur d'incrémentation en C) après avoir essayé plusieurs autres noms. De nouvelles fonctionnalités furent ajoutées, notamment les fonctions virtuelles , la surcharge des noms de fonctions et des opérateurs , les références , les constantes, l'allocation de mémoire libre sécurisée (nouveau/suppression), une vérification de type améliorée et des commentaires sur une seule ligne de style BCPL avec deux barres obliques ( //). De plus, Stroustrup développa un nouveau compilateur autonome pour C++, Cfront .

En 1984, Stroustrup a implémenté la première bibliothèque d'entrée/sortie de flux. L'idée de fournir un opérateur de sortie plutôt qu'une fonction de sortie nommée a été suggérée par Doug McIlroy [ 2 ] (qui avait précédemment suggéré les tubes Unix ).

En 1985, la première édition du langage de programmation C++ a été publiée, qui est devenue la référence définitive pour le langage, car il n'y avait pas encore de norme officielle. [ 32 ] La première implémentation commerciale de C++ a été publiée en octobre de la même année. [ 29 ]

En 1989, C++ 2.0 a été publié, suivi par la deuxième édition mise à jour du langage de programmation C++ en 1991. [ 33 ] Les nouvelles fonctionnalités de la version 2.0 comprenaient l'héritage multiple, les classes abstraites, les fonctions membres statiques, les fonctions membres const et les membres protégés. En 1990, le Manuel de référence C++ annoté a été publié. Ce travail est devenu la base de la future norme. Les ajouts de fonctionnalités ultérieurs comprenaient les modèles , les exceptions , les espaces de noms , les nouveaux casts et un type booléen .

En 1998, C++98 a été publié, standardisant le langage, et une mise à jour mineure ( C++03 ) a été publiée en 2003.

Après C++98, le C++ a évolué relativement lentement jusqu'à la publication, en 2011, de la norme C++11 , qui ajoutait de nombreuses nouvelles fonctionnalités, élargissait la bibliothèque standard et offrait davantage de fonctionnalités aux programmeurs C++. Après une mise à jour mineure de C++14 publiée en décembre 2014, divers ajouts ont été introduits dans C++17 . [ 34 ] Après sa finalisation en février 2020, [ 35 ] un projet de norme C++20 a été approuvé le 4 septembre 2020 et officiellement publié le 15 décembre 2020. [ 36 ] [ 37 ]

Le 3 janvier 2018, Stroustrup a été annoncé comme le lauréat 2018 du prix Charles Stark Draper d'ingénierie, « pour la conceptualisation et le développement du langage de programmation C++ ». [ 38 ]

En décembre 2022, C++ se classait troisième au classement TIOBE , surpassant Java pour la première fois dans l'histoire de l'indice. En novembre 2024 , le langage se classait deuxième après Python , Java étant troisième. [ 39 ]

Étymologie
Selon Stroustrup, « le nom signifie la nature évolutive des changements par rapport à C. » [ 40 ] Ce nom est attribué à Rick Mascitti (mi-1983) [ 31 ] et a été utilisé pour la première fois en décembre 1983. Lorsque Mascitti a été interrogé de manière informelle en 1992 sur le nom, il a indiqué qu'il avait été donné dans un esprit ironique . Le nom vient de ++ l'opérateur de C (qui incrémente la valeur d'une variable ) et d'une convention de nommage courante consistant à utiliser « + » pour indiquer un programme informatique amélioré.

Au cours de la période de développement du C++, le langage a été appelé « nouveau C » et « C avec classes » [ 31 ] [ 41 ] avant d'acquérir son nom définitif.

Philosophie
Tout au long de la vie de C++, son développement et son évolution ont été guidés par un ensemble de principes : [ 30 ]

Il doit être motivé par des problèmes réels et ses fonctionnalités doivent être immédiatement utiles dans les programmes du monde réel.
Chaque fonctionnalité doit être implémentable (avec une manière raisonnablement évidente de le faire).
Les programmeurs devraient être libres de choisir leur propre style de programmation, et ce style devrait être entièrement pris en charge par C++.
Autoriser une fonctionnalité utile est plus important que d’empêcher toute mauvaise utilisation possible de C++.
Il devrait fournir des moyens d’organiser les programmes en parties distinctes et bien définies, ainsi que des moyens de combiner des parties développées séparément.
Aucune violation implicite du système de types (mais autorise les violations explicites, c'est-à-dire celles explicitement demandées par le programmeur).
Les types créés par l’utilisateur doivent bénéficier du même support et des mêmes performances que les types intégrés.
Les fonctionnalités inutilisées ne doivent pas avoir d'impact négatif sur les exécutables créés (par exemple, en réduisant les performances).
Il ne devrait y avoir aucun langage sous C++ (à l'exception du langage assembleur ).
C++ devrait fonctionner aux côtés d’autres langages de programmation existants , plutôt que de favoriser son propre environnement de programmation séparé et incompatible .
Si l’intention du programmeur est inconnue, permettez-lui de la spécifier en fournissant un contrôle manuel.
Standardisation
Articles principaux : C++03 , C++11 , C++14 , C++17 , C++20 , C++23 et C++26
Normes C++
Année	Norme ISO/CEI	Nom informel
1998	14882:1998 [ 42 ]	C++98
2003	14882:2003 [ 43 ]	C++03
2011	14882:2011 [ 44 ]	C++11 , C++0x
2014	14882:2014 [ 45 ]	C++14 , C++1y
2017	14882:2017 [ 46 ]	C++17 , C++1z
2020	14882:2020 [ 47 ]	C++20 , C++2a
2024	14882:2024 [ 17 ]	C++23 , C++2b
À déterminer		C++26 , C++2c
Le C++ est normalisé par un groupe de travail ISO appelé JTC1/SC22/WG21 . À ce jour, sept révisions de la norme C++ ont été publiées et la prochaine révision, C++26 , est actuellement en cours .


Scène lors de la réunion du comité des normes C++ à Stockholm en 1996
En 1998, le groupe de travail ISO a normalisé C++ pour la première fois sous la norme ISO/IEC 14882:1998 , plus connue sous le nom informel de C++98 . En 2003, il a publié une nouvelle version de la norme C++, appelée ISO/IEC 14882:2003 , qui corrigeait les problèmes identifiés dans C++98.

La prochaine révision majeure de la norme a été appelée de manière informelle « C++0x », mais elle n'a été publiée qu'en 2011. [ 48 ] C++11 (14882:2011) comprenait de nombreux ajouts au langage de base et à la bibliothèque standard. [ 44 ]

En 2014, C++14 (également connu sous le nom de C++1y) a été publié comme une petite extension de C++11, comportant principalement des corrections de bogues et de petites améliorations. [ 49 ] Les procédures de vote du projet de norme internationale se sont achevées à la mi-août 2014. [ 50 ]

Après C++14, une révision majeure C++17 , connue officieusement sous le nom de C++1z, a été achevée par le comité ISO C++ à la mi-juillet 2017 et a été approuvée et publiée en décembre 2017. [ 51 ]

Dans le cadre du processus de normalisation, l’ISO publie également des rapports et des spécifications techniques :

ISO/IEC TR 18015:2006 [ 52 ] sur l'utilisation du C++ dans les systèmes embarqués et sur les implications en termes de performances des fonctionnalités du langage et de la bibliothèque C++,
ISO/IEC TR 19768:2007 [ 53 ] (également connu sous le nom de Rapport technique C++ 1 ) sur les extensions de bibliothèque principalement intégrées dans C++11 ,
ISO/IEC TR 29124:2010 [ 54 ] sur les fonctions mathématiques spéciales, intégrées dans C++17 ,
ISO/IEC TR 24733:2011 [ 55 ] sur l'arithmétique décimale à virgule flottante ,
ISO/IEC TS 18822:2015 [ 56 ] sur la bibliothèque de systèmes de fichiers standard, intégrée dans C++17 ,
ISO/IEC TS 19570:2015 [ 57 ] sur les versions parallèles des algorithmes de la bibliothèque standard, intégrés dans C++17 ,
ISO/IEC TS 19841:2015 [ 58 ] sur la mémoire transactionnelle logicielle ,
ISO/IEC TS 19568:2015 [ 59 ] sur un nouvel ensemble d'extensions de bibliothèque, dont certaines sont déjà intégrées dans C++17 ,
ISO/IEC TS 19217:2015 [ 60 ] sur les concepts C++ , intégrés dans C++20 ,
ISO/IEC TS 19571:2016 [ 61 ] sur les extensions de bibliothèque pour la concurrence, dont certaines sont déjà intégrées dans C++20 ,
ISO/IEC TS 19568:2017 [ 62 ] sur un nouvel ensemble d'extensions de bibliothèque à usage général,
ISO/IEC TS 21425:2017 [ 63 ] sur les extensions de bibliothèque pour les plages, intégrées dans C++20 ,
ISO/IEC TS 22277:2017 [ 64 ] sur les coroutines, intégrées dans C++20 ,
ISO/IEC TS 19216:2018 [ 65 ] sur la bibliothèque réseau,
ISO/IEC TS 21544:2018 [ 66 ] sur les modules, intégrés dans C++20 ,
ISO/IEC TS 19570:2018 [ 67 ] sur un nouvel ensemble d'extensions de bibliothèque pour le parallélisme
ISO/IEC TS 23619:2021 [ 68 ] sur les nouvelles extensions pour la programmation réflexive (réflexion),
ISO/IEC TS 9922:2024 [ 69 ] sur un nouvel ensemble d'extensions de concurrence, et
ISO/IEC TS 19568:2024 [ 70 ] sur un autre nouvel ensemble d'extensions de bibliothèque.
D’autres spécifications techniques sont en cours de développement et en attente d’approbation.

Langue
Article principal : Syntaxe C++
Le langage C++ comporte deux composantes principales : un mappage direct des fonctionnalités matérielles fournies principalement par le sous-ensemble C, et des abstractions sans surcharge basées sur ces mappages. Stroustrup décrit le C++ comme « un langage de programmation d'abstraction léger [conçu] pour construire et utiliser des abstractions efficaces et élégantes » ; [ 15 ] et « offrir à la fois accès au matériel et abstraction est la base du C++. Son efficacité le distingue des autres langages. » [ 71 ]

Le C++ hérite de la majeure partie de la syntaxe du C. Un programme « Hello World » conforme à la norme C est également un programme « Hello World » C++ valide. Voici la version de Bjarne Stroustrup du programme « Hello World » , qui utilise la fonctionnalité de flux de la bibliothèque standard C++ pour écrire un message sur la sortie standard : [ 72 ] [ 73 ] [ note 2 ]

#include <iostream>

int main ()
{
    std :: cout << "Bonjour tout le monde ! \n " ;
}
Bibliothèque standard

Le projet de norme « Working Paper » qui a été approuvé sous le nom de C++98 ; la moitié de sa taille était consacrée à la bibliothèque standard C++.
Article principal : Bibliothèque standard C++
La norme C++ se compose de deux parties : le langage principal et la bibliothèque standard. Les programmeurs C++ s'attendent à la présence de cette dernière sur chaque implémentation majeure de C++ ; elle inclut des types d'agrégats ( vecteurs , listes, cartes, ensembles, files d'attente, piles, tableaux, tuples), des algorithmes (find, for_each , binary_search , random_shuffle, etc.), des fonctions d'entrée/sortie ( iostream , pour la lecture et l'écriture sur la console et les fichiers), une bibliothèque de systèmes de fichiers, la prise en charge de la localisation, des pointeurs intelligents pour la gestion automatique de la mémoire, la prise en charge des expressions régulières , une bibliothèque multithreading , la prise en charge des atomes (permettant la lecture ou l'écriture d'une variable par un seul thread à la fois sans synchronisation externe), des utilitaires de temps (mesure, obtention de l'heure actuelle, etc.), un système de conversion des rapports d'erreurs n'utilisant pas d'exceptions C++ en exceptions C++, un générateur de nombres aléatoires et une version légèrement modifiée de la bibliothèque standard C (pour la rendre compatible avec le système de types C++).

Une grande partie de la bibliothèque C++ repose sur la bibliothèque de modèles standard (STL). Parmi les outils utiles fournis par la STL figurent des conteneurs sous forme de collections d'objets (tels que des vecteurs et des listes ), des itérateurs offrant un accès aux conteneurs de type tableau, et des algorithmes effectuant des opérations telles que la recherche et le tri.

De plus, des (multi)maps ( tableaux associatifs ) et des (multi)sets sont fournis, exportant tous des interfaces compatibles. Par conséquent, l'utilisation de modèles permet d'écrire des algorithmes génériques fonctionnant avec n'importe quel conteneur ou sur n'importe quelle séquence définie par des itérateurs.

Comme en C, les fonctionnalités de la bibliothèque sont accessibles via la #include directive « include un en-tête standard » . La bibliothèque standard C++ fournit 105 en-têtes standard, dont 27 sont obsolètes. Avec l'introduction des modules en C++20 , ces en-têtes sont accessibles via import, et en C++23 , l'intégralité de la bibliothèque standard peut désormais être importée directement en tant que module, via . Actuellement, la bibliothèque standard C++ fournit deux modules, et (un module de compatibilité pour lequel exporte les fonctionnalités de la bibliothèque standard C dans l'espace de noms global). import std;stdstd.compatstd

La norme intègre la STL, initialement conçue par Alexander Stepanov , qui a expérimenté des algorithmes et des conteneurs génériques pendant de nombreuses années. En commençant avec le C++, il a finalement trouvé un langage permettant de créer des algorithmes génériques (par exemple, le tri STL) encore plus performants que, par exemple, la bibliothèque standard C qsort, grâce à des fonctionnalités C++ comme l'utilisation de l'inlining et de la liaison à la compilation au lieu de pointeurs de fonction. La norme ne la désigne pas comme « STL », car elle n'en est qu'une partie, mais ce terme reste largement utilisé pour la distinguer du reste de la bibliothèque standard (flux d'entrée/sortie, internationalisation, diagnostics, sous-ensemble de la bibliothèque C, etc.). [ 74 ]

La plupart des compilateurs C++, et tous les principaux, fournissent une implémentation conforme aux normes de la bibliothèque standard C++.

Directives de base C++
Les C++ Core Guidelines [ 75 ] sont une initiative menée par Bjarne Stroustrup, l'inventeur du C++, et Herb Sutter, le coordinateur et président du groupe de travail ISO C++, pour aider les programmeurs à écrire du « C++ moderne » en utilisant les meilleures pratiques pour les normes de langage C++11 et plus récentes, et pour aider les développeurs de compilateurs et d'outils de vérification statique à créer des règles pour détecter les mauvaises pratiques de programmation.

L'objectif principal est d'écrire de manière efficace et cohérente du C++ sûr en termes de type et de ressources.

Les lignes directrices de base ont été annoncées [ 76 ] lors du discours d’ouverture du CPPCon 2015.

Les lignes directrices sont accompagnées de la bibliothèque de support des lignes directrices (GSL), [ 77 ] une bibliothèque d'en-têtes uniquement de types et de fonctions pour implémenter les lignes directrices de base et des outils de vérification statique pour appliquer les règles des lignes directrices. [ 78 ]

Compatibilité
Afin de donner plus de liberté aux fournisseurs de compilateurs, le comité de normalisation C++ a décidé de ne pas imposer l'implémentation de la modification des noms , de la gestion des exceptions et d'autres fonctionnalités spécifiques à l'implémentation. L'inconvénient de cette décision est que le code objet produit par différents compilateurs est susceptible d'être incompatible. Il existe cependant des tentatives de normalisation des compilateurs pour des machines ou des systèmes d'exploitation spécifiques . Par exemple, l'ABI Itanium C++ est indépendante du processeur (malgré son nom) et est implémentée par GCC et Clang. [ 79 ]

Avec C
Article principal : Compatibilité de C et C++
Le C++ est souvent considéré comme un sur-ensemble du C , mais ce n'est pas tout à fait vrai. [ 80 ] La plupart du code C peut facilement être compilé correctement en C++, mais il existe quelques différences qui rendent certains codes C valides invalides ou se comportent différemment en C++. Par exemple, le C autorise la conversion implicite de vers d'autres types de pointeurs, mais pas le C++ (pour des raisons de sécurité des types). De plus, le C++ définit de nombreux nouveaux mots-clés, tels que et , qui peuvent être utilisés comme identifiants (par exemple, des noms de variables) dans un programme C. void*newclass

Français Certaines incompatibilités ont été supprimées par la révision de 1999 de la norme C ( C99 ), qui prend désormais en charge les fonctionnalités C++ telles que les commentaires de ligne ( //) et les déclarations mélangées au code. D'autre part, C99 a introduit un certain nombre de nouvelles fonctionnalités que C++ ne prenait pas en charge et qui étaient incompatibles ou redondantes en C++, telles que les tableaux de longueur variable , les types de nombres complexes natifs (cependant, la classe de la bibliothèque standard C++ fournit des fonctionnalités similaires, bien que non compatibles avec le code), les initialiseurs désignés, les littéraux composés et le mot-clé. [ 81 ] Certaines des fonctionnalités introduites par C99 ont été incluses dans la version ultérieure de la norme C++, C++11 (parmi celles qui n'étaient pas redondantes). [ 82 ] [ 83 ] [ 84 ] Cependant, la norme C++11 introduit de nouvelles incompatibilités, telles que l'interdiction d'assigner un littéral de chaîne à un pointeur de caractère, ce qui reste valide en C. std::complexrestrict

Pour mélanger du code C et du code C++, toute déclaration ou définition de fonction appelée ou utilisée à la fois en C et en C++ doit être déclarée avec une liaison C, en la plaçant dans un bloc. Une telle fonction ne doit pas dépendre de fonctionnalités dépendant de la modification des noms (c'est-à-dire de la surcharge de fonction). extern "C" {/*...*/}

Assemblage en ligne
Les programmes développés en C ou C++ utilisent souvent l'assembleur en ligne pour tirer parti de ses fonctionnalités de bas niveau, de sa vitesse supérieure et de son contrôle amélioré par rapport aux langages de programmation de haut niveau [ 85 ] [ 86 ] lorsque l'optimisation des performances est essentielle. C++ prend en charge l'intégration du langage assembleur à l'aide de déclarations asm [ 87 ] , mais la compatibilité de l'assembleur en ligne varie considérablement entre les compilateurs et les architectures. Contrairement aux fonctionnalités des langages de haut niveau tels que Python ou Java , le code assembleur dépend fortement du processeur sous-jacent et de l'implémentation du compilateur.

Variations entre les compilateurs
Différents compilateurs C++ implémentent l'assemblage en ligne de manières distinctes.

GCC ( GNU Compiler Collection ) et Clang [ 88 ] : Utilisent la syntaxe d'assemblage en ligne étendue de GCC. L'utilisation __asm__du mot-clé plutôt que asmde lors de l'écriture de code pouvant être compilé avec les options et permet de spécifier les opérandes d'entrée/sortie et les registres écrasés. Cette approche est largement adoptée, notamment par les compilateurs Intel [ 89 ] et IBM [ 90 ] .-ansi-std
MSVC ( Microsoft Visual C++ ) : l'assembleur en ligne est intégré au compilateur. Auparavant, l'assembleur en ligne était pris en charge via le __asmmot-clé, mais cette prise en charge a été supprimée en mode 64 bits, nécessitant des modules .asm distincts [ 91 ] .
TI ARM Clang et compilateurs embarqués [ 92 ] : Certains compilateurs de systèmes embarqués, comme TI Arm Clang de Texas Instruments, autorisent l'assemblage en ligne mais imposent des règles plus strictes pour éviter les conflits avec les conventions de registre et les conventions d'appel.
Interopérabilité entre C++ et Assembleur
C++ fournit deux méthodes principales d’intégration du code ASM.

1. Fichiers d'assemblage autonomes – Le code d'assemblage est écrit séparément et lié au code C++. [ 93 ]

2. Assemblage en ligne – Le code assembleur est intégré au code C++ à l’aide d’extensions spécifiques au compilateur.

Exemple de code pour la compatibilité ASM

Lors de l'appel d'une fonction d'assemblage à partir de C++, utilisez pour empêcher la modification du nom C++.extern "C"
//main.cpp
importer std ;

extern "C" int add_asm ( int , int ); // Déclarer la fonction d'assemblage

int main () {
    int résultat = add_asm ( 5 , 7 );
    std :: println ( "Résultat de l'ASM : {}" , result );
    renvoie 0 ;
}
#code asm utilisant l'architecture RISC-V
. section . texte
. global add_asm

add_asm :
    ajouter a0 , a0 , a1 # Ajouter le premier argument ( a0 ) et le deuxième argument ( a1 ), stocker dans a0
    ret # Retour ( a0 contient la valeur de retour )
Les variables globales dans l'assembly doivent être déclarées comme externen C++ et marquées .globaldans l'assembly.
// main.cpp
importer std ;

extern "C" int global_var ; // Déclarer une variable globale à partir de l'assembly

int main () {
    std :: println ( "Variable globale de l'ASM : {}" , global_var );
    renvoie 0 ;
}
#asm utilisant l'architecture RISC-V
. section . données
. global global_var
. aligner 4
global_var :
    . mot 42 # Définir la valeur entière
L'assemblage en ligne permet d'intégrer ASM directement dans C++ à l'aide du asmmot-clé.
//main.cpp (en utilisant le compilateur GCC/CLANG)
importer std ;

int main () {
    int x = 10 , y = 20 , somme ;

    asm volatile (
        "ajouter %0, %1, %2"
        : "=r" ( sum ) // Opérande de sortie (stocké dans un registre)
        : "r" ( x ), "r" ( y ) // Opérandes d'entrée (stockés dans des registres)
    );

    std :: println ( "Somme en utilisant ASM en ligne : {}" , sum );
    renvoie 0 ;
}
Voir aussi
icône	Portail de programmation informatique
Carbone (langage de programmation)
Comparaison des langages de programmation
Liste des compilateurs C++
Aperçu du C++
Catégorie : Bibliothèques C++
Notes de bas de page
 Pour l'idée des coroutines sans pile C++20.
 Ce code est directement copié de la page d'errata de Bjarne Stroustrup (p. 633). Il aborde l'utilisation de'\n'plutôt questd::endl. Voir également « Puis-je écrire « void main() » ? » (archivé le 2 juillet 2020 sur Wayback Machine) pour une explication de l'implicitereturn 0;de lamainfonction. Ce retour implicite n'est pas disponible dans les autres fonctions.
Références
« Présentation des modules en C++ » . Microsoft. 24 avril 2023.
 Stroustrup, Bjarne (1996). « Une histoire du C++ : 1979-1991 ».Histoire des langages de programmation --- II.ACM. pp. 699–769.doi: 10.1145/234286.1057836 .
 Stroustrup, Bjarne (16 décembre 2021). « C++20 : Atteindre les objectifs du C++ - Bjarne Stroustrup - CppCon 2021 » . CppCon. Archivé de l'original le 30 décembre 2021. Consulté le 30 décembre 2021 .
 Stroustrup, Bjarne (12 juin 2020). « Prospérer dans un monde saturé et en constante évolution : C++ 2006–2020 » . Actes de l'ACM sur les langages de programmation . 4 (HOPL). Association for Computing Machinery (ACM) : 1– 168. doi : 10.1145/3386320 . ISSN : 2475-1421 . S2CID : 219603741 .
 Naugler, David (mai 2007). « C# 2.0 pour les programmeurs C++ et Java : atelier de conférence ». Journal of Computing Sciences in Colleges . 22 (5). Bien que C# ait été fortement influencé par Java, il l'a également été par C++ et doit être considéré comme un descendant à la fois de C++ et de Java.
« Spécifications de la chapelle (Remerciements) » (PDF) . Cray Inc., 1er octobre 2015. Archivé (PDF) de l'original le 24 juin 2018. Consulté le 14 janvier 2016 .
 Fogus, Michael. « Rich Hickey Q&R » . Code Quarterly . Archivé de l'original le 11 janvier 2017. Consulté le 11 janvier 2017 .
 Harry. H. Chaudhary (28 juillet 2014). « Décrypter l'entretien de programmation Java : plus de 2 000 questions/réponses d'entretien Java » . Archivé de l'original le 27 mai 2021. Consulté le 29 mai 2016 .
 Roger Poon (1er mai 2017). « Mise à l'échelle de JS++ : abstraction, performances et lisibilité » . Archivé de l'original le 11 mai 2020. Consulté le 21 avril 2020 .
« L'évolution d'un langage d'extension : une histoire de Lua » . www.lua.org . Consulté le 4 janvier 2023 .
« FAQ sur le langage de programmation Nim » . Archivé de l'original le 11 juillet 2017. Consulté le 21 avril 2020 .
« 9. Classes — Documentation Python 3.6.4 » . docs.python.org . Archivé de l'original le 23 octobre 2012 . Consulté le 9 janvier 2018 .
« Influences – La référence Rust » . doc.rust-lang.org . Consulté le 4 janvier 2023 .
Stroustrup, Bjarne (1997). « 1 ». Le langage de programmation C++ (3e éd.). Addison-Wesley. ISBN 0-201-88954-4. OCLC  59193992 .
 Stroustrup, B. (6 mai 2014).« Lecture: The essence of C++. University of Edinburgh ». YouTube .Archivéde l'original le 28 avril 2015. Consulté le 12 juin 2015.
 Stroustrup, Bjarne (17 février 2014). « Applications C++ » . stroustrup.com . Archivé de l'original le 4 avril 2021. Consulté le 5 mai 2014 .
 « ISO/IEC 14882:2024 ». Organisation internationale de normalisation. Consulté le 21 octobre 2020.
« Page d'accueil de Bjarne Stroustrup » . www.stroustrup.com . Archivé de l'original le 14 mai 2019. Consulté le 15 mai 2013 .
« Calendrier IS C++ » (PDF) . Archivé (PDF) de l'original le 10 août 2020. Consulté le 9 août 2020 .
« C++ ; Vers où il va » . Archivé de l'original le 3 décembre 2018. Consulté le 3 décembre 2018 .
« Re : [RFC] Convertir builin-mailinfo.c pour utiliser The Better String Library » (Liste de diffusion). 6 septembre 2007. Archivé de l'original le 8 mars 2021. Consulté le 31 mars 2015 .
« Re : Des efforts pour attirer plus d'utilisateurs ? » (Liste de diffusion). 12 juillet 2010. Archivé de l'original le 21 mars 2015. Consulté le 31 mars 2015 .
 Andrew Binstock (18 mai 2011). « Dr. Dobb's : Entretien avec Ken Thompson » . Dr. Dobb's . Archivé de l'original le 13 mars 2014. Consulté le 7 février 2014 .
 Peter Seibel (16 septembre 2009). Codeurs au travail : Réflexions sur l'art de programmer . Apress. pp.  475–476 . ISBN 978-1-4302-1948-4. Archivé de l'original le 1er décembre 2019 . Récupéré le 9 novembre 2017 .
« C++ dans Coders at Work » . 16 octobre 2009. Archivé de l'original le 10 novembre 2017. Consulté le 9 novembre 2017 .
« Entretien avec Donald Knuth » . Dr. Dobb's . Archivé de l'original le 8 mars 2021. Consulté le 18 juillet 2021 .
« (La)TeX Navigator » . Archivé de l'original le 20 novembre 2017. Consulté le 10 novembre 2017 .
 Claburn, Thomas (2 mars 2025). « Le créateur du C++ appelle à l'aide pour défendre son langage de programmation contre les « attaques graves »" . Le Registre . Récupéré le 5 mars 2025 .
 Stroustrup, Bjarne (7 mars 2010).« FAQ de Bjarne Stroustrup : Quand le C++ a-t-il été inventé ? ».stroustrup.com.Archivéde l'original le 6 février 2016. Consulté le 16 septembre 2010.
 Stroustrup, Bjarne.« Évolution d'un langage dans et pour le monde réel : C++ 1991-2006 »(PDF).Archivé(PDF)de l'original le 20 novembre 2007.Consulté le 14 août 2013.
 Stroustrup, Bjarne.« Histoire du C++ : 1979-1991 »(PDF).Archivé(PDF)de l'original le 2 février 2019.Consulté le 18 juillet 2013.
 Stroustrup, Bjarne. « Le langage de programmation C++ » (première éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Stroustrup, Bjarne. « Le langage de programmation C++ » (deuxième éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Sutter, Herb (30 juin 2016). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Oulu) » . herbsutter.com . Archivé de l'original le 8 octobre 2016. La prochaine norme après C++17 sera C++20.
 Dusíková, Hana (6 novembre 2019). « N4817 : Invitation et informations à la réunion de Prague 2020 » (PDF) . Archivé (PDF) de l'original le 29 décembre 2019. Consulté le 13 février 2020 .
« État actuel » . isocpp.org . Archivé de l'original le 8 septembre 2020. Consulté le 7 septembre 2020 .
« C++20 approuvé – Herb Sutter » . isocpp.org . Archivé de l'original le 11 septembre 2020. Consulté le 8 septembre 2020 .
« Le pionnier de l'informatique Bjarne Stroustrup recevra le prix Charles Stark Draper d'ingénierie 2018 » (communiqué de presse). Académie nationale d'ingénierie. 3 janvier 2018. Archivé de l'original le 3 janvier 2018. Consulté le 14 décembre 2021 .
 TIOBE (novembre 2024). « Indice TIOBE de novembre 2024 » . TIOBE.com . Société TIOBE. Archivé de l'original le 18 novembre 2024. Consulté le 18 novembre 2024 .
« FAQ de Bjarne Stroustrup – D'où vient le nom « C++ » ? » . Archivé de l'original le 6 février 2016. Consulté le 16 janvier 2008 .
« C pour les programmeurs C++ » . Université Northeastern . Archivé de l'original le 17 novembre 2010. Consulté le 7 septembre 2015 .
« ISO/CEI 14882:1998 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2017. Consulté le 23 novembre 2018 .
« ISO/CEI 14882:2003 » . Organisation internationale de normalisation. Archivé de l'original le 13 août 2021. Consulté le 23 novembre 2018 .
 « ISO/IEC 14882:2011 ». Organisation internationale de normalisation.Archivéde l'original le 27 mai 2016.Consulté le 23 novembre 2018.
« ISO/IEC 14882:2014 » . Organisation internationale de normalisation. Archivé de l'original le 29 avril 2016. Consulté le 23 novembre 2018 .
« ISO/IEC 14882:2017 » . Organisation internationale de normalisation. Archivé de l'original le 29 janvier 2013. Consulté le 2 décembre 2017 .
« ISO/IEC 14882:2020 » . Organisation internationale de normalisation. Archivé de l'original le 16 décembre 2020. Consulté le 16 décembre 2020 .
« Nous disposons d'une norme internationale : C++0x est approuvé à l'unanimité . » Sutter's Mill . 12 août 2011. Archivé de l'original le 28 juin 2018. Consulté le 23 novembre 2018 .
« L'avenir du C++ » . Archivé de l'original le 23 octobre 2018. Consulté le 23 novembre 2018 via channel9.msdn.com.
« Nous avons C++14 ! : C++ standard » . isocpp.org . Archivé de l'original le 19 août 2014 . Consulté le 19 août 2014 .
 Sutter, Herb (15 juillet 2017). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Toronto) » . Archivé de l'original le 6 août 2017. Consulté le 4 août 2017 .
« ISO/IEC TR 18015:2006 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 19768:2007 » . Organisation internationale de normalisation. Archivé de l'original le 4 mars 2016. Consulté le 15 février 2019 .
« ISO/IEC TR 29124:2010 » . Organisation internationale de normalisation. Archivé de l'original le 12 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 24733:2011 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 18822:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19841:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19217:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19571:2016 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21425:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 22277:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19216:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21544:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 23619:2021 » . Organisation internationale de normalisation. Archivé de l'original le 15 décembre 2018. Consulté le 11 octobre 2021 .
« ISO/IEC TS 9922:2024 » . Organisation internationale de normalisation. Archivé de l'original le 1er avril 2025. Consulté le 1er avril 2025 .
« ISO/IEC TS 19568:2024 » . Organisation internationale de normalisation. Archivé de l'original le 25 février 2025. Consulté le 1er avril 2025 .
 B. Stroustrup (interviewé par Sergio De Simone) (30 avril 2015). « Stroustrup : Réflexions sur C++17 - Une interview » . Archivé de l'original le 8 juillet 2015. Consulté le 8 juillet 2015 .
 Stroustrup, Bjarne (2000). Le langage de programmation C++ (éd. spéciale). Addison-Wesley. p. 46. ISBN 0-201-70073-5.
 Stroustrup, Bjarne. « Problèmes en suspens concernant le langage de programmation C++ (3e édition) » . Archivé de l'original le 5 mai 2014. Consulté le 5 mai 2014 .
 Graziano Lo Russo (2008). « Entretien avec A. Stepanov » . stlport.org . Archivé de l'original le 4 mars 2009. Consulté le 8 octobre 2015 .
« Directives C++ Core » . isocpp.github.io . Archivé de l'original le 16 février 2020 . Consulté le 9 février 2020 .
« Bjarne Stroustrup annonce les directives de base du C++ : C++ standard » . isocpp.org . Archivé de l'original le 11 mai 2020. Consulté le 31 mars 2020 .
« microsoft/GSL » . 18 juillet 2021. Archivé de l'original le 18 juillet 2021. Consulté le 18 juillet 2021 via GitHub.
« Utilisation des vérificateurs des directives de base C++ » . Microsoft Learn . Archivé de l'original le 13 août 2021. Consulté le 31 mars 2020 .
« Résumé de l'ABI C++ » . 20 mars 2001. Archivé de l'original le 10 juillet 2018. Consulté le 30 mai 2006 .
« FAQ de Bjarne Stroustrup – Le C est-il un sous-ensemble du C++ ? » . Archivé de l'original le 6 février 2016. Consulté le 5 mai 2014 .
« C9X – La nouvelle norme C » . Archivé de l'original le 21 juin 2018. Consulté le 27 décembre 2008 .
« Prise en charge de C++0x dans GCC » . Archivé de l'original le 21 juillet 2010. Consulté le 12 octobre 2010 .
« Fonctionnalités principales du langage C++0x dans VC10 : le tableau » . Archivé de l'original le 21 août 2010. Consulté le 12 octobre 2010 .
« Clang - État des versions C++98, C++11 et C++14 » . Clang.llvm.org. 12 mai 2013. Archivé de l'original le 4 juillet 2013. Consulté le 10 juin 2013 .
 Bokil, Milind A. (2021). « Écriture de routines d'assemblage dans les programmes C/C++ et Java ». ResearchGate. Consulté le 1er avril 2025.
 Vilhena, Paulo Emílio de ; Lahav, Ori ; Vafeiadis, Viktor ; Raad, Azalea (2024). « Extension du modèle de mémoire C/C++ avec l'assemblage en ligne ». Actes de l'ACM sur les langages de programmation, vol. 8, OOPSLA2, article 309. doi:10.1145/3689749.
 Contributeurs de cppreference.com. « Déclaration ASM ». cppreference.com . Consulté le 1er avril 2025.
« Asm étendu (utilisation de la collection de compilateurs GNU) » . Documentation en ligne de GCC . Projet GNU . Consulté le 1er avril 2025 .
 Intel Corporation. « Assemblage en ligne ». Guide du développeur et référence du compilateur Intel® C++ Classic , version 2021.9. Consulté le 1er avril 2025.
 IBM. « Instructions d'assemblage en ligne (extension IBM) ». Documentation IBM . Consulté le 1er avril 2025.
« Présentation de l'assembleur en ligne » . Microsoft Learn . Microsoft . Consulté le 1er avril 2025 .
« Interfaçage de C et C++ avec le langage assembleur » . Texas Instruments . Texas Instruments Incorporated. 23 février 2025. Consulté le 1er avril 2025 .
« Liaison C++ vers ASM dans GCC » . Wiki OSDev . Consulté le 1er avril 2025 .
Lectures complémentaires
Abrahams, David ; Gurtovoy, Aleksey (2005). Métaprogrammation de modèles C++ : concepts, outils et techniques issus de Boost et au-delà . Addison-Wesley. ISBN 0-321-22725-5.
Alexandrescu, Andrei (2001). Conception C++ moderne : Programmation générique et modèles de conception appliqués . Addison-Wesley. ISBN. 0-201-70431-5.
Alexandrescu, Andrei ; Sutter, Herb (2004). Normes de conception et de codage C++ : règles et directives pour l'écriture de programmes . Addison-Wesley. ISBN 0-321-11358-6.
Becker, Pete (2006). Les extensions de la bibliothèque standard C++ : tutoriel et référence . Addison-Wesley. ISBN. 0-321-41299-0.
Cassé, Frank (2010). Annotations C++ . Université de Groningue. ISBN 978-90-367-0470-0. Archivé de l'original le 28 avril 2010 . Récupéré le 28 avril 2010 .
Coplien, James O. (1994) [réédité avec corrections, année de publication originale : 1992]. C++ avancé : Styles et expressions idiomatiques de programmation . Addison-Wesley. ISBN 0-201-54855-0.
Dewhurst, Stephen C. (2005). C++ Common Knowledge : Programmation intermédiaire essentielle . Addison-Wesley. ISBN. 0-321-32192-8.
Conseil de l'industrie des technologies de l'information (15 octobre 2003). Langages de programmation – C++ (deuxième éd.). Genève : ISO/IEC. 14882:2003(E).
Josuttis, Nicolai M. (2012). La bibliothèque standard C++ : tutoriel et référence (deuxième éd.). Addison-Wesley. ISBN. 978-0-321-62321-8.
Koenig, Andrew ; Moo, Barbara E. (2000). C++ accéléré – Programmation pratique par l'exemple . Addison-Wesley. ISBN 0-201-70353-X.
Lippman, Stanley B. ; Lajoie, Josée; Moo, Barbara E. (2011). Introduction à C++ (Cinquième éd.). Addison-Wesley. ISBN 978-0-321-71411-4.
Lippman, Stanley B. (1996). Au cœur du modèle objet C++ . Addison-Wesley. ISBN. 0-201-83454-5.
Meyers, Scott (2005). Effective C++ (3e éd.). Addison-Wesley. ISBN. 0-321-33487-6.
Stroustrup, Bjarne (2013). Le langage de programmation C++ (quatrième éd.). Addison-Wesley. ISBN. 978-0-321-56384-2.
Stroustrup, Bjarne (1994). Conception et évolution de C++ . Addison-Wesley. ISBN. 0-201-54330-3.
Stroustrup, Bjarne (2014). Programmation : Principes et pratique en C++ (2e éd.). Addison-Wesley. ISBN. 978-0-321-99278-9.
Sutter, Herb (2001). C++ encore plus exceptionnel : 40 nouveaux casse-têtes d'ingénierie, problèmes de programmation et solutions . Addison-Wesley. ISBN 0-201-70434-X.
Sutter, Herb (2004). Style C++ exceptionnel . Addison-Wesley. ISBN. 0-201-76042-8.
Vandevoorde, David; Josuttis, Nicolai M. (2003). Modèles C++ : le guide complet . Addison-Wesley. ISBN 0-201-73484-2.
Liens externes
JTC1/SC22/WG21 – Groupe de travail sur la norme ISO/IEC C++
Standard C++ Foundation – une organisation à but non lucratif qui promeut l'utilisation et la compréhension du C++ standard. Bjarne Stroustrup est l'un des directeurs de l'organisation.
Mots-clés C++
Expressions C++
Priorité des opérateurs C++
C++ dans les projets frères de Wikipédia :

Médias de Commons

Citations de Wikiquote

Manuels scolaires de Wikibooks

Ressources de Wikiversité
vtet
C++
vtet
Langages de programmation
ComparaisonChronologieHistoire
AdaALGOL SimulaAPLAssembléeBASIQUE Visual Basic classique.FILETCC++C#COBOLErlang ÉlixirEn avantFortranAllerHaskellJavaJavaScript ManuscritJuliaKotlinZézayerLuaMATLABML Caml OCamlPascal Pascal ObjetPerl RakuPHPProloguePythonRRubisRouillerSQLGratterCoquillePetite conversationRapideplus...
 Listes : alphabétiqueCatégoriqueGénérationnelNon basé sur l'anglais Catégorie
vtet
Normes de l'Organisation internationale de normalisation (ISO)
vtet
normes CEI
Bases de données de contrôle d'autorité Modifiez ceci sur Wikidata
Catégories :C++Famille de langages de programmation AlgolFamille de langages de programmation C++Langages de programmation basés sur les classesLogiciel multiplateformeLangages de programmation de haut niveauLangages de programmation orientés objetLangages de programmation créés en 1983Langages de programmation avec une norme ISOLangages de programmation à typage statiqueLangages de programmation compilés
===================(01)======================
### [C++]
C++ ( / ˈsiːplʌsplʌs / , prononcé « C plus plus » et parfois abrégé en CPP ) est un langage de programmation de haut niveau à usage général créé par l' informaticien danois Bjarne Stroustrup . Initialement publié en 1985 comme une extension du langage de programmation C , il s'est depuis considérablement développé au fil du temps ; en 1997 , C++ possède des fonctionnalités orientées objet , génériques et fonctionnelles , en plus de fonctionnalités de manipulation de mémoire de bas niveau pour des systèmes comme les micro-ordinateurs ou pour créer des systèmes d'exploitation comme Linux ou Windows . Il est généralement implémenté comme un langage compilé , et de nombreux fournisseurs fournissent des compilateurs C++ , notamment la Free Software Foundation , LLVM , Microsoft , Intel , Embarcadero , Oracle et IBM . [ 14 ]

C++ a été conçu pour la programmation de systèmes et de logiciels embarqués , à ressources limitées et de grands systèmes, avec la performance , l'efficacité et la flexibilité d'utilisation comme points forts de sa conception. [ 15 ] C++ s'est également avéré utile dans de nombreux autres contextes, ses principaux atouts étant l'infrastructure logicielle et les applications à ressources limitées, [ 15 ] y compris les applications de bureau , les jeux vidéo , les serveurs (par exemple, le commerce électronique , la recherche sur le Web ou les bases de données ) et les applications critiques en termes de performances (par exemple, les commutateurs téléphoniques ou les sondes spatiales ). [ 16 ]

Français C++ est normalisé par l' Organisation internationale de normalisation (ISO), la dernière version de la norme ayant été ratifiée et publiée par l'ISO en octobre 2024 sous le nom d' ISO/IEC 14882:2024 (connue officieusement sous le nom de C++23 ). [ 17 ] Le langage de programmation C++ a été initialement normalisé en 1998 sous le nom d'ISO/IEC 14882:1998 , qui a ensuite été modifié par les normes C++03 , C++11 , C ++14 , C++17 et C++20 . La norme C++23 actuelle les remplace par de nouvelles fonctionnalités et une bibliothèque standard élargie . Avant la normalisation initiale en 1998, C++ a été développé par Stroustrup aux Bell Labs depuis 1979 comme une extension du langage C ; il voulait un langage efficace et flexible similaire à C qui fournisse également des fonctionnalités de haut niveau pour l'organisation des programmes. [ 18 ] Depuis 2012, C++ suit un calendrier de publication de trois ans [ 19 ] avec C++26 comme prochaine norme prévue. [ 20 ]

Malgré son adoption généralisée, certains programmeurs notables ont critiqué le langage C++ , notamment Linus Torvalds , [ 21 ] Richard Stallman , [ 22 ] Joshua Bloch , Ken Thompson , [ 23 ] [ 24 ] [ 25 ] et Donald Knuth . [ 26 ] [ 27 ] Cela est dû en grande partie à sa gestion manuelle de la mémoire, qui le rend vulnérable aux bogues de dépassement de tampon , qui représentent un risque de sécurité. [ 28 ]

Histoire

Bjarne Stroustrup, le créateur de C++, dans son bureau d'AT&T dans le New Jersey, vers  2000
En 1979, Bjarne Stroustrup , un informaticien danois , a commencé à travailler sur «C avec classes , prédécesseur de C++. [ 29 ] La création d'un nouveau langage est née de l'expérience de Stroustrup en programmation pour sa thèse de doctorat. Stroustrup a constaté que Simula possédait des fonctionnalités très utiles pour le développement de logiciels de grande envergure, mais que le langage était trop lent pour une utilisation pratique, tandis que BCPL était rapide mais trop bas niveau pour convenir au développement de logiciels de grande envergure. Lorsque Stroustrup a commencé à travailler chez AT&T Bell Labs , il a dû analyser le noyau UNIX en termes de calcul distribué . Se souvenant de son doctorat, Stroustrup a entrepris d'améliorer le langage C avec des fonctionnalités similaires à Simula. [ 30 ] Le C a été choisi pour sa polyvalence, sa rapidité, sa portabilité et sa large diffusion. Outre l'influence de C et de Simula, d'autres langages ont influencé ce nouveau langage, notamment ALGOL 68 , Ada , CLU et ML . [ citation requise ]

Initialement, le « C avec classes » de Stroustrup ajoutait des fonctionnalités au compilateur C, Cpre, notamment les classes , les classes dérivées , le typage fort , l'inlining et les arguments par défaut . [ 31 ]


Un quiz sur les fonctionnalités de C++11 donné à Paris en 2015
En 1982, Stroustrup commença à développer un successeur au C avec des classes, qu'il baptisa « C++ » ( ++opérateur d'incrémentation en C) après avoir essayé plusieurs autres noms. De nouvelles fonctionnalités furent ajoutées, notamment les fonctions virtuelles , la surcharge des noms de fonctions et des opérateurs , les références , les constantes, l'allocation de mémoire libre sécurisée (nouveau/suppression), une vérification de type améliorée et des commentaires sur une seule ligne de style BCPL avec deux barres obliques ( //). De plus, Stroustrup développa un nouveau compilateur autonome pour C++, Cfront .

En 1984, Stroustrup a implémenté la première bibliothèque d'entrée/sortie de flux. L'idée de fournir un opérateur de sortie plutôt qu'une fonction de sortie nommée a été suggérée par Doug McIlroy [ 2 ] (qui avait précédemment suggéré les tubes Unix ).

En 1985, la première édition du langage de programmation C++ a été publiée, qui est devenue la référence définitive pour le langage, car il n'y avait pas encore de norme officielle. [ 32 ] La première implémentation commerciale de C++ a été publiée en octobre de la même année. [ 29 ]

En 1989, C++ 2.0 a été publié, suivi par la deuxième édition mise à jour du langage de programmation C++ en 1991. [ 33 ] Les nouvelles fonctionnalités de la version 2.0 comprenaient l'héritage multiple, les classes abstraites, les fonctions membres statiques, les fonctions membres const et les membres protégés. En 1990, le Manuel de référence C++ annoté a été publié. Ce travail est devenu la base de la future norme. Les ajouts de fonctionnalités ultérieurs comprenaient les modèles , les exceptions , les espaces de noms , les nouveaux casts et un type booléen .

En 1998, C++98 a été publié, standardisant le langage, et une mise à jour mineure ( C++03 ) a été publiée en 2003.

Après C++98, le C++ a évolué relativement lentement jusqu'à la publication, en 2011, de la norme C++11 , qui ajoutait de nombreuses nouvelles fonctionnalités, élargissait la bibliothèque standard et offrait davantage de fonctionnalités aux programmeurs C++. Après une mise à jour mineure de C++14 publiée en décembre 2014, divers ajouts ont été introduits dans C++17 . [ 34 ] Après sa finalisation en février 2020, [ 35 ] un projet de norme C++20 a été approuvé le 4 septembre 2020 et officiellement publié le 15 décembre 2020. [ 36 ] [ 37 ]

Le 3 janvier 2018, Stroustrup a été annoncé comme le lauréat 2018 du prix Charles Stark Draper d'ingénierie, « pour la conceptualisation et le développement du langage de programmation C++ ». [ 38 ]

En décembre 2022, C++ se classait troisième au classement TIOBE , surpassant Java pour la première fois dans l'histoire de l'indice. En novembre 2024 , le langage se classait deuxième après Python , Java étant troisième. [ 39 ]

Étymologie
Selon Stroustrup, « le nom signifie la nature évolutive des changements par rapport à C. » [ 40 ] Ce nom est attribué à Rick Mascitti (mi-1983) [ 31 ] et a été utilisé pour la première fois en décembre 1983. Lorsque Mascitti a été interrogé de manière informelle en 1992 sur le nom, il a indiqué qu'il avait été donné dans un esprit ironique . Le nom vient de ++ l'opérateur de C (qui incrémente la valeur d'une variable ) et d'une convention de nommage courante consistant à utiliser « + » pour indiquer un programme informatique amélioré.

Au cours de la période de développement du C++, le langage a été appelé « nouveau C » et « C avec classes » [ 31 ] [ 41 ] avant d'acquérir son nom définitif.

Philosophie
Tout au long de la vie de C++, son développement et son évolution ont été guidés par un ensemble de principes : [ 30 ]

Il doit être motivé par des problèmes réels et ses fonctionnalités doivent être immédiatement utiles dans les programmes du monde réel.
Chaque fonctionnalité doit être implémentable (avec une manière raisonnablement évidente de le faire).
Les programmeurs devraient être libres de choisir leur propre style de programmation, et ce style devrait être entièrement pris en charge par C++.
Autoriser une fonctionnalité utile est plus important que d’empêcher toute mauvaise utilisation possible de C++.
Il devrait fournir des moyens d’organiser les programmes en parties distinctes et bien définies, ainsi que des moyens de combiner des parties développées séparément.
Aucune violation implicite du système de types (mais autorise les violations explicites, c'est-à-dire celles explicitement demandées par le programmeur).
Les types créés par l’utilisateur doivent bénéficier du même support et des mêmes performances que les types intégrés.
Les fonctionnalités inutilisées ne doivent pas avoir d'impact négatif sur les exécutables créés (par exemple, en réduisant les performances).
Il ne devrait y avoir aucun langage sous C++ (à l'exception du langage assembleur ).
C++ devrait fonctionner aux côtés d’autres langages de programmation existants , plutôt que de favoriser son propre environnement de programmation séparé et incompatible .
Si l’intention du programmeur est inconnue, permettez-lui de la spécifier en fournissant un contrôle manuel.
Standardisation
Articles principaux : C++03 , C++11 , C++14 , C++17 , C++20 , C++23 et C++26
Normes C++
Année	Norme ISO/CEI	Nom informel
1998	14882:1998 [ 42 ]	C++98
2003	14882:2003 [ 43 ]	C++03
2011	14882:2011 [ 44 ]	C++11 , C++0x
2014	14882:2014 [ 45 ]	C++14 , C++1y
2017	14882:2017 [ 46 ]	C++17 , C++1z
2020	14882:2020 [ 47 ]	C++20 , C++2a
2024	14882:2024 [ 17 ]	C++23 , C++2b
À déterminer		C++26 , C++2c
Le C++ est normalisé par un groupe de travail ISO appelé JTC1/SC22/WG21 . À ce jour, sept révisions de la norme C++ ont été publiées et la prochaine révision, C++26 , est actuellement en cours .


Scène lors de la réunion du comité des normes C++ à Stockholm en 1996
En 1998, le groupe de travail ISO a normalisé C++ pour la première fois sous la norme ISO/IEC 14882:1998 , plus connue sous le nom informel de C++98 . En 2003, il a publié une nouvelle version de la norme C++, appelée ISO/IEC 14882:2003 , qui corrigeait les problèmes identifiés dans C++98.

La prochaine révision majeure de la norme a été appelée de manière informelle « C++0x », mais elle n'a été publiée qu'en 2011. [ 48 ] C++11 (14882:2011) comprenait de nombreux ajouts au langage de base et à la bibliothèque standard. [ 44 ]

En 2014, C++14 (également connu sous le nom de C++1y) a été publié comme une petite extension de C++11, comportant principalement des corrections de bogues et de petites améliorations. [ 49 ] Les procédures de vote du projet de norme internationale se sont achevées à la mi-août 2014. [ 50 ]

Après C++14, une révision majeure C++17 , connue officieusement sous le nom de C++1z, a été achevée par le comité ISO C++ à la mi-juillet 2017 et a été approuvée et publiée en décembre 2017. [ 51 ]

Dans le cadre du processus de normalisation, l’ISO publie également des rapports et des spécifications techniques :

ISO/IEC TR 18015:2006 [ 52 ] sur l'utilisation du C++ dans les systèmes embarqués et sur les implications en termes de performances des fonctionnalités du langage et de la bibliothèque C++,
ISO/IEC TR 19768:2007 [ 53 ] (également connu sous le nom de Rapport technique C++ 1 ) sur les extensions de bibliothèque principalement intégrées dans C++11 ,
ISO/IEC TR 29124:2010 [ 54 ] sur les fonctions mathématiques spéciales, intégrées dans C++17 ,
ISO/IEC TR 24733:2011 [ 55 ] sur l'arithmétique décimale à virgule flottante ,
ISO/IEC TS 18822:2015 [ 56 ] sur la bibliothèque de systèmes de fichiers standard, intégrée dans C++17 ,
ISO/IEC TS 19570:2015 [ 57 ] sur les versions parallèles des algorithmes de la bibliothèque standard, intégrés dans C++17 ,
ISO/IEC TS 19841:2015 [ 58 ] sur la mémoire transactionnelle logicielle ,
ISO/IEC TS 19568:2015 [ 59 ] sur un nouvel ensemble d'extensions de bibliothèque, dont certaines sont déjà intégrées dans C++17 ,
ISO/IEC TS 19217:2015 [ 60 ] sur les concepts C++ , intégrés dans C++20 ,
ISO/IEC TS 19571:2016 [ 61 ] sur les extensions de bibliothèque pour la concurrence, dont certaines sont déjà intégrées dans C++20 ,
ISO/IEC TS 19568:2017 [ 62 ] sur un nouvel ensemble d'extensions de bibliothèque à usage général,
ISO/IEC TS 21425:2017 [ 63 ] sur les extensions de bibliothèque pour les plages, intégrées dans C++20 ,
ISO/IEC TS 22277:2017 [ 64 ] sur les coroutines, intégrées dans C++20 ,
ISO/IEC TS 19216:2018 [ 65 ] sur la bibliothèque réseau,
ISO/IEC TS 21544:2018 [ 66 ] sur les modules, intégrés dans C++20 ,
ISO/IEC TS 19570:2018 [ 67 ] sur un nouvel ensemble d'extensions de bibliothèque pour le parallélisme
ISO/IEC TS 23619:2021 [ 68 ] sur les nouvelles extensions pour la programmation réflexive (réflexion),
ISO/IEC TS 9922:2024 [ 69 ] sur un nouvel ensemble d'extensions de concurrence, et
ISO/IEC TS 19568:2024 [ 70 ] sur un autre nouvel ensemble d'extensions de bibliothèque.
D’autres spécifications techniques sont en cours de développement et en attente d’approbation.

Langue
Article principal : Syntaxe C++
Le langage C++ comporte deux composantes principales : un mappage direct des fonctionnalités matérielles fournies principalement par le sous-ensemble C, et des abstractions sans surcharge basées sur ces mappages. Stroustrup décrit le C++ comme « un langage de programmation d'abstraction léger [conçu] pour construire et utiliser des abstractions efficaces et élégantes » ; [ 15 ] et « offrir à la fois accès au matériel et abstraction est la base du C++. Son efficacité le distingue des autres langages. » [ 71 ]

Le C++ hérite de la majeure partie de la syntaxe du C. Un programme « Hello World » conforme à la norme C est également un programme « Hello World » C++ valide. Voici la version de Bjarne Stroustrup du programme « Hello World » , qui utilise la fonctionnalité de flux de la bibliothèque standard C++ pour écrire un message sur la sortie standard : [ 72 ] [ 73 ] [ note 2 ]

#include <iostream>

int main ()
{
    std :: cout << "Bonjour tout le monde ! \n " ;
}
Bibliothèque standard

Le projet de norme « Working Paper » qui a été approuvé sous le nom de C++98 ; la moitié de sa taille était consacrée à la bibliothèque standard C++.
Article principal : Bibliothèque standard C++
La norme C++ se compose de deux parties : le langage principal et la bibliothèque standard. Les programmeurs C++ s'attendent à la présence de cette dernière sur chaque implémentation majeure de C++ ; elle inclut des types d'agrégats ( vecteurs , listes, cartes, ensembles, files d'attente, piles, tableaux, tuples), des algorithmes (find, for_each , binary_search , random_shuffle, etc.), des fonctions d'entrée/sortie ( iostream , pour la lecture et l'écriture sur la console et les fichiers), une bibliothèque de systèmes de fichiers, la prise en charge de la localisation, des pointeurs intelligents pour la gestion automatique de la mémoire, la prise en charge des expressions régulières , une bibliothèque multithreading , la prise en charge des atomes (permettant la lecture ou l'écriture d'une variable par un seul thread à la fois sans synchronisation externe), des utilitaires de temps (mesure, obtention de l'heure actuelle, etc.), un système de conversion des rapports d'erreurs n'utilisant pas d'exceptions C++ en exceptions C++, un générateur de nombres aléatoires et une version légèrement modifiée de la bibliothèque standard C (pour la rendre compatible avec le système de types C++).

Une grande partie de la bibliothèque C++ repose sur la bibliothèque de modèles standard (STL). Parmi les outils utiles fournis par la STL figurent des conteneurs sous forme de collections d'objets (tels que des vecteurs et des listes ), des itérateurs offrant un accès aux conteneurs de type tableau, et des algorithmes effectuant des opérations telles que la recherche et le tri.

De plus, des (multi)maps ( tableaux associatifs ) et des (multi)sets sont fournis, exportant tous des interfaces compatibles. Par conséquent, l'utilisation de modèles permet d'écrire des algorithmes génériques fonctionnant avec n'importe quel conteneur ou sur n'importe quelle séquence définie par des itérateurs.

Comme en C, les fonctionnalités de la bibliothèque sont accessibles via la #include directive « include un en-tête standard » . La bibliothèque standard C++ fournit 105 en-têtes standard, dont 27 sont obsolètes. Avec l'introduction des modules en C++20 , ces en-têtes sont accessibles via import, et en C++23 , l'intégralité de la bibliothèque standard peut désormais être importée directement en tant que module, via . Actuellement, la bibliothèque standard C++ fournit deux modules, et (un module de compatibilité pour lequel exporte les fonctionnalités de la bibliothèque standard C dans l'espace de noms global). import std;stdstd.compatstd

La norme intègre la STL, initialement conçue par Alexander Stepanov , qui a expérimenté des algorithmes et des conteneurs génériques pendant de nombreuses années. En commençant avec le C++, il a finalement trouvé un langage permettant de créer des algorithmes génériques (par exemple, le tri STL) encore plus performants que, par exemple, la bibliothèque standard C qsort, grâce à des fonctionnalités C++ comme l'utilisation de l'inlining et de la liaison à la compilation au lieu de pointeurs de fonction. La norme ne la désigne pas comme « STL », car elle n'en est qu'une partie, mais ce terme reste largement utilisé pour la distinguer du reste de la bibliothèque standard (flux d'entrée/sortie, internationalisation, diagnostics, sous-ensemble de la bibliothèque C, etc.). [ 74 ]

La plupart des compilateurs C++, et tous les principaux, fournissent une implémentation conforme aux normes de la bibliothèque standard C++.

Directives de base C++
Les C++ Core Guidelines [ 75 ] sont une initiative menée par Bjarne Stroustrup, l'inventeur du C++, et Herb Sutter, le coordinateur et président du groupe de travail ISO C++, pour aider les programmeurs à écrire du « C++ moderne » en utilisant les meilleures pratiques pour les normes de langage C++11 et plus récentes, et pour aider les développeurs de compilateurs et d'outils de vérification statique à créer des règles pour détecter les mauvaises pratiques de programmation.

L'objectif principal est d'écrire de manière efficace et cohérente du C++ sûr en termes de type et de ressources.

Les lignes directrices de base ont été annoncées [ 76 ] lors du discours d’ouverture du CPPCon 2015.

Les lignes directrices sont accompagnées de la bibliothèque de support des lignes directrices (GSL), [ 77 ] une bibliothèque d'en-têtes uniquement de types et de fonctions pour implémenter les lignes directrices de base et des outils de vérification statique pour appliquer les règles des lignes directrices. [ 78 ]

Compatibilité
Afin de donner plus de liberté aux fournisseurs de compilateurs, le comité de normalisation C++ a décidé de ne pas imposer l'implémentation de la modification des noms , de la gestion des exceptions et d'autres fonctionnalités spécifiques à l'implémentation. L'inconvénient de cette décision est que le code objet produit par différents compilateurs est susceptible d'être incompatible. Il existe cependant des tentatives de normalisation des compilateurs pour des machines ou des systèmes d'exploitation spécifiques . Par exemple, l'ABI Itanium C++ est indépendante du processeur (malgré son nom) et est implémentée par GCC et Clang. [ 79 ]

Avec C
Article principal : Compatibilité de C et C++
Le C++ est souvent considéré comme un sur-ensemble du C , mais ce n'est pas tout à fait vrai. [ 80 ] La plupart du code C peut facilement être compilé correctement en C++, mais il existe quelques différences qui rendent certains codes C valides invalides ou se comportent différemment en C++. Par exemple, le C autorise la conversion implicite de vers d'autres types de pointeurs, mais pas le C++ (pour des raisons de sécurité des types). De plus, le C++ définit de nombreux nouveaux mots-clés, tels que et , qui peuvent être utilisés comme identifiants (par exemple, des noms de variables) dans un programme C. void*newclass

Français Certaines incompatibilités ont été supprimées par la révision de 1999 de la norme C ( C99 ), qui prend désormais en charge les fonctionnalités C++ telles que les commentaires de ligne ( //) et les déclarations mélangées au code. D'autre part, C99 a introduit un certain nombre de nouvelles fonctionnalités que C++ ne prenait pas en charge et qui étaient incompatibles ou redondantes en C++, telles que les tableaux de longueur variable , les types de nombres complexes natifs (cependant, la classe de la bibliothèque standard C++ fournit des fonctionnalités similaires, bien que non compatibles avec le code), les initialiseurs désignés, les littéraux composés et le mot-clé. [ 81 ] Certaines des fonctionnalités introduites par C99 ont été incluses dans la version ultérieure de la norme C++, C++11 (parmi celles qui n'étaient pas redondantes). [ 82 ] [ 83 ] [ 84 ] Cependant, la norme C++11 introduit de nouvelles incompatibilités, telles que l'interdiction d'assigner un littéral de chaîne à un pointeur de caractère, ce qui reste valide en C. std::complexrestrict

Pour mélanger du code C et du code C++, toute déclaration ou définition de fonction appelée ou utilisée à la fois en C et en C++ doit être déclarée avec une liaison C, en la plaçant dans un bloc. Une telle fonction ne doit pas dépendre de fonctionnalités dépendant de la modification des noms (c'est-à-dire de la surcharge de fonction). extern "C" {/*...*/}

Assemblage en ligne
Les programmes développés en C ou C++ utilisent souvent l'assembleur en ligne pour tirer parti de ses fonctionnalités de bas niveau, de sa vitesse supérieure et de son contrôle amélioré par rapport aux langages de programmation de haut niveau [ 85 ] [ 86 ] lorsque l'optimisation des performances est essentielle. C++ prend en charge l'intégration du langage assembleur à l'aide de déclarations asm [ 87 ] , mais la compatibilité de l'assembleur en ligne varie considérablement entre les compilateurs et les architectures. Contrairement aux fonctionnalités des langages de haut niveau tels que Python ou Java , le code assembleur dépend fortement du processeur sous-jacent et de l'implémentation du compilateur.

Variations entre les compilateurs
Différents compilateurs C++ implémentent l'assemblage en ligne de manières distinctes.

GCC ( GNU Compiler Collection ) et Clang [ 88 ] : Utilisent la syntaxe d'assemblage en ligne étendue de GCC. L'utilisation __asm__du mot-clé plutôt que asmde lors de l'écriture de code pouvant être compilé avec les options et permet de spécifier les opérandes d'entrée/sortie et les registres écrasés. Cette approche est largement adoptée, notamment par les compilateurs Intel [ 89 ] et IBM [ 90 ] .-ansi-std
MSVC ( Microsoft Visual C++ ) : l'assembleur en ligne est intégré au compilateur. Auparavant, l'assembleur en ligne était pris en charge via le __asmmot-clé, mais cette prise en charge a été supprimée en mode 64 bits, nécessitant des modules .asm distincts [ 91 ] .
TI ARM Clang et compilateurs embarqués [ 92 ] : Certains compilateurs de systèmes embarqués, comme TI Arm Clang de Texas Instruments, autorisent l'assemblage en ligne mais imposent des règles plus strictes pour éviter les conflits avec les conventions de registre et les conventions d'appel.
Interopérabilité entre C++ et Assembleur
C++ fournit deux méthodes principales d’intégration du code ASM.

1. Fichiers d'assemblage autonomes – Le code d'assemblage est écrit séparément et lié au code C++. [ 93 ]

2. Assemblage en ligne – Le code assembleur est intégré au code C++ à l’aide d’extensions spécifiques au compilateur.

Exemple de code pour la compatibilité ASM

Lors de l'appel d'une fonction d'assemblage à partir de C++, utilisez pour empêcher la modification du nom C++.extern "C"
//main.cpp
importer std ;

extern "C" int add_asm ( int , int ); // Déclarer la fonction d'assemblage

int main () {
    int résultat = add_asm ( 5 , 7 );
    std :: println ( "Résultat de l'ASM : {}" , result );
    renvoie 0 ;
}
#code asm utilisant l'architecture RISC-V
. section . texte
. global add_asm

add_asm :
    ajouter a0 , a0 , a1 # Ajouter le premier argument ( a0 ) et le deuxième argument ( a1 ), stocker dans a0
    ret # Retour ( a0 contient la valeur de retour )
Les variables globales dans l'assembly doivent être déclarées comme externen C++ et marquées .globaldans l'assembly.
// main.cpp
importer std ;

extern "C" int global_var ; // Déclarer une variable globale à partir de l'assembly

int main () {
    std :: println ( "Variable globale de l'ASM : {}" , global_var );
    renvoie 0 ;
}
#asm utilisant l'architecture RISC-V
. section . données
. global global_var
. aligner 4
global_var :
    . mot 42 # Définir la valeur entière
L'assemblage en ligne permet d'intégrer ASM directement dans C++ à l'aide du asmmot-clé.
//main.cpp (en utilisant le compilateur GCC/CLANG)
importer std ;

int main () {
    int x = 10 , y = 20 , somme ;

    asm volatile (
        "ajouter %0, %1, %2"
        : "=r" ( sum ) // Opérande de sortie (stocké dans un registre)
        : "r" ( x ), "r" ( y ) // Opérandes d'entrée (stockés dans des registres)
    );

    std :: println ( "Somme en utilisant ASM en ligne : {}" , sum );
    renvoie 0 ;
}
Voir aussi
icône	Portail de programmation informatique
Carbone (langage de programmation)
Comparaison des langages de programmation
Liste des compilateurs C++
Aperçu du C++
Catégorie : Bibliothèques C++
Notes de bas de page
 Pour l'idée des coroutines sans pile C++20.
 Ce code est directement copié de la page d'errata de Bjarne Stroustrup (p. 633). Il aborde l'utilisation de'\n'plutôt questd::endl. Voir également « Puis-je écrire « void main() » ? » (archivé le 2 juillet 2020 sur Wayback Machine) pour une explication de l'implicitereturn 0;de lamainfonction. Ce retour implicite n'est pas disponible dans les autres fonctions.
Références
« Présentation des modules en C++ » . Microsoft. 24 avril 2023.
 Stroustrup, Bjarne (1996). « Une histoire du C++ : 1979-1991 ».Histoire des langages de programmation --- II.ACM. pp. 699–769.doi: 10.1145/234286.1057836 .
 Stroustrup, Bjarne (16 décembre 2021). « C++20 : Atteindre les objectifs du C++ - Bjarne Stroustrup - CppCon 2021 » . CppCon. Archivé de l'original le 30 décembre 2021. Consulté le 30 décembre 2021 .
 Stroustrup, Bjarne (12 juin 2020). « Prospérer dans un monde saturé et en constante évolution : C++ 2006–2020 » . Actes de l'ACM sur les langages de programmation . 4 (HOPL). Association for Computing Machinery (ACM) : 1– 168. doi : 10.1145/3386320 . ISSN : 2475-1421 . S2CID : 219603741 .
 Naugler, David (mai 2007). « C# 2.0 pour les programmeurs C++ et Java : atelier de conférence ». Journal of Computing Sciences in Colleges . 22 (5). Bien que C# ait été fortement influencé par Java, il l'a également été par C++ et doit être considéré comme un descendant à la fois de C++ et de Java.
« Spécifications de la chapelle (Remerciements) » (PDF) . Cray Inc., 1er octobre 2015. Archivé (PDF) de l'original le 24 juin 2018. Consulté le 14 janvier 2016 .
 Fogus, Michael. « Rich Hickey Q&R » . Code Quarterly . Archivé de l'original le 11 janvier 2017. Consulté le 11 janvier 2017 .
 Harry. H. Chaudhary (28 juillet 2014). « Décrypter l'entretien de programmation Java : plus de 2 000 questions/réponses d'entretien Java » . Archivé de l'original le 27 mai 2021. Consulté le 29 mai 2016 .
 Roger Poon (1er mai 2017). « Mise à l'échelle de JS++ : abstraction, performances et lisibilité » . Archivé de l'original le 11 mai 2020. Consulté le 21 avril 2020 .
« L'évolution d'un langage d'extension : une histoire de Lua » . www.lua.org . Consulté le 4 janvier 2023 .
« FAQ sur le langage de programmation Nim » . Archivé de l'original le 11 juillet 2017. Consulté le 21 avril 2020 .
« 9. Classes — Documentation Python 3.6.4 » . docs.python.org . Archivé de l'original le 23 octobre 2012 . Consulté le 9 janvier 2018 .
« Influences – La référence Rust » . doc.rust-lang.org . Consulté le 4 janvier 2023 .
Stroustrup, Bjarne (1997). « 1 ». Le langage de programmation C++ (3e éd.). Addison-Wesley. ISBN 0-201-88954-4. OCLC  59193992 .
 Stroustrup, B. (6 mai 2014).« Lecture: The essence of C++. University of Edinburgh ». YouTube .Archivéde l'original le 28 avril 2015. Consulté le 12 juin 2015.
 Stroustrup, Bjarne (17 février 2014). « Applications C++ » . stroustrup.com . Archivé de l'original le 4 avril 2021. Consulté le 5 mai 2014 .
 « ISO/IEC 14882:2024 ». Organisation internationale de normalisation. Consulté le 21 octobre 2020.
« Page d'accueil de Bjarne Stroustrup » . www.stroustrup.com . Archivé de l'original le 14 mai 2019. Consulté le 15 mai 2013 .
« Calendrier IS C++ » (PDF) . Archivé (PDF) de l'original le 10 août 2020. Consulté le 9 août 2020 .
« C++ ; Vers où il va » . Archivé de l'original le 3 décembre 2018. Consulté le 3 décembre 2018 .
« Re : [RFC] Convertir builin-mailinfo.c pour utiliser The Better String Library » (Liste de diffusion). 6 septembre 2007. Archivé de l'original le 8 mars 2021. Consulté le 31 mars 2015 .
« Re : Des efforts pour attirer plus d'utilisateurs ? » (Liste de diffusion). 12 juillet 2010. Archivé de l'original le 21 mars 2015. Consulté le 31 mars 2015 .
 Andrew Binstock (18 mai 2011). « Dr. Dobb's : Entretien avec Ken Thompson » . Dr. Dobb's . Archivé de l'original le 13 mars 2014. Consulté le 7 février 2014 .
 Peter Seibel (16 septembre 2009). Codeurs au travail : Réflexions sur l'art de programmer . Apress. pp.  475–476 . ISBN 978-1-4302-1948-4. Archivé de l'original le 1er décembre 2019 . Récupéré le 9 novembre 2017 .
« C++ dans Coders at Work » . 16 octobre 2009. Archivé de l'original le 10 novembre 2017. Consulté le 9 novembre 2017 .
« Entretien avec Donald Knuth » . Dr. Dobb's . Archivé de l'original le 8 mars 2021. Consulté le 18 juillet 2021 .
« (La)TeX Navigator » . Archivé de l'original le 20 novembre 2017. Consulté le 10 novembre 2017 .
 Claburn, Thomas (2 mars 2025). « Le créateur du C++ appelle à l'aide pour défendre son langage de programmation contre les « attaques graves »" . Le Registre . Récupéré le 5 mars 2025 .
 Stroustrup, Bjarne (7 mars 2010).« FAQ de Bjarne Stroustrup : Quand le C++ a-t-il été inventé ? ».stroustrup.com.Archivéde l'original le 6 février 2016. Consulté le 16 septembre 2010.
 Stroustrup, Bjarne.« Évolution d'un langage dans et pour le monde réel : C++ 1991-2006 »(PDF).Archivé(PDF)de l'original le 20 novembre 2007.Consulté le 14 août 2013.
 Stroustrup, Bjarne.« Histoire du C++ : 1979-1991 »(PDF).Archivé(PDF)de l'original le 2 février 2019.Consulté le 18 juillet 2013.
 Stroustrup, Bjarne. « Le langage de programmation C++ » (première éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Stroustrup, Bjarne. « Le langage de programmation C++ » (deuxième éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Sutter, Herb (30 juin 2016). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Oulu) » . herbsutter.com . Archivé de l'original le 8 octobre 2016. La prochaine norme après C++17 sera C++20.
 Dusíková, Hana (6 novembre 2019). « N4817 : Invitation et informations à la réunion de Prague 2020 » (PDF) . Archivé (PDF) de l'original le 29 décembre 2019. Consulté le 13 février 2020 .
« État actuel » . isocpp.org . Archivé de l'original le 8 septembre 2020. Consulté le 7 septembre 2020 .
« C++20 approuvé – Herb Sutter » . isocpp.org . Archivé de l'original le 11 septembre 2020. Consulté le 8 septembre 2020 .
« Le pionnier de l'informatique Bjarne Stroustrup recevra le prix Charles Stark Draper d'ingénierie 2018 » (communiqué de presse). Académie nationale d'ingénierie. 3 janvier 2018. Archivé de l'original le 3 janvier 2018. Consulté le 14 décembre 2021 .
 TIOBE (novembre 2024). « Indice TIOBE de novembre 2024 » . TIOBE.com . Société TIOBE. Archivé de l'original le 18 novembre 2024. Consulté le 18 novembre 2024 .
« FAQ de Bjarne Stroustrup – D'où vient le nom « C++ » ? » . Archivé de l'original le 6 février 2016. Consulté le 16 janvier 2008 .
« C pour les programmeurs C++ » . Université Northeastern . Archivé de l'original le 17 novembre 2010. Consulté le 7 septembre 2015 .
« ISO/CEI 14882:1998 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2017. Consulté le 23 novembre 2018 .
« ISO/CEI 14882:2003 » . Organisation internationale de normalisation. Archivé de l'original le 13 août 2021. Consulté le 23 novembre 2018 .
 « ISO/IEC 14882:2011 ». Organisation internationale de normalisation.Archivéde l'original le 27 mai 2016.Consulté le 23 novembre 2018.
« ISO/IEC 14882:2014 » . Organisation internationale de normalisation. Archivé de l'original le 29 avril 2016. Consulté le 23 novembre 2018 .
« ISO/IEC 14882:2017 » . Organisation internationale de normalisation. Archivé de l'original le 29 janvier 2013. Consulté le 2 décembre 2017 .
« ISO/IEC 14882:2020 » . Organisation internationale de normalisation. Archivé de l'original le 16 décembre 2020. Consulté le 16 décembre 2020 .
« Nous disposons d'une norme internationale : C++0x est approuvé à l'unanimité . » Sutter's Mill . 12 août 2011. Archivé de l'original le 28 juin 2018. Consulté le 23 novembre 2018 .
« L'avenir du C++ » . Archivé de l'original le 23 octobre 2018. Consulté le 23 novembre 2018 via channel9.msdn.com.
« Nous avons C++14 ! : C++ standard » . isocpp.org . Archivé de l'original le 19 août 2014 . Consulté le 19 août 2014 .
 Sutter, Herb (15 juillet 2017). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Toronto) » . Archivé de l'original le 6 août 2017. Consulté le 4 août 2017 .
« ISO/IEC TR 18015:2006 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 19768:2007 » . Organisation internationale de normalisation. Archivé de l'original le 4 mars 2016. Consulté le 15 février 2019 .
« ISO/IEC TR 29124:2010 » . Organisation internationale de normalisation. Archivé de l'original le 12 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 24733:2011 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 18822:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19841:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19217:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19571:2016 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21425:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 22277:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19216:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21544:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 23619:2021 » . Organisation internationale de normalisation. Archivé de l'original le 15 décembre 2018. Consulté le 11 octobre 2021 .
« ISO/IEC TS 9922:2024 » . Organisation internationale de normalisation. Archivé de l'original le 1er avril 2025. Consulté le 1er avril 2025 .
« ISO/IEC TS 19568:2024 » . Organisation internationale de normalisation. Archivé de l'original le 25 février 2025. Consulté le 1er avril 2025 .
 B. Stroustrup (interviewé par Sergio De Simone) (30 avril 2015). « Stroustrup : Réflexions sur C++17 - Une interview » . Archivé de l'original le 8 juillet 2015. Consulté le 8 juillet 2015 .
 Stroustrup, Bjarne (2000). Le langage de programmation C++ (éd. spéciale). Addison-Wesley. p. 46. ISBN 0-201-70073-5.
 Stroustrup, Bjarne. « Problèmes en suspens concernant le langage de programmation C++ (3e édition) » . Archivé de l'original le 5 mai 2014. Consulté le 5 mai 2014 .
 Graziano Lo Russo (2008). « Entretien avec A. Stepanov » . stlport.org . Archivé de l'original le 4 mars 2009. Consulté le 8 octobre 2015 .
« Directives C++ Core » . isocpp.github.io . Archivé de l'original le 16 février 2020 . Consulté le 9 février 2020 .
« Bjarne Stroustrup annonce les directives de base du C++ : C++ standard » . isocpp.org . Archivé de l'original le 11 mai 2020. Consulté le 31 mars 2020 .
« microsoft/GSL » . 18 juillet 2021. Archivé de l'original le 18 juillet 2021. Consulté le 18 juillet 2021 via GitHub.
« Utilisation des vérificateurs des directives de base C++ » . Microsoft Learn . Archivé de l'original le 13 août 2021. Consulté le 31 mars 2020 .
« Résumé de l'ABI C++ » . 20 mars 2001. Archivé de l'original le 10 juillet 2018. Consulté le 30 mai 2006 .
« FAQ de Bjarne Stroustrup – Le C est-il un sous-ensemble du C++ ? » . Archivé de l'original le 6 février 2016. Consulté le 5 mai 2014 .
« C9X – La nouvelle norme C » . Archivé de l'original le 21 juin 2018. Consulté le 27 décembre 2008 .
« Prise en charge de C++0x dans GCC » . Archivé de l'original le 21 juillet 2010. Consulté le 12 octobre 2010 .
« Fonctionnalités principales du langage C++0x dans VC10 : le tableau » . Archivé de l'original le 21 août 2010. Consulté le 12 octobre 2010 .
« Clang - État des versions C++98, C++11 et C++14 » . Clang.llvm.org. 12 mai 2013. Archivé de l'original le 4 juillet 2013. Consulté le 10 juin 2013 .
 Bokil, Milind A. (2021). « Écriture de routines d'assemblage dans les programmes C/C++ et Java ». ResearchGate. Consulté le 1er avril 2025.
 Vilhena, Paulo Emílio de ; Lahav, Ori ; Vafeiadis, Viktor ; Raad, Azalea (2024). « Extension du modèle de mémoire C/C++ avec l'assemblage en ligne ». Actes de l'ACM sur les langages de programmation, vol. 8, OOPSLA2, article 309. doi:10.1145/3689749.
 Contributeurs de cppreference.com. « Déclaration ASM ». cppreference.com . Consulté le 1er avril 2025.
« Asm étendu (utilisation de la collection de compilateurs GNU) » . Documentation en ligne de GCC . Projet GNU . Consulté le 1er avril 2025 .
 Intel Corporation. « Assemblage en ligne ». Guide du développeur et référence du compilateur Intel® C++ Classic , version 2021.9. Consulté le 1er avril 2025.
 IBM. « Instructions d'assemblage en ligne (extension IBM) ». Documentation IBM . Consulté le 1er avril 2025.
« Présentation de l'assembleur en ligne » . Microsoft Learn . Microsoft . Consulté le 1er avril 2025 .
« Interfaçage de C et C++ avec le langage assembleur » . Texas Instruments . Texas Instruments Incorporated. 23 février 2025. Consulté le 1er avril 2025 .
« Liaison C++ vers ASM dans GCC » . Wiki OSDev . Consulté le 1er avril 2025 .
Lectures complémentaires
Abrahams, David ; Gurtovoy, Aleksey (2005). Métaprogrammation de modèles C++ : concepts, outils et techniques issus de Boost et au-delà . Addison-Wesley. ISBN 0-321-22725-5.
Alexandrescu, Andrei (2001). Conception C++ moderne : Programmation générique et modèles de conception appliqués . Addison-Wesley. ISBN. 0-201-70431-5.
Alexandrescu, Andrei ; Sutter, Herb (2004). Normes de conception et de codage C++ : règles et directives pour l'écriture de programmes . Addison-Wesley. ISBN 0-321-11358-6.
Becker, Pete (2006). Les extensions de la bibliothèque standard C++ : tutoriel et référence . Addison-Wesley. ISBN. 0-321-41299-0.
Cassé, Frank (2010). Annotations C++ . Université de Groningue. ISBN 978-90-367-0470-0. Archivé de l'original le 28 avril 2010 . Récupéré le 28 avril 2010 .
Coplien, James O. (1994) [réédité avec corrections, année de publication originale : 1992]. C++ avancé : Styles et expressions idiomatiques de programmation . Addison-Wesley. ISBN 0-201-54855-0.
Dewhurst, Stephen C. (2005). C++ Common Knowledge : Programmation intermédiaire essentielle . Addison-Wesley. ISBN. 0-321-32192-8.
Conseil de l'industrie des technologies de l'information (15 octobre 2003). Langages de programmation – C++ (deuxième éd.). Genève : ISO/IEC. 14882:2003(E).
Josuttis, Nicolai M. (2012). La bibliothèque standard C++ : tutoriel et référence (deuxième éd.). Addison-Wesley. ISBN. 978-0-321-62321-8.
Koenig, Andrew ; Moo, Barbara E. (2000). C++ accéléré – Programmation pratique par l'exemple . Addison-Wesley. ISBN 0-201-70353-X.
Lippman, Stanley B. ; Lajoie, Josée; Moo, Barbara E. (2011). Introduction à C++ (Cinquième éd.). Addison-Wesley. ISBN 978-0-321-71411-4.
Lippman, Stanley B. (1996). Au cœur du modèle objet C++ . Addison-Wesley. ISBN. 0-201-83454-5.
Meyers, Scott (2005). Effective C++ (3e éd.). Addison-Wesley. ISBN. 0-321-33487-6.
Stroustrup, Bjarne (2013). Le langage de programmation C++ (quatrième éd.). Addison-Wesley. ISBN. 978-0-321-56384-2.
Stroustrup, Bjarne (1994). Conception et évolution de C++ . Addison-Wesley. ISBN. 0-201-54330-3.
Stroustrup, Bjarne (2014). Programmation : Principes et pratique en C++ (2e éd.). Addison-Wesley. ISBN. 978-0-321-99278-9.
Sutter, Herb (2001). C++ encore plus exceptionnel : 40 nouveaux casse-têtes d'ingénierie, problèmes de programmation et solutions . Addison-Wesley. ISBN 0-201-70434-X.
Sutter, Herb (2004). Style C++ exceptionnel . Addison-Wesley. ISBN. 0-201-76042-8.
Vandevoorde, David; Josuttis, Nicolai M. (2003). Modèles C++ : le guide complet . Addison-Wesley. ISBN 0-201-73484-2.
Liens externes
JTC1/SC22/WG21 – Groupe de travail sur la norme ISO/IEC C++
Standard C++ Foundation – une organisation à but non lucratif qui promeut l'utilisation et la compréhension du C++ standard. Bjarne Stroustrup est l'un des directeurs de l'organisation.
Mots-clés C++
Expressions C++
Priorité des opérateurs C++
C++ dans les projets frères de Wikipédia :

Médias de Commons

Citations de Wikiquote

Manuels scolaires de Wikibooks

Ressources de Wikiversité
vtet
C++
vtet
Langages de programmation
ComparaisonChronologieHistoire
AdaALGOL SimulaAPLAssembléeBASIQUE Visual Basic classique.FILETCC++C#COBOLErlang ÉlixirEn avantFortranAllerHaskellJavaJavaScript ManuscritJuliaKotlinZézayerLuaMATLABML Caml OCamlPascal Pascal ObjetPerl RakuPHPProloguePythonRRubisRouillerSQLGratterCoquillePetite conversationRapideplus...
 Listes : alphabétiqueCatégoriqueGénérationnelNon basé sur l'anglais Catégorie
vtet
Normes de l'Organisation internationale de normalisation (ISO)
vtet
normes CEI
Bases de données de contrôle d'autorité Modifiez ceci sur Wikidata
Catégories :C++Famille de langages de programmation AlgolFamille de langages de programmation C++Langages de programmation basés sur les classesLogiciel multiplateformeLangages de programmation de haut niveauLangages de programmation orientés objetLangages de programmation créés en 1983Langages de programmation avec une norme ISOLangages de programmation à typage statiqueLangages de programmation compilés
===================(02)======================
### [C++]
C++ ( / ˈsiːplʌsplʌs / , prononcé « C plus plus » et parfois abrégé en CPP ) est un langage de programmation de haut niveau à usage général créé par l' informaticien danois Bjarne Stroustrup . Initialement publié en 1985 comme une extension du langage de programmation C , il s'est depuis considérablement développé au fil du temps ; en 1997 , C++ possède des fonctionnalités orientées objet , génériques et fonctionnelles , en plus de fonctionnalités de manipulation de mémoire de bas niveau pour des systèmes comme les micro-ordinateurs ou pour créer des systèmes d'exploitation comme Linux ou Windows . Il est généralement implémenté comme un langage compilé , et de nombreux fournisseurs fournissent des compilateurs C++ , notamment la Free Software Foundation , LLVM , Microsoft , Intel , Embarcadero , Oracle et IBM . [ 14 ]

C++ a été conçu pour la programmation de systèmes et de logiciels embarqués , à ressources limitées et de grands systèmes, avec la performance , l'efficacité et la flexibilité d'utilisation comme points forts de sa conception. [ 15 ] C++ s'est également avéré utile dans de nombreux autres contextes, ses principaux atouts étant l'infrastructure logicielle et les applications à ressources limitées, [ 15 ] y compris les applications de bureau , les jeux vidéo , les serveurs (par exemple, le commerce électronique , la recherche sur le Web ou les bases de données ) et les applications critiques en termes de performances (par exemple, les commutateurs téléphoniques ou les sondes spatiales ). [ 16 ]

Français C++ est normalisé par l' Organisation internationale de normalisation (ISO), la dernière version de la norme ayant été ratifiée et publiée par l'ISO en octobre 2024 sous le nom d' ISO/IEC 14882:2024 (connue officieusement sous le nom de C++23 ). [ 17 ] Le langage de programmation C++ a été initialement normalisé en 1998 sous le nom d'ISO/IEC 14882:1998 , qui a ensuite été modifié par les normes C++03 , C++11 , C ++14 , C++17 et C++20 . La norme C++23 actuelle les remplace par de nouvelles fonctionnalités et une bibliothèque standard élargie . Avant la normalisation initiale en 1998, C++ a été développé par Stroustrup aux Bell Labs depuis 1979 comme une extension du langage C ; il voulait un langage efficace et flexible similaire à C qui fournisse également des fonctionnalités de haut niveau pour l'organisation des programmes. [ 18 ] Depuis 2012, C++ suit un calendrier de publication de trois ans [ 19 ] avec C++26 comme prochaine norme prévue. [ 20 ]

Malgré son adoption généralisée, certains programmeurs notables ont critiqué le langage C++ , notamment Linus Torvalds , [ 21 ] Richard Stallman , [ 22 ] Joshua Bloch , Ken Thompson , [ 23 ] [ 24 ] [ 25 ] et Donald Knuth . [ 26 ] [ 27 ] Cela est dû en grande partie à sa gestion manuelle de la mémoire, qui le rend vulnérable aux bogues de dépassement de tampon , qui représentent un risque de sécurité. [ 28 ]

Histoire

Bjarne Stroustrup, le créateur de C++, dans son bureau d'AT&T dans le New Jersey, vers  2000
En 1979, Bjarne Stroustrup , un informaticien danois , a commencé à travailler sur «C avec classes , prédécesseur de C++. [ 29 ] La création d'un nouveau langage est née de l'expérience de Stroustrup en programmation pour sa thèse de doctorat. Stroustrup a constaté que Simula possédait des fonctionnalités très utiles pour le développement de logiciels de grande envergure, mais que le langage était trop lent pour une utilisation pratique, tandis que BCPL était rapide mais trop bas niveau pour convenir au développement de logiciels de grande envergure. Lorsque Stroustrup a commencé à travailler chez AT&T Bell Labs , il a dû analyser le noyau UNIX en termes de calcul distribué . Se souvenant de son doctorat, Stroustrup a entrepris d'améliorer le langage C avec des fonctionnalités similaires à Simula. [ 30 ] Le C a été choisi pour sa polyvalence, sa rapidité, sa portabilité et sa large diffusion. Outre l'influence de C et de Simula, d'autres langages ont influencé ce nouveau langage, notamment ALGOL 68 , Ada , CLU et ML . [ citation requise ]

Initialement, le « C avec classes » de Stroustrup ajoutait des fonctionnalités au compilateur C, Cpre, notamment les classes , les classes dérivées , le typage fort , l'inlining et les arguments par défaut . [ 31 ]


Un quiz sur les fonctionnalités de C++11 donné à Paris en 2015
En 1982, Stroustrup commença à développer un successeur au C avec des classes, qu'il baptisa « C++ » ( ++opérateur d'incrémentation en C) après avoir essayé plusieurs autres noms. De nouvelles fonctionnalités furent ajoutées, notamment les fonctions virtuelles , la surcharge des noms de fonctions et des opérateurs , les références , les constantes, l'allocation de mémoire libre sécurisée (nouveau/suppression), une vérification de type améliorée et des commentaires sur une seule ligne de style BCPL avec deux barres obliques ( //). De plus, Stroustrup développa un nouveau compilateur autonome pour C++, Cfront .

En 1984, Stroustrup a implémenté la première bibliothèque d'entrée/sortie de flux. L'idée de fournir un opérateur de sortie plutôt qu'une fonction de sortie nommée a été suggérée par Doug McIlroy [ 2 ] (qui avait précédemment suggéré les tubes Unix ).

En 1985, la première édition du langage de programmation C++ a été publiée, qui est devenue la référence définitive pour le langage, car il n'y avait pas encore de norme officielle. [ 32 ] La première implémentation commerciale de C++ a été publiée en octobre de la même année. [ 29 ]

En 1989, C++ 2.0 a été publié, suivi par la deuxième édition mise à jour du langage de programmation C++ en 1991. [ 33 ] Les nouvelles fonctionnalités de la version 2.0 comprenaient l'héritage multiple, les classes abstraites, les fonctions membres statiques, les fonctions membres const et les membres protégés. En 1990, le Manuel de référence C++ annoté a été publié. Ce travail est devenu la base de la future norme. Les ajouts de fonctionnalités ultérieurs comprenaient les modèles , les exceptions , les espaces de noms , les nouveaux casts et un type booléen .

En 1998, C++98 a été publié, standardisant le langage, et une mise à jour mineure ( C++03 ) a été publiée en 2003.

Après C++98, le C++ a évolué relativement lentement jusqu'à la publication, en 2011, de la norme C++11 , qui ajoutait de nombreuses nouvelles fonctionnalités, élargissait la bibliothèque standard et offrait davantage de fonctionnalités aux programmeurs C++. Après une mise à jour mineure de C++14 publiée en décembre 2014, divers ajouts ont été introduits dans C++17 . [ 34 ] Après sa finalisation en février 2020, [ 35 ] un projet de norme C++20 a été approuvé le 4 septembre 2020 et officiellement publié le 15 décembre 2020. [ 36 ] [ 37 ]

Le 3 janvier 2018, Stroustrup a été annoncé comme le lauréat 2018 du prix Charles Stark Draper d'ingénierie, « pour la conceptualisation et le développement du langage de programmation C++ ». [ 38 ]

En décembre 2022, C++ se classait troisième au classement TIOBE , surpassant Java pour la première fois dans l'histoire de l'indice. En novembre 2024 , le langage se classait deuxième après Python , Java étant troisième. [ 39 ]

Étymologie
Selon Stroustrup, « le nom signifie la nature évolutive des changements par rapport à C. » [ 40 ] Ce nom est attribué à Rick Mascitti (mi-1983) [ 31 ] et a été utilisé pour la première fois en décembre 1983. Lorsque Mascitti a été interrogé de manière informelle en 1992 sur le nom, il a indiqué qu'il avait été donné dans un esprit ironique . Le nom vient de ++ l'opérateur de C (qui incrémente la valeur d'une variable ) et d'une convention de nommage courante consistant à utiliser « + » pour indiquer un programme informatique amélioré.

Au cours de la période de développement du C++, le langage a été appelé « nouveau C » et « C avec classes » [ 31 ] [ 41 ] avant d'acquérir son nom définitif.

Philosophie
Tout au long de la vie de C++, son développement et son évolution ont été guidés par un ensemble de principes : [ 30 ]

Il doit être motivé par des problèmes réels et ses fonctionnalités doivent être immédiatement utiles dans les programmes du monde réel.
Chaque fonctionnalité doit être implémentable (avec une manière raisonnablement évidente de le faire).
Les programmeurs devraient être libres de choisir leur propre style de programmation, et ce style devrait être entièrement pris en charge par C++.
Autoriser une fonctionnalité utile est plus important que d’empêcher toute mauvaise utilisation possible de C++.
Il devrait fournir des moyens d’organiser les programmes en parties distinctes et bien définies, ainsi que des moyens de combiner des parties développées séparément.
Aucune violation implicite du système de types (mais autorise les violations explicites, c'est-à-dire celles explicitement demandées par le programmeur).
Les types créés par l’utilisateur doivent bénéficier du même support et des mêmes performances que les types intégrés.
Les fonctionnalités inutilisées ne doivent pas avoir d'impact négatif sur les exécutables créés (par exemple, en réduisant les performances).
Il ne devrait y avoir aucun langage sous C++ (à l'exception du langage assembleur ).
C++ devrait fonctionner aux côtés d’autres langages de programmation existants , plutôt que de favoriser son propre environnement de programmation séparé et incompatible .
Si l’intention du programmeur est inconnue, permettez-lui de la spécifier en fournissant un contrôle manuel.
Standardisation
Articles principaux : C++03 , C++11 , C++14 , C++17 , C++20 , C++23 et C++26
Normes C++
Année	Norme ISO/CEI	Nom informel
1998	14882:1998 [ 42 ]	C++98
2003	14882:2003 [ 43 ]	C++03
2011	14882:2011 [ 44 ]	C++11 , C++0x
2014	14882:2014 [ 45 ]	C++14 , C++1y
2017	14882:2017 [ 46 ]	C++17 , C++1z
2020	14882:2020 [ 47 ]	C++20 , C++2a
2024	14882:2024 [ 17 ]	C++23 , C++2b
À déterminer		C++26 , C++2c
Le C++ est normalisé par un groupe de travail ISO appelé JTC1/SC22/WG21 . À ce jour, sept révisions de la norme C++ ont été publiées et la prochaine révision, C++26 , est actuellement en cours .


Scène lors de la réunion du comité des normes C++ à Stockholm en 1996
En 1998, le groupe de travail ISO a normalisé C++ pour la première fois sous la norme ISO/IEC 14882:1998 , plus connue sous le nom informel de C++98 . En 2003, il a publié une nouvelle version de la norme C++, appelée ISO/IEC 14882:2003 , qui corrigeait les problèmes identifiés dans C++98.

La prochaine révision majeure de la norme a été appelée de manière informelle « C++0x », mais elle n'a été publiée qu'en 2011. [ 48 ] C++11 (14882:2011) comprenait de nombreux ajouts au langage de base et à la bibliothèque standard. [ 44 ]

En 2014, C++14 (également connu sous le nom de C++1y) a été publié comme une petite extension de C++11, comportant principalement des corrections de bogues et de petites améliorations. [ 49 ] Les procédures de vote du projet de norme internationale se sont achevées à la mi-août 2014. [ 50 ]

Après C++14, une révision majeure C++17 , connue officieusement sous le nom de C++1z, a été achevée par le comité ISO C++ à la mi-juillet 2017 et a été approuvée et publiée en décembre 2017. [ 51 ]

Dans le cadre du processus de normalisation, l’ISO publie également des rapports et des spécifications techniques :

ISO/IEC TR 18015:2006 [ 52 ] sur l'utilisation du C++ dans les systèmes embarqués et sur les implications en termes de performances des fonctionnalités du langage et de la bibliothèque C++,
ISO/IEC TR 19768:2007 [ 53 ] (également connu sous le nom de Rapport technique C++ 1 ) sur les extensions de bibliothèque principalement intégrées dans C++11 ,
ISO/IEC TR 29124:2010 [ 54 ] sur les fonctions mathématiques spéciales, intégrées dans C++17 ,
ISO/IEC TR 24733:2011 [ 55 ] sur l'arithmétique décimale à virgule flottante ,
ISO/IEC TS 18822:2015 [ 56 ] sur la bibliothèque de systèmes de fichiers standard, intégrée dans C++17 ,
ISO/IEC TS 19570:2015 [ 57 ] sur les versions parallèles des algorithmes de la bibliothèque standard, intégrés dans C++17 ,
ISO/IEC TS 19841:2015 [ 58 ] sur la mémoire transactionnelle logicielle ,
ISO/IEC TS 19568:2015 [ 59 ] sur un nouvel ensemble d'extensions de bibliothèque, dont certaines sont déjà intégrées dans C++17 ,
ISO/IEC TS 19217:2015 [ 60 ] sur les concepts C++ , intégrés dans C++20 ,
ISO/IEC TS 19571:2016 [ 61 ] sur les extensions de bibliothèque pour la concurrence, dont certaines sont déjà intégrées dans C++20 ,
ISO/IEC TS 19568:2017 [ 62 ] sur un nouvel ensemble d'extensions de bibliothèque à usage général,
ISO/IEC TS 21425:2017 [ 63 ] sur les extensions de bibliothèque pour les plages, intégrées dans C++20 ,
ISO/IEC TS 22277:2017 [ 64 ] sur les coroutines, intégrées dans C++20 ,
ISO/IEC TS 19216:2018 [ 65 ] sur la bibliothèque réseau,
ISO/IEC TS 21544:2018 [ 66 ] sur les modules, intégrés dans C++20 ,
ISO/IEC TS 19570:2018 [ 67 ] sur un nouvel ensemble d'extensions de bibliothèque pour le parallélisme
ISO/IEC TS 23619:2021 [ 68 ] sur les nouvelles extensions pour la programmation réflexive (réflexion),
ISO/IEC TS 9922:2024 [ 69 ] sur un nouvel ensemble d'extensions de concurrence, et
ISO/IEC TS 19568:2024 [ 70 ] sur un autre nouvel ensemble d'extensions de bibliothèque.
D’autres spécifications techniques sont en cours de développement et en attente d’approbation.

Langue
Article principal : Syntaxe C++
Le langage C++ comporte deux composantes principales : un mappage direct des fonctionnalités matérielles fournies principalement par le sous-ensemble C, et des abstractions sans surcharge basées sur ces mappages. Stroustrup décrit le C++ comme « un langage de programmation d'abstraction léger [conçu] pour construire et utiliser des abstractions efficaces et élégantes » ; [ 15 ] et « offrir à la fois accès au matériel et abstraction est la base du C++. Son efficacité le distingue des autres langages. » [ 71 ]

Le C++ hérite de la majeure partie de la syntaxe du C. Un programme « Hello World » conforme à la norme C est également un programme « Hello World » C++ valide. Voici la version de Bjarne Stroustrup du programme « Hello World » , qui utilise la fonctionnalité de flux de la bibliothèque standard C++ pour écrire un message sur la sortie standard : [ 72 ] [ 73 ] [ note 2 ]

#include <iostream>

int main ()
{
    std :: cout << "Bonjour tout le monde ! \n " ;
}
Bibliothèque standard

Le projet de norme « Working Paper » qui a été approuvé sous le nom de C++98 ; la moitié de sa taille était consacrée à la bibliothèque standard C++.
Article principal : Bibliothèque standard C++
La norme C++ se compose de deux parties : le langage principal et la bibliothèque standard. Les programmeurs C++ s'attendent à la présence de cette dernière sur chaque implémentation majeure de C++ ; elle inclut des types d'agrégats ( vecteurs , listes, cartes, ensembles, files d'attente, piles, tableaux, tuples), des algorithmes (find, for_each , binary_search , random_shuffle, etc.), des fonctions d'entrée/sortie ( iostream , pour la lecture et l'écriture sur la console et les fichiers), une bibliothèque de systèmes de fichiers, la prise en charge de la localisation, des pointeurs intelligents pour la gestion automatique de la mémoire, la prise en charge des expressions régulières , une bibliothèque multithreading , la prise en charge des atomes (permettant la lecture ou l'écriture d'une variable par un seul thread à la fois sans synchronisation externe), des utilitaires de temps (mesure, obtention de l'heure actuelle, etc.), un système de conversion des rapports d'erreurs n'utilisant pas d'exceptions C++ en exceptions C++, un générateur de nombres aléatoires et une version légèrement modifiée de la bibliothèque standard C (pour la rendre compatible avec le système de types C++).

Une grande partie de la bibliothèque C++ repose sur la bibliothèque de modèles standard (STL). Parmi les outils utiles fournis par la STL figurent des conteneurs sous forme de collections d'objets (tels que des vecteurs et des listes ), des itérateurs offrant un accès aux conteneurs de type tableau, et des algorithmes effectuant des opérations telles que la recherche et le tri.

De plus, des (multi)maps ( tableaux associatifs ) et des (multi)sets sont fournis, exportant tous des interfaces compatibles. Par conséquent, l'utilisation de modèles permet d'écrire des algorithmes génériques fonctionnant avec n'importe quel conteneur ou sur n'importe quelle séquence définie par des itérateurs.

Comme en C, les fonctionnalités de la bibliothèque sont accessibles via la #include directive « include un en-tête standard » . La bibliothèque standard C++ fournit 105 en-têtes standard, dont 27 sont obsolètes. Avec l'introduction des modules en C++20 , ces en-têtes sont accessibles via import, et en C++23 , l'intégralité de la bibliothèque standard peut désormais être importée directement en tant que module, via . Actuellement, la bibliothèque standard C++ fournit deux modules, et (un module de compatibilité pour lequel exporte les fonctionnalités de la bibliothèque standard C dans l'espace de noms global). import std;stdstd.compatstd

La norme intègre la STL, initialement conçue par Alexander Stepanov , qui a expérimenté des algorithmes et des conteneurs génériques pendant de nombreuses années. En commençant avec le C++, il a finalement trouvé un langage permettant de créer des algorithmes génériques (par exemple, le tri STL) encore plus performants que, par exemple, la bibliothèque standard C qsort, grâce à des fonctionnalités C++ comme l'utilisation de l'inlining et de la liaison à la compilation au lieu de pointeurs de fonction. La norme ne la désigne pas comme « STL », car elle n'en est qu'une partie, mais ce terme reste largement utilisé pour la distinguer du reste de la bibliothèque standard (flux d'entrée/sortie, internationalisation, diagnostics, sous-ensemble de la bibliothèque C, etc.). [ 74 ]

La plupart des compilateurs C++, et tous les principaux, fournissent une implémentation conforme aux normes de la bibliothèque standard C++.

Directives de base C++
Les C++ Core Guidelines [ 75 ] sont une initiative menée par Bjarne Stroustrup, l'inventeur du C++, et Herb Sutter, le coordinateur et président du groupe de travail ISO C++, pour aider les programmeurs à écrire du « C++ moderne » en utilisant les meilleures pratiques pour les normes de langage C++11 et plus récentes, et pour aider les développeurs de compilateurs et d'outils de vérification statique à créer des règles pour détecter les mauvaises pratiques de programmation.

L'objectif principal est d'écrire de manière efficace et cohérente du C++ sûr en termes de type et de ressources.

Les lignes directrices de base ont été annoncées [ 76 ] lors du discours d’ouverture du CPPCon 2015.

Les lignes directrices sont accompagnées de la bibliothèque de support des lignes directrices (GSL), [ 77 ] une bibliothèque d'en-têtes uniquement de types et de fonctions pour implémenter les lignes directrices de base et des outils de vérification statique pour appliquer les règles des lignes directrices. [ 78 ]

Compatibilité
Afin de donner plus de liberté aux fournisseurs de compilateurs, le comité de normalisation C++ a décidé de ne pas imposer l'implémentation de la modification des noms , de la gestion des exceptions et d'autres fonctionnalités spécifiques à l'implémentation. L'inconvénient de cette décision est que le code objet produit par différents compilateurs est susceptible d'être incompatible. Il existe cependant des tentatives de normalisation des compilateurs pour des machines ou des systèmes d'exploitation spécifiques . Par exemple, l'ABI Itanium C++ est indépendante du processeur (malgré son nom) et est implémentée par GCC et Clang. [ 79 ]

Avec C
Article principal : Compatibilité de C et C++
Le C++ est souvent considéré comme un sur-ensemble du C , mais ce n'est pas tout à fait vrai. [ 80 ] La plupart du code C peut facilement être compilé correctement en C++, mais il existe quelques différences qui rendent certains codes C valides invalides ou se comportent différemment en C++. Par exemple, le C autorise la conversion implicite de vers d'autres types de pointeurs, mais pas le C++ (pour des raisons de sécurité des types). De plus, le C++ définit de nombreux nouveaux mots-clés, tels que et , qui peuvent être utilisés comme identifiants (par exemple, des noms de variables) dans un programme C. void*newclass

Français Certaines incompatibilités ont été supprimées par la révision de 1999 de la norme C ( C99 ), qui prend désormais en charge les fonctionnalités C++ telles que les commentaires de ligne ( //) et les déclarations mélangées au code. D'autre part, C99 a introduit un certain nombre de nouvelles fonctionnalités que C++ ne prenait pas en charge et qui étaient incompatibles ou redondantes en C++, telles que les tableaux de longueur variable , les types de nombres complexes natifs (cependant, la classe de la bibliothèque standard C++ fournit des fonctionnalités similaires, bien que non compatibles avec le code), les initialiseurs désignés, les littéraux composés et le mot-clé. [ 81 ] Certaines des fonctionnalités introduites par C99 ont été incluses dans la version ultérieure de la norme C++, C++11 (parmi celles qui n'étaient pas redondantes). [ 82 ] [ 83 ] [ 84 ] Cependant, la norme C++11 introduit de nouvelles incompatibilités, telles que l'interdiction d'assigner un littéral de chaîne à un pointeur de caractère, ce qui reste valide en C. std::complexrestrict

Pour mélanger du code C et du code C++, toute déclaration ou définition de fonction appelée ou utilisée à la fois en C et en C++ doit être déclarée avec une liaison C, en la plaçant dans un bloc. Une telle fonction ne doit pas dépendre de fonctionnalités dépendant de la modification des noms (c'est-à-dire de la surcharge de fonction). extern "C" {/*...*/}

Assemblage en ligne
Les programmes développés en C ou C++ utilisent souvent l'assembleur en ligne pour tirer parti de ses fonctionnalités de bas niveau, de sa vitesse supérieure et de son contrôle amélioré par rapport aux langages de programmation de haut niveau [ 85 ] [ 86 ] lorsque l'optimisation des performances est essentielle. C++ prend en charge l'intégration du langage assembleur à l'aide de déclarations asm [ 87 ] , mais la compatibilité de l'assembleur en ligne varie considérablement entre les compilateurs et les architectures. Contrairement aux fonctionnalités des langages de haut niveau tels que Python ou Java , le code assembleur dépend fortement du processeur sous-jacent et de l'implémentation du compilateur.

Variations entre les compilateurs
Différents compilateurs C++ implémentent l'assemblage en ligne de manières distinctes.

GCC ( GNU Compiler Collection ) et Clang [ 88 ] : Utilisent la syntaxe d'assemblage en ligne étendue de GCC. L'utilisation __asm__du mot-clé plutôt que asmde lors de l'écriture de code pouvant être compilé avec les options et permet de spécifier les opérandes d'entrée/sortie et les registres écrasés. Cette approche est largement adoptée, notamment par les compilateurs Intel [ 89 ] et IBM [ 90 ] .-ansi-std
MSVC ( Microsoft Visual C++ ) : l'assembleur en ligne est intégré au compilateur. Auparavant, l'assembleur en ligne était pris en charge via le __asmmot-clé, mais cette prise en charge a été supprimée en mode 64 bits, nécessitant des modules .asm distincts [ 91 ] .
TI ARM Clang et compilateurs embarqués [ 92 ] : Certains compilateurs de systèmes embarqués, comme TI Arm Clang de Texas Instruments, autorisent l'assemblage en ligne mais imposent des règles plus strictes pour éviter les conflits avec les conventions de registre et les conventions d'appel.
Interopérabilité entre C++ et Assembleur
C++ fournit deux méthodes principales d’intégration du code ASM.

1. Fichiers d'assemblage autonomes – Le code d'assemblage est écrit séparément et lié au code C++. [ 93 ]

2. Assemblage en ligne – Le code assembleur est intégré au code C++ à l’aide d’extensions spécifiques au compilateur.

Exemple de code pour la compatibilité ASM

Lors de l'appel d'une fonction d'assemblage à partir de C++, utilisez pour empêcher la modification du nom C++.extern "C"
//main.cpp
importer std ;

extern "C" int add_asm ( int , int ); // Déclarer la fonction d'assemblage

int main () {
    int résultat = add_asm ( 5 , 7 );
    std :: println ( "Résultat de l'ASM : {}" , result );
    renvoie 0 ;
}
#code asm utilisant l'architecture RISC-V
. section . texte
. global add_asm

add_asm :
    ajouter a0 , a0 , a1 # Ajouter le premier argument ( a0 ) et le deuxième argument ( a1 ), stocker dans a0
    ret # Retour ( a0 contient la valeur de retour )
Les variables globales dans l'assembly doivent être déclarées comme externen C++ et marquées .globaldans l'assembly.
// main.cpp
importer std ;

extern "C" int global_var ; // Déclarer une variable globale à partir de l'assembly

int main () {
    std :: println ( "Variable globale de l'ASM : {}" , global_var );
    renvoie 0 ;
}
#asm utilisant l'architecture RISC-V
. section . données
. global global_var
. aligner 4
global_var :
    . mot 42 # Définir la valeur entière
L'assemblage en ligne permet d'intégrer ASM directement dans C++ à l'aide du asmmot-clé.
//main.cpp (en utilisant le compilateur GCC/CLANG)
importer std ;

int main () {
    int x = 10 , y = 20 , somme ;

    asm volatile (
        "ajouter %0, %1, %2"
        : "=r" ( sum ) // Opérande de sortie (stocké dans un registre)
        : "r" ( x ), "r" ( y ) // Opérandes d'entrée (stockés dans des registres)
    );

    std :: println ( "Somme en utilisant ASM en ligne : {}" , sum );
    renvoie 0 ;
}
Voir aussi
icône	Portail de programmation informatique
Carbone (langage de programmation)
Comparaison des langages de programmation
Liste des compilateurs C++
Aperçu du C++
Catégorie : Bibliothèques C++
Notes de bas de page
 Pour l'idée des coroutines sans pile C++20.
 Ce code est directement copié de la page d'errata de Bjarne Stroustrup (p. 633). Il aborde l'utilisation de'\n'plutôt questd::endl. Voir également « Puis-je écrire « void main() » ? » (archivé le 2 juillet 2020 sur Wayback Machine) pour une explication de l'implicitereturn 0;de lamainfonction. Ce retour implicite n'est pas disponible dans les autres fonctions.
Références
« Présentation des modules en C++ » . Microsoft. 24 avril 2023.
 Stroustrup, Bjarne (1996). « Une histoire du C++ : 1979-1991 ».Histoire des langages de programmation --- II.ACM. pp. 699–769.doi: 10.1145/234286.1057836 .
 Stroustrup, Bjarne (16 décembre 2021). « C++20 : Atteindre les objectifs du C++ - Bjarne Stroustrup - CppCon 2021 » . CppCon. Archivé de l'original le 30 décembre 2021. Consulté le 30 décembre 2021 .
 Stroustrup, Bjarne (12 juin 2020). « Prospérer dans un monde saturé et en constante évolution : C++ 2006–2020 » . Actes de l'ACM sur les langages de programmation . 4 (HOPL). Association for Computing Machinery (ACM) : 1– 168. doi : 10.1145/3386320 . ISSN : 2475-1421 . S2CID : 219603741 .
 Naugler, David (mai 2007). « C# 2.0 pour les programmeurs C++ et Java : atelier de conférence ». Journal of Computing Sciences in Colleges . 22 (5). Bien que C# ait été fortement influencé par Java, il l'a également été par C++ et doit être considéré comme un descendant à la fois de C++ et de Java.
« Spécifications de la chapelle (Remerciements) » (PDF) . Cray Inc., 1er octobre 2015. Archivé (PDF) de l'original le 24 juin 2018. Consulté le 14 janvier 2016 .
 Fogus, Michael. « Rich Hickey Q&R » . Code Quarterly . Archivé de l'original le 11 janvier 2017. Consulté le 11 janvier 2017 .
 Harry. H. Chaudhary (28 juillet 2014). « Décrypter l'entretien de programmation Java : plus de 2 000 questions/réponses d'entretien Java » . Archivé de l'original le 27 mai 2021. Consulté le 29 mai 2016 .
 Roger Poon (1er mai 2017). « Mise à l'échelle de JS++ : abstraction, performances et lisibilité » . Archivé de l'original le 11 mai 2020. Consulté le 21 avril 2020 .
« L'évolution d'un langage d'extension : une histoire de Lua » . www.lua.org . Consulté le 4 janvier 2023 .
« FAQ sur le langage de programmation Nim » . Archivé de l'original le 11 juillet 2017. Consulté le 21 avril 2020 .
« 9. Classes — Documentation Python 3.6.4 » . docs.python.org . Archivé de l'original le 23 octobre 2012 . Consulté le 9 janvier 2018 .
« Influences – La référence Rust » . doc.rust-lang.org . Consulté le 4 janvier 2023 .
Stroustrup, Bjarne (1997). « 1 ». Le langage de programmation C++ (3e éd.). Addison-Wesley. ISBN 0-201-88954-4. OCLC  59193992 .
 Stroustrup, B. (6 mai 2014).« Lecture: The essence of C++. University of Edinburgh ». YouTube .Archivéde l'original le 28 avril 2015. Consulté le 12 juin 2015.
 Stroustrup, Bjarne (17 février 2014). « Applications C++ » . stroustrup.com . Archivé de l'original le 4 avril 2021. Consulté le 5 mai 2014 .
 « ISO/IEC 14882:2024 ». Organisation internationale de normalisation. Consulté le 21 octobre 2020.
« Page d'accueil de Bjarne Stroustrup » . www.stroustrup.com . Archivé de l'original le 14 mai 2019. Consulté le 15 mai 2013 .
« Calendrier IS C++ » (PDF) . Archivé (PDF) de l'original le 10 août 2020. Consulté le 9 août 2020 .
« C++ ; Vers où il va » . Archivé de l'original le 3 décembre 2018. Consulté le 3 décembre 2018 .
« Re : [RFC] Convertir builin-mailinfo.c pour utiliser The Better String Library » (Liste de diffusion). 6 septembre 2007. Archivé de l'original le 8 mars 2021. Consulté le 31 mars 2015 .
« Re : Des efforts pour attirer plus d'utilisateurs ? » (Liste de diffusion). 12 juillet 2010. Archivé de l'original le 21 mars 2015. Consulté le 31 mars 2015 .
 Andrew Binstock (18 mai 2011). « Dr. Dobb's : Entretien avec Ken Thompson » . Dr. Dobb's . Archivé de l'original le 13 mars 2014. Consulté le 7 février 2014 .
 Peter Seibel (16 septembre 2009). Codeurs au travail : Réflexions sur l'art de programmer . Apress. pp.  475–476 . ISBN 978-1-4302-1948-4. Archivé de l'original le 1er décembre 2019 . Récupéré le 9 novembre 2017 .
« C++ dans Coders at Work » . 16 octobre 2009. Archivé de l'original le 10 novembre 2017. Consulté le 9 novembre 2017 .
« Entretien avec Donald Knuth » . Dr. Dobb's . Archivé de l'original le 8 mars 2021. Consulté le 18 juillet 2021 .
« (La)TeX Navigator » . Archivé de l'original le 20 novembre 2017. Consulté le 10 novembre 2017 .
 Claburn, Thomas (2 mars 2025). « Le créateur du C++ appelle à l'aide pour défendre son langage de programmation contre les « attaques graves »" . Le Registre . Récupéré le 5 mars 2025 .
 Stroustrup, Bjarne (7 mars 2010).« FAQ de Bjarne Stroustrup : Quand le C++ a-t-il été inventé ? ».stroustrup.com.Archivéde l'original le 6 février 2016. Consulté le 16 septembre 2010.
 Stroustrup, Bjarne.« Évolution d'un langage dans et pour le monde réel : C++ 1991-2006 »(PDF).Archivé(PDF)de l'original le 20 novembre 2007.Consulté le 14 août 2013.
 Stroustrup, Bjarne.« Histoire du C++ : 1979-1991 »(PDF).Archivé(PDF)de l'original le 2 février 2019.Consulté le 18 juillet 2013.
 Stroustrup, Bjarne. « Le langage de programmation C++ » (première éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Stroustrup, Bjarne. « Le langage de programmation C++ » (deuxième éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Sutter, Herb (30 juin 2016). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Oulu) » . herbsutter.com . Archivé de l'original le 8 octobre 2016. La prochaine norme après C++17 sera C++20.
 Dusíková, Hana (6 novembre 2019). « N4817 : Invitation et informations à la réunion de Prague 2020 » (PDF) . Archivé (PDF) de l'original le 29 décembre 2019. Consulté le 13 février 2020 .
« État actuel » . isocpp.org . Archivé de l'original le 8 septembre 2020. Consulté le 7 septembre 2020 .
« C++20 approuvé – Herb Sutter » . isocpp.org . Archivé de l'original le 11 septembre 2020. Consulté le 8 septembre 2020 .
« Le pionnier de l'informatique Bjarne Stroustrup recevra le prix Charles Stark Draper d'ingénierie 2018 » (communiqué de presse). Académie nationale d'ingénierie. 3 janvier 2018. Archivé de l'original le 3 janvier 2018. Consulté le 14 décembre 2021 .
 TIOBE (novembre 2024). « Indice TIOBE de novembre 2024 » . TIOBE.com . Société TIOBE. Archivé de l'original le 18 novembre 2024. Consulté le 18 novembre 2024 .
« FAQ de Bjarne Stroustrup – D'où vient le nom « C++ » ? » . Archivé de l'original le 6 février 2016. Consulté le 16 janvier 2008 .
« C pour les programmeurs C++ » . Université Northeastern . Archivé de l'original le 17 novembre 2010. Consulté le 7 septembre 2015 .
« ISO/CEI 14882:1998 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2017. Consulté le 23 novembre 2018 .
« ISO/CEI 14882:2003 » . Organisation internationale de normalisation. Archivé de l'original le 13 août 2021. Consulté le 23 novembre 2018 .
 « ISO/IEC 14882:2011 ». Organisation internationale de normalisation.Archivéde l'original le 27 mai 2016.Consulté le 23 novembre 2018.
« ISO/IEC 14882:2014 » . Organisation internationale de normalisation. Archivé de l'original le 29 avril 2016. Consulté le 23 novembre 2018 .
« ISO/IEC 14882:2017 » . Organisation internationale de normalisation. Archivé de l'original le 29 janvier 2013. Consulté le 2 décembre 2017 .
« ISO/IEC 14882:2020 » . Organisation internationale de normalisation. Archivé de l'original le 16 décembre 2020. Consulté le 16 décembre 2020 .
« Nous disposons d'une norme internationale : C++0x est approuvé à l'unanimité . » Sutter's Mill . 12 août 2011. Archivé de l'original le 28 juin 2018. Consulté le 23 novembre 2018 .
« L'avenir du C++ » . Archivé de l'original le 23 octobre 2018. Consulté le 23 novembre 2018 via channel9.msdn.com.
« Nous avons C++14 ! : C++ standard » . isocpp.org . Archivé de l'original le 19 août 2014 . Consulté le 19 août 2014 .
 Sutter, Herb (15 juillet 2017). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Toronto) » . Archivé de l'original le 6 août 2017. Consulté le 4 août 2017 .
« ISO/IEC TR 18015:2006 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 19768:2007 » . Organisation internationale de normalisation. Archivé de l'original le 4 mars 2016. Consulté le 15 février 2019 .
« ISO/IEC TR 29124:2010 » . Organisation internationale de normalisation. Archivé de l'original le 12 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 24733:2011 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 18822:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19841:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19217:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19571:2016 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21425:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 22277:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19216:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21544:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 23619:2021 » . Organisation internationale de normalisation. Archivé de l'original le 15 décembre 2018. Consulté le 11 octobre 2021 .
« ISO/IEC TS 9922:2024 » . Organisation internationale de normalisation. Archivé de l'original le 1er avril 2025. Consulté le 1er avril 2025 .
« ISO/IEC TS 19568:2024 » . Organisation internationale de normalisation. Archivé de l'original le 25 février 2025. Consulté le 1er avril 2025 .
 B. Stroustrup (interviewé par Sergio De Simone) (30 avril 2015). « Stroustrup : Réflexions sur C++17 - Une interview » . Archivé de l'original le 8 juillet 2015. Consulté le 8 juillet 2015 .
 Stroustrup, Bjarne (2000). Le langage de programmation C++ (éd. spéciale). Addison-Wesley. p. 46. ISBN 0-201-70073-5.
 Stroustrup, Bjarne. « Problèmes en suspens concernant le langage de programmation C++ (3e édition) » . Archivé de l'original le 5 mai 2014. Consulté le 5 mai 2014 .
 Graziano Lo Russo (2008). « Entretien avec A. Stepanov » . stlport.org . Archivé de l'original le 4 mars 2009. Consulté le 8 octobre 2015 .
« Directives C++ Core » . isocpp.github.io . Archivé de l'original le 16 février 2020 . Consulté le 9 février 2020 .
« Bjarne Stroustrup annonce les directives de base du C++ : C++ standard » . isocpp.org . Archivé de l'original le 11 mai 2020. Consulté le 31 mars 2020 .
« microsoft/GSL » . 18 juillet 2021. Archivé de l'original le 18 juillet 2021. Consulté le 18 juillet 2021 via GitHub.
« Utilisation des vérificateurs des directives de base C++ » . Microsoft Learn . Archivé de l'original le 13 août 2021. Consulté le 31 mars 2020 .
« Résumé de l'ABI C++ » . 20 mars 2001. Archivé de l'original le 10 juillet 2018. Consulté le 30 mai 2006 .
« FAQ de Bjarne Stroustrup – Le C est-il un sous-ensemble du C++ ? » . Archivé de l'original le 6 février 2016. Consulté le 5 mai 2014 .
« C9X – La nouvelle norme C » . Archivé de l'original le 21 juin 2018. Consulté le 27 décembre 2008 .
« Prise en charge de C++0x dans GCC » . Archivé de l'original le 21 juillet 2010. Consulté le 12 octobre 2010 .
« Fonctionnalités principales du langage C++0x dans VC10 : le tableau » . Archivé de l'original le 21 août 2010. Consulté le 12 octobre 2010 .
« Clang - État des versions C++98, C++11 et C++14 » . Clang.llvm.org. 12 mai 2013. Archivé de l'original le 4 juillet 2013. Consulté le 10 juin 2013 .
 Bokil, Milind A. (2021). « Écriture de routines d'assemblage dans les programmes C/C++ et Java ». ResearchGate. Consulté le 1er avril 2025.
 Vilhena, Paulo Emílio de ; Lahav, Ori ; Vafeiadis, Viktor ; Raad, Azalea (2024). « Extension du modèle de mémoire C/C++ avec l'assemblage en ligne ». Actes de l'ACM sur les langages de programmation, vol. 8, OOPSLA2, article 309. doi:10.1145/3689749.
 Contributeurs de cppreference.com. « Déclaration ASM ». cppreference.com . Consulté le 1er avril 2025.
« Asm étendu (utilisation de la collection de compilateurs GNU) » . Documentation en ligne de GCC . Projet GNU . Consulté le 1er avril 2025 .
 Intel Corporation. « Assemblage en ligne ». Guide du développeur et référence du compilateur Intel® C++ Classic , version 2021.9. Consulté le 1er avril 2025.
 IBM. « Instructions d'assemblage en ligne (extension IBM) ». Documentation IBM . Consulté le 1er avril 2025.
« Présentation de l'assembleur en ligne » . Microsoft Learn . Microsoft . Consulté le 1er avril 2025 .
« Interfaçage de C et C++ avec le langage assembleur » . Texas Instruments . Texas Instruments Incorporated. 23 février 2025. Consulté le 1er avril 2025 .
« Liaison C++ vers ASM dans GCC » . Wiki OSDev . Consulté le 1er avril 2025 .
Lectures complémentaires
Abrahams, David ; Gurtovoy, Aleksey (2005). Métaprogrammation de modèles C++ : concepts, outils et techniques issus de Boost et au-delà . Addison-Wesley. ISBN 0-321-22725-5.
Alexandrescu, Andrei (2001). Conception C++ moderne : Programmation générique et modèles de conception appliqués . Addison-Wesley. ISBN. 0-201-70431-5.
Alexandrescu, Andrei ; Sutter, Herb (2004). Normes de conception et de codage C++ : règles et directives pour l'écriture de programmes . Addison-Wesley. ISBN 0-321-11358-6.
Becker, Pete (2006). Les extensions de la bibliothèque standard C++ : tutoriel et référence . Addison-Wesley. ISBN. 0-321-41299-0.
Cassé, Frank (2010). Annotations C++ . Université de Groningue. ISBN 978-90-367-0470-0. Archivé de l'original le 28 avril 2010 . Récupéré le 28 avril 2010 .
Coplien, James O. (1994) [réédité avec corrections, année de publication originale : 1992]. C++ avancé : Styles et expressions idiomatiques de programmation . Addison-Wesley. ISBN 0-201-54855-0.
Dewhurst, Stephen C. (2005). C++ Common Knowledge : Programmation intermédiaire essentielle . Addison-Wesley. ISBN. 0-321-32192-8.
Conseil de l'industrie des technologies de l'information (15 octobre 2003). Langages de programmation – C++ (deuxième éd.). Genève : ISO/IEC. 14882:2003(E).
Josuttis, Nicolai M. (2012). La bibliothèque standard C++ : tutoriel et référence (deuxième éd.). Addison-Wesley. ISBN. 978-0-321-62321-8.
Koenig, Andrew ; Moo, Barbara E. (2000). C++ accéléré – Programmation pratique par l'exemple . Addison-Wesley. ISBN 0-201-70353-X.
Lippman, Stanley B. ; Lajoie, Josée; Moo, Barbara E. (2011). Introduction à C++ (Cinquième éd.). Addison-Wesley. ISBN 978-0-321-71411-4.
Lippman, Stanley B. (1996). Au cœur du modèle objet C++ . Addison-Wesley. ISBN. 0-201-83454-5.
Meyers, Scott (2005). Effective C++ (3e éd.). Addison-Wesley. ISBN. 0-321-33487-6.
Stroustrup, Bjarne (2013). Le langage de programmation C++ (quatrième éd.). Addison-Wesley. ISBN. 978-0-321-56384-2.
Stroustrup, Bjarne (1994). Conception et évolution de C++ . Addison-Wesley. ISBN. 0-201-54330-3.
Stroustrup, Bjarne (2014). Programmation : Principes et pratique en C++ (2e éd.). Addison-Wesley. ISBN. 978-0-321-99278-9.
Sutter, Herb (2001). C++ encore plus exceptionnel : 40 nouveaux casse-têtes d'ingénierie, problèmes de programmation et solutions . Addison-Wesley. ISBN 0-201-70434-X.
Sutter, Herb (2004). Style C++ exceptionnel . Addison-Wesley. ISBN. 0-201-76042-8.
Vandevoorde, David; Josuttis, Nicolai M. (2003). Modèles C++ : le guide complet . Addison-Wesley. ISBN 0-201-73484-2.
Liens externes
JTC1/SC22/WG21 – Groupe de travail sur la norme ISO/IEC C++
Standard C++ Foundation – une organisation à but non lucratif qui promeut l'utilisation et la compréhension du C++ standard. Bjarne Stroustrup est l'un des directeurs de l'organisation.
Mots-clés C++
Expressions C++
Priorité des opérateurs C++
C++ dans les projets frères de Wikipédia :

Médias de Commons

Citations de Wikiquote

Manuels scolaires de Wikibooks

Ressources de Wikiversité
vtet
C++
vtet
Langages de programmation
ComparaisonChronologieHistoire
AdaALGOL SimulaAPLAssembléeBASIQUE Visual Basic classique.FILETCC++C#COBOLErlang ÉlixirEn avantFortranAllerHaskellJavaJavaScript ManuscritJuliaKotlinZézayerLuaMATLABML Caml OCamlPascal Pascal ObjetPerl RakuPHPProloguePythonRRubisRouillerSQLGratterCoquillePetite conversationRapideplus...
 Listes : alphabétiqueCatégoriqueGénérationnelNon basé sur l'anglais Catégorie
vtet
Normes de l'Organisation internationale de normalisation (ISO)
vtet
normes CEI
Bases de données de contrôle d'autorité Modifiez ceci sur Wikidata
Catégories :C++Famille de langages de programmation AlgolFamille de langages de programmation C++Langages de programmation basés sur les classesLogiciel multiplateformeLangages de programmation de haut niveauLangages de programmation orientés objetLangages de programmation créés en 1983Langages de programmation avec une norme ISOLangages de programmation à typage statiqueLangages de programmation compilés
===================(03)======================
### [C++]
C++ ( / ˈsiːplʌsplʌs / , prononcé « C plus plus » et parfois abrégé en CPP ) est un langage de programmation de haut niveau à usage général créé par l' informaticien danois Bjarne Stroustrup . Initialement publié en 1985 comme une extension du langage de programmation C , il s'est depuis considérablement développé au fil du temps ; en 1997 , C++ possède des fonctionnalités orientées objet , génériques et fonctionnelles , en plus de fonctionnalités de manipulation de mémoire de bas niveau pour des systèmes comme les micro-ordinateurs ou pour créer des systèmes d'exploitation comme Linux ou Windows . Il est généralement implémenté comme un langage compilé , et de nombreux fournisseurs fournissent des compilateurs C++ , notamment la Free Software Foundation , LLVM , Microsoft , Intel , Embarcadero , Oracle et IBM . [ 14 ]

C++ a été conçu pour la programmation de systèmes et de logiciels embarqués , à ressources limitées et de grands systèmes, avec la performance , l'efficacité et la flexibilité d'utilisation comme points forts de sa conception. [ 15 ] C++ s'est également avéré utile dans de nombreux autres contextes, ses principaux atouts étant l'infrastructure logicielle et les applications à ressources limitées, [ 15 ] y compris les applications de bureau , les jeux vidéo , les serveurs (par exemple, le commerce électronique , la recherche sur le Web ou les bases de données ) et les applications critiques en termes de performances (par exemple, les commutateurs téléphoniques ou les sondes spatiales ). [ 16 ]

Français C++ est normalisé par l' Organisation internationale de normalisation (ISO), la dernière version de la norme ayant été ratifiée et publiée par l'ISO en octobre 2024 sous le nom d' ISO/IEC 14882:2024 (connue officieusement sous le nom de C++23 ). [ 17 ] Le langage de programmation C++ a été initialement normalisé en 1998 sous le nom d'ISO/IEC 14882:1998 , qui a ensuite été modifié par les normes C++03 , C++11 , C ++14 , C++17 et C++20 . La norme C++23 actuelle les remplace par de nouvelles fonctionnalités et une bibliothèque standard élargie . Avant la normalisation initiale en 1998, C++ a été développé par Stroustrup aux Bell Labs depuis 1979 comme une extension du langage C ; il voulait un langage efficace et flexible similaire à C qui fournisse également des fonctionnalités de haut niveau pour l'organisation des programmes. [ 18 ] Depuis 2012, C++ suit un calendrier de publication de trois ans [ 19 ] avec C++26 comme prochaine norme prévue. [ 20 ]

Malgré son adoption généralisée, certains programmeurs notables ont critiqué le langage C++ , notamment Linus Torvalds , [ 21 ] Richard Stallman , [ 22 ] Joshua Bloch , Ken Thompson , [ 23 ] [ 24 ] [ 25 ] et Donald Knuth . [ 26 ] [ 27 ] Cela est dû en grande partie à sa gestion manuelle de la mémoire, qui le rend vulnérable aux bogues de dépassement de tampon , qui représentent un risque de sécurité. [ 28 ]

Histoire

Bjarne Stroustrup, le créateur de C++, dans son bureau d'AT&T dans le New Jersey, vers  2000
En 1979, Bjarne Stroustrup , un informaticien danois , a commencé à travailler sur «C avec classes , prédécesseur de C++. [ 29 ] La création d'un nouveau langage est née de l'expérience de Stroustrup en programmation pour sa thèse de doctorat. Stroustrup a constaté que Simula possédait des fonctionnalités très utiles pour le développement de logiciels de grande envergure, mais que le langage était trop lent pour une utilisation pratique, tandis que BCPL était rapide mais trop bas niveau pour convenir au développement de logiciels de grande envergure. Lorsque Stroustrup a commencé à travailler chez AT&T Bell Labs , il a dû analyser le noyau UNIX en termes de calcul distribué . Se souvenant de son doctorat, Stroustrup a entrepris d'améliorer le langage C avec des fonctionnalités similaires à Simula. [ 30 ] Le C a été choisi pour sa polyvalence, sa rapidité, sa portabilité et sa large diffusion. Outre l'influence de C et de Simula, d'autres langages ont influencé ce nouveau langage, notamment ALGOL 68 , Ada , CLU et ML . [ citation requise ]

Initialement, le « C avec classes » de Stroustrup ajoutait des fonctionnalités au compilateur C, Cpre, notamment les classes , les classes dérivées , le typage fort , l'inlining et les arguments par défaut . [ 31 ]


Un quiz sur les fonctionnalités de C++11 donné à Paris en 2015
En 1982, Stroustrup commença à développer un successeur au C avec des classes, qu'il baptisa « C++ » ( ++opérateur d'incrémentation en C) après avoir essayé plusieurs autres noms. De nouvelles fonctionnalités furent ajoutées, notamment les fonctions virtuelles , la surcharge des noms de fonctions et des opérateurs , les références , les constantes, l'allocation de mémoire libre sécurisée (nouveau/suppression), une vérification de type améliorée et des commentaires sur une seule ligne de style BCPL avec deux barres obliques ( //). De plus, Stroustrup développa un nouveau compilateur autonome pour C++, Cfront .

En 1984, Stroustrup a implémenté la première bibliothèque d'entrée/sortie de flux. L'idée de fournir un opérateur de sortie plutôt qu'une fonction de sortie nommée a été suggérée par Doug McIlroy [ 2 ] (qui avait précédemment suggéré les tubes Unix ).

En 1985, la première édition du langage de programmation C++ a été publiée, qui est devenue la référence définitive pour le langage, car il n'y avait pas encore de norme officielle. [ 32 ] La première implémentation commerciale de C++ a été publiée en octobre de la même année. [ 29 ]

En 1989, C++ 2.0 a été publié, suivi par la deuxième édition mise à jour du langage de programmation C++ en 1991. [ 33 ] Les nouvelles fonctionnalités de la version 2.0 comprenaient l'héritage multiple, les classes abstraites, les fonctions membres statiques, les fonctions membres const et les membres protégés. En 1990, le Manuel de référence C++ annoté a été publié. Ce travail est devenu la base de la future norme. Les ajouts de fonctionnalités ultérieurs comprenaient les modèles , les exceptions , les espaces de noms , les nouveaux casts et un type booléen .

En 1998, C++98 a été publié, standardisant le langage, et une mise à jour mineure ( C++03 ) a été publiée en 2003.

Après C++98, le C++ a évolué relativement lentement jusqu'à la publication, en 2011, de la norme C++11 , qui ajoutait de nombreuses nouvelles fonctionnalités, élargissait la bibliothèque standard et offrait davantage de fonctionnalités aux programmeurs C++. Après une mise à jour mineure de C++14 publiée en décembre 2014, divers ajouts ont été introduits dans C++17 . [ 34 ] Après sa finalisation en février 2020, [ 35 ] un projet de norme C++20 a été approuvé le 4 septembre 2020 et officiellement publié le 15 décembre 2020. [ 36 ] [ 37 ]

Le 3 janvier 2018, Stroustrup a été annoncé comme le lauréat 2018 du prix Charles Stark Draper d'ingénierie, « pour la conceptualisation et le développement du langage de programmation C++ ». [ 38 ]

En décembre 2022, C++ se classait troisième au classement TIOBE , surpassant Java pour la première fois dans l'histoire de l'indice. En novembre 2024 , le langage se classait deuxième après Python , Java étant troisième. [ 39 ]

Étymologie
Selon Stroustrup, « le nom signifie la nature évolutive des changements par rapport à C. » [ 40 ] Ce nom est attribué à Rick Mascitti (mi-1983) [ 31 ] et a été utilisé pour la première fois en décembre 1983. Lorsque Mascitti a été interrogé de manière informelle en 1992 sur le nom, il a indiqué qu'il avait été donné dans un esprit ironique . Le nom vient de ++ l'opérateur de C (qui incrémente la valeur d'une variable ) et d'une convention de nommage courante consistant à utiliser « + » pour indiquer un programme informatique amélioré.

Au cours de la période de développement du C++, le langage a été appelé « nouveau C » et « C avec classes » [ 31 ] [ 41 ] avant d'acquérir son nom définitif.

Philosophie
Tout au long de la vie de C++, son développement et son évolution ont été guidés par un ensemble de principes : [ 30 ]

Il doit être motivé par des problèmes réels et ses fonctionnalités doivent être immédiatement utiles dans les programmes du monde réel.
Chaque fonctionnalité doit être implémentable (avec une manière raisonnablement évidente de le faire).
Les programmeurs devraient être libres de choisir leur propre style de programmation, et ce style devrait être entièrement pris en charge par C++.
Autoriser une fonctionnalité utile est plus important que d’empêcher toute mauvaise utilisation possible de C++.
Il devrait fournir des moyens d’organiser les programmes en parties distinctes et bien définies, ainsi que des moyens de combiner des parties développées séparément.
Aucune violation implicite du système de types (mais autorise les violations explicites, c'est-à-dire celles explicitement demandées par le programmeur).
Les types créés par l’utilisateur doivent bénéficier du même support et des mêmes performances que les types intégrés.
Les fonctionnalités inutilisées ne doivent pas avoir d'impact négatif sur les exécutables créés (par exemple, en réduisant les performances).
Il ne devrait y avoir aucun langage sous C++ (à l'exception du langage assembleur ).
C++ devrait fonctionner aux côtés d’autres langages de programmation existants , plutôt que de favoriser son propre environnement de programmation séparé et incompatible .
Si l’intention du programmeur est inconnue, permettez-lui de la spécifier en fournissant un contrôle manuel.
Standardisation
Articles principaux : C++03 , C++11 , C++14 , C++17 , C++20 , C++23 et C++26
Normes C++
Année	Norme ISO/CEI	Nom informel
1998	14882:1998 [ 42 ]	C++98
2003	14882:2003 [ 43 ]	C++03
2011	14882:2011 [ 44 ]	C++11 , C++0x
2014	14882:2014 [ 45 ]	C++14 , C++1y
2017	14882:2017 [ 46 ]	C++17 , C++1z
2020	14882:2020 [ 47 ]	C++20 , C++2a
2024	14882:2024 [ 17 ]	C++23 , C++2b
À déterminer		C++26 , C++2c
Le C++ est normalisé par un groupe de travail ISO appelé JTC1/SC22/WG21 . À ce jour, sept révisions de la norme C++ ont été publiées et la prochaine révision, C++26 , est actuellement en cours .


Scène lors de la réunion du comité des normes C++ à Stockholm en 1996
En 1998, le groupe de travail ISO a normalisé C++ pour la première fois sous la norme ISO/IEC 14882:1998 , plus connue sous le nom informel de C++98 . En 2003, il a publié une nouvelle version de la norme C++, appelée ISO/IEC 14882:2003 , qui corrigeait les problèmes identifiés dans C++98.

La prochaine révision majeure de la norme a été appelée de manière informelle « C++0x », mais elle n'a été publiée qu'en 2011. [ 48 ] C++11 (14882:2011) comprenait de nombreux ajouts au langage de base et à la bibliothèque standard. [ 44 ]

En 2014, C++14 (également connu sous le nom de C++1y) a été publié comme une petite extension de C++11, comportant principalement des corrections de bogues et de petites améliorations. [ 49 ] Les procédures de vote du projet de norme internationale se sont achevées à la mi-août 2014. [ 50 ]

Après C++14, une révision majeure C++17 , connue officieusement sous le nom de C++1z, a été achevée par le comité ISO C++ à la mi-juillet 2017 et a été approuvée et publiée en décembre 2017. [ 51 ]

Dans le cadre du processus de normalisation, l’ISO publie également des rapports et des spécifications techniques :

ISO/IEC TR 18015:2006 [ 52 ] sur l'utilisation du C++ dans les systèmes embarqués et sur les implications en termes de performances des fonctionnalités du langage et de la bibliothèque C++,
ISO/IEC TR 19768:2007 [ 53 ] (également connu sous le nom de Rapport technique C++ 1 ) sur les extensions de bibliothèque principalement intégrées dans C++11 ,
ISO/IEC TR 29124:2010 [ 54 ] sur les fonctions mathématiques spéciales, intégrées dans C++17 ,
ISO/IEC TR 24733:2011 [ 55 ] sur l'arithmétique décimale à virgule flottante ,
ISO/IEC TS 18822:2015 [ 56 ] sur la bibliothèque de systèmes de fichiers standard, intégrée dans C++17 ,
ISO/IEC TS 19570:2015 [ 57 ] sur les versions parallèles des algorithmes de la bibliothèque standard, intégrés dans C++17 ,
ISO/IEC TS 19841:2015 [ 58 ] sur la mémoire transactionnelle logicielle ,
ISO/IEC TS 19568:2015 [ 59 ] sur un nouvel ensemble d'extensions de bibliothèque, dont certaines sont déjà intégrées dans C++17 ,
ISO/IEC TS 19217:2015 [ 60 ] sur les concepts C++ , intégrés dans C++20 ,
ISO/IEC TS 19571:2016 [ 61 ] sur les extensions de bibliothèque pour la concurrence, dont certaines sont déjà intégrées dans C++20 ,
ISO/IEC TS 19568:2017 [ 62 ] sur un nouvel ensemble d'extensions de bibliothèque à usage général,
ISO/IEC TS 21425:2017 [ 63 ] sur les extensions de bibliothèque pour les plages, intégrées dans C++20 ,
ISO/IEC TS 22277:2017 [ 64 ] sur les coroutines, intégrées dans C++20 ,
ISO/IEC TS 19216:2018 [ 65 ] sur la bibliothèque réseau,
ISO/IEC TS 21544:2018 [ 66 ] sur les modules, intégrés dans C++20 ,
ISO/IEC TS 19570:2018 [ 67 ] sur un nouvel ensemble d'extensions de bibliothèque pour le parallélisme
ISO/IEC TS 23619:2021 [ 68 ] sur les nouvelles extensions pour la programmation réflexive (réflexion),
ISO/IEC TS 9922:2024 [ 69 ] sur un nouvel ensemble d'extensions de concurrence, et
ISO/IEC TS 19568:2024 [ 70 ] sur un autre nouvel ensemble d'extensions de bibliothèque.
D’autres spécifications techniques sont en cours de développement et en attente d’approbation.

Langue
Article principal : Syntaxe C++
Le langage C++ comporte deux composantes principales : un mappage direct des fonctionnalités matérielles fournies principalement par le sous-ensemble C, et des abstractions sans surcharge basées sur ces mappages. Stroustrup décrit le C++ comme « un langage de programmation d'abstraction léger [conçu] pour construire et utiliser des abstractions efficaces et élégantes » ; [ 15 ] et « offrir à la fois accès au matériel et abstraction est la base du C++. Son efficacité le distingue des autres langages. » [ 71 ]

Le C++ hérite de la majeure partie de la syntaxe du C. Un programme « Hello World » conforme à la norme C est également un programme « Hello World » C++ valide. Voici la version de Bjarne Stroustrup du programme « Hello World » , qui utilise la fonctionnalité de flux de la bibliothèque standard C++ pour écrire un message sur la sortie standard : [ 72 ] [ 73 ] [ note 2 ]

#include <iostream>

int main ()
{
    std :: cout << "Bonjour tout le monde ! \n " ;
}
Bibliothèque standard

Le projet de norme « Working Paper » qui a été approuvé sous le nom de C++98 ; la moitié de sa taille était consacrée à la bibliothèque standard C++.
Article principal : Bibliothèque standard C++
La norme C++ se compose de deux parties : le langage principal et la bibliothèque standard. Les programmeurs C++ s'attendent à la présence de cette dernière sur chaque implémentation majeure de C++ ; elle inclut des types d'agrégats ( vecteurs , listes, cartes, ensembles, files d'attente, piles, tableaux, tuples), des algorithmes (find, for_each , binary_search , random_shuffle, etc.), des fonctions d'entrée/sortie ( iostream , pour la lecture et l'écriture sur la console et les fichiers), une bibliothèque de systèmes de fichiers, la prise en charge de la localisation, des pointeurs intelligents pour la gestion automatique de la mémoire, la prise en charge des expressions régulières , une bibliothèque multithreading , la prise en charge des atomes (permettant la lecture ou l'écriture d'une variable par un seul thread à la fois sans synchronisation externe), des utilitaires de temps (mesure, obtention de l'heure actuelle, etc.), un système de conversion des rapports d'erreurs n'utilisant pas d'exceptions C++ en exceptions C++, un générateur de nombres aléatoires et une version légèrement modifiée de la bibliothèque standard C (pour la rendre compatible avec le système de types C++).

Une grande partie de la bibliothèque C++ repose sur la bibliothèque de modèles standard (STL). Parmi les outils utiles fournis par la STL figurent des conteneurs sous forme de collections d'objets (tels que des vecteurs et des listes ), des itérateurs offrant un accès aux conteneurs de type tableau, et des algorithmes effectuant des opérations telles que la recherche et le tri.

De plus, des (multi)maps ( tableaux associatifs ) et des (multi)sets sont fournis, exportant tous des interfaces compatibles. Par conséquent, l'utilisation de modèles permet d'écrire des algorithmes génériques fonctionnant avec n'importe quel conteneur ou sur n'importe quelle séquence définie par des itérateurs.

Comme en C, les fonctionnalités de la bibliothèque sont accessibles via la #include directive « include un en-tête standard » . La bibliothèque standard C++ fournit 105 en-têtes standard, dont 27 sont obsolètes. Avec l'introduction des modules en C++20 , ces en-têtes sont accessibles via import, et en C++23 , l'intégralité de la bibliothèque standard peut désormais être importée directement en tant que module, via . Actuellement, la bibliothèque standard C++ fournit deux modules, et (un module de compatibilité pour lequel exporte les fonctionnalités de la bibliothèque standard C dans l'espace de noms global). import std;stdstd.compatstd

La norme intègre la STL, initialement conçue par Alexander Stepanov , qui a expérimenté des algorithmes et des conteneurs génériques pendant de nombreuses années. En commençant avec le C++, il a finalement trouvé un langage permettant de créer des algorithmes génériques (par exemple, le tri STL) encore plus performants que, par exemple, la bibliothèque standard C qsort, grâce à des fonctionnalités C++ comme l'utilisation de l'inlining et de la liaison à la compilation au lieu de pointeurs de fonction. La norme ne la désigne pas comme « STL », car elle n'en est qu'une partie, mais ce terme reste largement utilisé pour la distinguer du reste de la bibliothèque standard (flux d'entrée/sortie, internationalisation, diagnostics, sous-ensemble de la bibliothèque C, etc.). [ 74 ]

La plupart des compilateurs C++, et tous les principaux, fournissent une implémentation conforme aux normes de la bibliothèque standard C++.

Directives de base C++
Les C++ Core Guidelines [ 75 ] sont une initiative menée par Bjarne Stroustrup, l'inventeur du C++, et Herb Sutter, le coordinateur et président du groupe de travail ISO C++, pour aider les programmeurs à écrire du « C++ moderne » en utilisant les meilleures pratiques pour les normes de langage C++11 et plus récentes, et pour aider les développeurs de compilateurs et d'outils de vérification statique à créer des règles pour détecter les mauvaises pratiques de programmation.

L'objectif principal est d'écrire de manière efficace et cohérente du C++ sûr en termes de type et de ressources.

Les lignes directrices de base ont été annoncées [ 76 ] lors du discours d’ouverture du CPPCon 2015.

Les lignes directrices sont accompagnées de la bibliothèque de support des lignes directrices (GSL), [ 77 ] une bibliothèque d'en-têtes uniquement de types et de fonctions pour implémenter les lignes directrices de base et des outils de vérification statique pour appliquer les règles des lignes directrices. [ 78 ]

Compatibilité
Afin de donner plus de liberté aux fournisseurs de compilateurs, le comité de normalisation C++ a décidé de ne pas imposer l'implémentation de la modification des noms , de la gestion des exceptions et d'autres fonctionnalités spécifiques à l'implémentation. L'inconvénient de cette décision est que le code objet produit par différents compilateurs est susceptible d'être incompatible. Il existe cependant des tentatives de normalisation des compilateurs pour des machines ou des systèmes d'exploitation spécifiques . Par exemple, l'ABI Itanium C++ est indépendante du processeur (malgré son nom) et est implémentée par GCC et Clang. [ 79 ]

Avec C
Article principal : Compatibilité de C et C++
Le C++ est souvent considéré comme un sur-ensemble du C , mais ce n'est pas tout à fait vrai. [ 80 ] La plupart du code C peut facilement être compilé correctement en C++, mais il existe quelques différences qui rendent certains codes C valides invalides ou se comportent différemment en C++. Par exemple, le C autorise la conversion implicite de vers d'autres types de pointeurs, mais pas le C++ (pour des raisons de sécurité des types). De plus, le C++ définit de nombreux nouveaux mots-clés, tels que et , qui peuvent être utilisés comme identifiants (par exemple, des noms de variables) dans un programme C. void*newclass

Français Certaines incompatibilités ont été supprimées par la révision de 1999 de la norme C ( C99 ), qui prend désormais en charge les fonctionnalités C++ telles que les commentaires de ligne ( //) et les déclarations mélangées au code. D'autre part, C99 a introduit un certain nombre de nouvelles fonctionnalités que C++ ne prenait pas en charge et qui étaient incompatibles ou redondantes en C++, telles que les tableaux de longueur variable , les types de nombres complexes natifs (cependant, la classe de la bibliothèque standard C++ fournit des fonctionnalités similaires, bien que non compatibles avec le code), les initialiseurs désignés, les littéraux composés et le mot-clé. [ 81 ] Certaines des fonctionnalités introduites par C99 ont été incluses dans la version ultérieure de la norme C++, C++11 (parmi celles qui n'étaient pas redondantes). [ 82 ] [ 83 ] [ 84 ] Cependant, la norme C++11 introduit de nouvelles incompatibilités, telles que l'interdiction d'assigner un littéral de chaîne à un pointeur de caractère, ce qui reste valide en C. std::complexrestrict

Pour mélanger du code C et du code C++, toute déclaration ou définition de fonction appelée ou utilisée à la fois en C et en C++ doit être déclarée avec une liaison C, en la plaçant dans un bloc. Une telle fonction ne doit pas dépendre de fonctionnalités dépendant de la modification des noms (c'est-à-dire de la surcharge de fonction). extern "C" {/*...*/}

Assemblage en ligne
Les programmes développés en C ou C++ utilisent souvent l'assembleur en ligne pour tirer parti de ses fonctionnalités de bas niveau, de sa vitesse supérieure et de son contrôle amélioré par rapport aux langages de programmation de haut niveau [ 85 ] [ 86 ] lorsque l'optimisation des performances est essentielle. C++ prend en charge l'intégration du langage assembleur à l'aide de déclarations asm [ 87 ] , mais la compatibilité de l'assembleur en ligne varie considérablement entre les compilateurs et les architectures. Contrairement aux fonctionnalités des langages de haut niveau tels que Python ou Java , le code assembleur dépend fortement du processeur sous-jacent et de l'implémentation du compilateur.

Variations entre les compilateurs
Différents compilateurs C++ implémentent l'assemblage en ligne de manières distinctes.

GCC ( GNU Compiler Collection ) et Clang [ 88 ] : Utilisent la syntaxe d'assemblage en ligne étendue de GCC. L'utilisation __asm__du mot-clé plutôt que asmde lors de l'écriture de code pouvant être compilé avec les options et permet de spécifier les opérandes d'entrée/sortie et les registres écrasés. Cette approche est largement adoptée, notamment par les compilateurs Intel [ 89 ] et IBM [ 90 ] .-ansi-std
MSVC ( Microsoft Visual C++ ) : l'assembleur en ligne est intégré au compilateur. Auparavant, l'assembleur en ligne était pris en charge via le __asmmot-clé, mais cette prise en charge a été supprimée en mode 64 bits, nécessitant des modules .asm distincts [ 91 ] .
TI ARM Clang et compilateurs embarqués [ 92 ] : Certains compilateurs de systèmes embarqués, comme TI Arm Clang de Texas Instruments, autorisent l'assemblage en ligne mais imposent des règles plus strictes pour éviter les conflits avec les conventions de registre et les conventions d'appel.
Interopérabilité entre C++ et Assembleur
C++ fournit deux méthodes principales d’intégration du code ASM.

1. Fichiers d'assemblage autonomes – Le code d'assemblage est écrit séparément et lié au code C++. [ 93 ]

2. Assemblage en ligne – Le code assembleur est intégré au code C++ à l’aide d’extensions spécifiques au compilateur.

Exemple de code pour la compatibilité ASM

Lors de l'appel d'une fonction d'assemblage à partir de C++, utilisez pour empêcher la modification du nom C++.extern "C"
//main.cpp
importer std ;

extern "C" int add_asm ( int , int ); // Déclarer la fonction d'assemblage

int main () {
    int résultat = add_asm ( 5 , 7 );
    std :: println ( "Résultat de l'ASM : {}" , result );
    renvoie 0 ;
}
#code asm utilisant l'architecture RISC-V
. section . texte
. global add_asm

add_asm :
    ajouter a0 , a0 , a1 # Ajouter le premier argument ( a0 ) et le deuxième argument ( a1 ), stocker dans a0
    ret # Retour ( a0 contient la valeur de retour )
Les variables globales dans l'assembly doivent être déclarées comme externen C++ et marquées .globaldans l'assembly.
// main.cpp
importer std ;

extern "C" int global_var ; // Déclarer une variable globale à partir de l'assembly

int main () {
    std :: println ( "Variable globale de l'ASM : {}" , global_var );
    renvoie 0 ;
}
#asm utilisant l'architecture RISC-V
. section . données
. global global_var
. aligner 4
global_var :
    . mot 42 # Définir la valeur entière
L'assemblage en ligne permet d'intégrer ASM directement dans C++ à l'aide du asmmot-clé.
//main.cpp (en utilisant le compilateur GCC/CLANG)
importer std ;

int main () {
    int x = 10 , y = 20 , somme ;

    asm volatile (
        "ajouter %0, %1, %2"
        : "=r" ( sum ) // Opérande de sortie (stocké dans un registre)
        : "r" ( x ), "r" ( y ) // Opérandes d'entrée (stockés dans des registres)
    );

    std :: println ( "Somme en utilisant ASM en ligne : {}" , sum );
    renvoie 0 ;
}
Voir aussi
icône	Portail de programmation informatique
Carbone (langage de programmation)
Comparaison des langages de programmation
Liste des compilateurs C++
Aperçu du C++
Catégorie : Bibliothèques C++
Notes de bas de page
 Pour l'idée des coroutines sans pile C++20.
 Ce code est directement copié de la page d'errata de Bjarne Stroustrup (p. 633). Il aborde l'utilisation de'\n'plutôt questd::endl. Voir également « Puis-je écrire « void main() » ? » (archivé le 2 juillet 2020 sur Wayback Machine) pour une explication de l'implicitereturn 0;de lamainfonction. Ce retour implicite n'est pas disponible dans les autres fonctions.
Références
« Présentation des modules en C++ » . Microsoft. 24 avril 2023.
 Stroustrup, Bjarne (1996). « Une histoire du C++ : 1979-1991 ».Histoire des langages de programmation --- II.ACM. pp. 699–769.doi: 10.1145/234286.1057836 .
 Stroustrup, Bjarne (16 décembre 2021). « C++20 : Atteindre les objectifs du C++ - Bjarne Stroustrup - CppCon 2021 » . CppCon. Archivé de l'original le 30 décembre 2021. Consulté le 30 décembre 2021 .
 Stroustrup, Bjarne (12 juin 2020). « Prospérer dans un monde saturé et en constante évolution : C++ 2006–2020 » . Actes de l'ACM sur les langages de programmation . 4 (HOPL). Association for Computing Machinery (ACM) : 1– 168. doi : 10.1145/3386320 . ISSN : 2475-1421 . S2CID : 219603741 .
 Naugler, David (mai 2007). « C# 2.0 pour les programmeurs C++ et Java : atelier de conférence ». Journal of Computing Sciences in Colleges . 22 (5). Bien que C# ait été fortement influencé par Java, il l'a également été par C++ et doit être considéré comme un descendant à la fois de C++ et de Java.
« Spécifications de la chapelle (Remerciements) » (PDF) . Cray Inc., 1er octobre 2015. Archivé (PDF) de l'original le 24 juin 2018. Consulté le 14 janvier 2016 .
 Fogus, Michael. « Rich Hickey Q&R » . Code Quarterly . Archivé de l'original le 11 janvier 2017. Consulté le 11 janvier 2017 .
 Harry. H. Chaudhary (28 juillet 2014). « Décrypter l'entretien de programmation Java : plus de 2 000 questions/réponses d'entretien Java » . Archivé de l'original le 27 mai 2021. Consulté le 29 mai 2016 .
 Roger Poon (1er mai 2017). « Mise à l'échelle de JS++ : abstraction, performances et lisibilité » . Archivé de l'original le 11 mai 2020. Consulté le 21 avril 2020 .
« L'évolution d'un langage d'extension : une histoire de Lua » . www.lua.org . Consulté le 4 janvier 2023 .
« FAQ sur le langage de programmation Nim » . Archivé de l'original le 11 juillet 2017. Consulté le 21 avril 2020 .
« 9. Classes — Documentation Python 3.6.4 » . docs.python.org . Archivé de l'original le 23 octobre 2012 . Consulté le 9 janvier 2018 .
« Influences – La référence Rust » . doc.rust-lang.org . Consulté le 4 janvier 2023 .
Stroustrup, Bjarne (1997). « 1 ». Le langage de programmation C++ (3e éd.). Addison-Wesley. ISBN 0-201-88954-4. OCLC  59193992 .
 Stroustrup, B. (6 mai 2014).« Lecture: The essence of C++. University of Edinburgh ». YouTube .Archivéde l'original le 28 avril 2015. Consulté le 12 juin 2015.
 Stroustrup, Bjarne (17 février 2014). « Applications C++ » . stroustrup.com . Archivé de l'original le 4 avril 2021. Consulté le 5 mai 2014 .
 « ISO/IEC 14882:2024 ». Organisation internationale de normalisation. Consulté le 21 octobre 2020.
« Page d'accueil de Bjarne Stroustrup » . www.stroustrup.com . Archivé de l'original le 14 mai 2019. Consulté le 15 mai 2013 .
« Calendrier IS C++ » (PDF) . Archivé (PDF) de l'original le 10 août 2020. Consulté le 9 août 2020 .
« C++ ; Vers où il va » . Archivé de l'original le 3 décembre 2018. Consulté le 3 décembre 2018 .
« Re : [RFC] Convertir builin-mailinfo.c pour utiliser The Better String Library » (Liste de diffusion). 6 septembre 2007. Archivé de l'original le 8 mars 2021. Consulté le 31 mars 2015 .
« Re : Des efforts pour attirer plus d'utilisateurs ? » (Liste de diffusion). 12 juillet 2010. Archivé de l'original le 21 mars 2015. Consulté le 31 mars 2015 .
 Andrew Binstock (18 mai 2011). « Dr. Dobb's : Entretien avec Ken Thompson » . Dr. Dobb's . Archivé de l'original le 13 mars 2014. Consulté le 7 février 2014 .
 Peter Seibel (16 septembre 2009). Codeurs au travail : Réflexions sur l'art de programmer . Apress. pp.  475–476 . ISBN 978-1-4302-1948-4. Archivé de l'original le 1er décembre 2019 . Récupéré le 9 novembre 2017 .
« C++ dans Coders at Work » . 16 octobre 2009. Archivé de l'original le 10 novembre 2017. Consulté le 9 novembre 2017 .
« Entretien avec Donald Knuth » . Dr. Dobb's . Archivé de l'original le 8 mars 2021. Consulté le 18 juillet 2021 .
« (La)TeX Navigator » . Archivé de l'original le 20 novembre 2017. Consulté le 10 novembre 2017 .
 Claburn, Thomas (2 mars 2025). « Le créateur du C++ appelle à l'aide pour défendre son langage de programmation contre les « attaques graves »" . Le Registre . Récupéré le 5 mars 2025 .
 Stroustrup, Bjarne (7 mars 2010).« FAQ de Bjarne Stroustrup : Quand le C++ a-t-il été inventé ? ».stroustrup.com.Archivéde l'original le 6 février 2016. Consulté le 16 septembre 2010.
 Stroustrup, Bjarne.« Évolution d'un langage dans et pour le monde réel : C++ 1991-2006 »(PDF).Archivé(PDF)de l'original le 20 novembre 2007.Consulté le 14 août 2013.
 Stroustrup, Bjarne.« Histoire du C++ : 1979-1991 »(PDF).Archivé(PDF)de l'original le 2 février 2019.Consulté le 18 juillet 2013.
 Stroustrup, Bjarne. « Le langage de programmation C++ » (première éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Stroustrup, Bjarne. « Le langage de programmation C++ » (deuxième éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Sutter, Herb (30 juin 2016). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Oulu) » . herbsutter.com . Archivé de l'original le 8 octobre 2016. La prochaine norme après C++17 sera C++20.
 Dusíková, Hana (6 novembre 2019). « N4817 : Invitation et informations à la réunion de Prague 2020 » (PDF) . Archivé (PDF) de l'original le 29 décembre 2019. Consulté le 13 février 2020 .
« État actuel » . isocpp.org . Archivé de l'original le 8 septembre 2020. Consulté le 7 septembre 2020 .
« C++20 approuvé – Herb Sutter » . isocpp.org . Archivé de l'original le 11 septembre 2020. Consulté le 8 septembre 2020 .
« Le pionnier de l'informatique Bjarne Stroustrup recevra le prix Charles Stark Draper d'ingénierie 2018 » (communiqué de presse). Académie nationale d'ingénierie. 3 janvier 2018. Archivé de l'original le 3 janvier 2018. Consulté le 14 décembre 2021 .
 TIOBE (novembre 2024). « Indice TIOBE de novembre 2024 » . TIOBE.com . Société TIOBE. Archivé de l'original le 18 novembre 2024. Consulté le 18 novembre 2024 .
« FAQ de Bjarne Stroustrup – D'où vient le nom « C++ » ? » . Archivé de l'original le 6 février 2016. Consulté le 16 janvier 2008 .
« C pour les programmeurs C++ » . Université Northeastern . Archivé de l'original le 17 novembre 2010. Consulté le 7 septembre 2015 .
« ISO/CEI 14882:1998 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2017. Consulté le 23 novembre 2018 .
« ISO/CEI 14882:2003 » . Organisation internationale de normalisation. Archivé de l'original le 13 août 2021. Consulté le 23 novembre 2018 .
 « ISO/IEC 14882:2011 ». Organisation internationale de normalisation.Archivéde l'original le 27 mai 2016.Consulté le 23 novembre 2018.
« ISO/IEC 14882:2014 » . Organisation internationale de normalisation. Archivé de l'original le 29 avril 2016. Consulté le 23 novembre 2018 .
« ISO/IEC 14882:2017 » . Organisation internationale de normalisation. Archivé de l'original le 29 janvier 2013. Consulté le 2 décembre 2017 .
« ISO/IEC 14882:2020 » . Organisation internationale de normalisation. Archivé de l'original le 16 décembre 2020. Consulté le 16 décembre 2020 .
« Nous disposons d'une norme internationale : C++0x est approuvé à l'unanimité . » Sutter's Mill . 12 août 2011. Archivé de l'original le 28 juin 2018. Consulté le 23 novembre 2018 .
« L'avenir du C++ » . Archivé de l'original le 23 octobre 2018. Consulté le 23 novembre 2018 via channel9.msdn.com.
« Nous avons C++14 ! : C++ standard » . isocpp.org . Archivé de l'original le 19 août 2014 . Consulté le 19 août 2014 .
 Sutter, Herb (15 juillet 2017). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Toronto) » . Archivé de l'original le 6 août 2017. Consulté le 4 août 2017 .
« ISO/IEC TR 18015:2006 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 19768:2007 » . Organisation internationale de normalisation. Archivé de l'original le 4 mars 2016. Consulté le 15 février 2019 .
« ISO/IEC TR 29124:2010 » . Organisation internationale de normalisation. Archivé de l'original le 12 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 24733:2011 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 18822:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19841:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19217:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19571:2016 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21425:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 22277:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19216:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21544:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 23619:2021 » . Organisation internationale de normalisation. Archivé de l'original le 15 décembre 2018. Consulté le 11 octobre 2021 .
« ISO/IEC TS 9922:2024 » . Organisation internationale de normalisation. Archivé de l'original le 1er avril 2025. Consulté le 1er avril 2025 .
« ISO/IEC TS 19568:2024 » . Organisation internationale de normalisation. Archivé de l'original le 25 février 2025. Consulté le 1er avril 2025 .
 B. Stroustrup (interviewé par Sergio De Simone) (30 avril 2015). « Stroustrup : Réflexions sur C++17 - Une interview » . Archivé de l'original le 8 juillet 2015. Consulté le 8 juillet 2015 .
 Stroustrup, Bjarne (2000). Le langage de programmation C++ (éd. spéciale). Addison-Wesley. p. 46. ISBN 0-201-70073-5.
 Stroustrup, Bjarne. « Problèmes en suspens concernant le langage de programmation C++ (3e édition) » . Archivé de l'original le 5 mai 2014. Consulté le 5 mai 2014 .
 Graziano Lo Russo (2008). « Entretien avec A. Stepanov » . stlport.org . Archivé de l'original le 4 mars 2009. Consulté le 8 octobre 2015 .
« Directives C++ Core » . isocpp.github.io . Archivé de l'original le 16 février 2020 . Consulté le 9 février 2020 .
« Bjarne Stroustrup annonce les directives de base du C++ : C++ standard » . isocpp.org . Archivé de l'original le 11 mai 2020. Consulté le 31 mars 2020 .
« microsoft/GSL » . 18 juillet 2021. Archivé de l'original le 18 juillet 2021. Consulté le 18 juillet 2021 via GitHub.
« Utilisation des vérificateurs des directives de base C++ » . Microsoft Learn . Archivé de l'original le 13 août 2021. Consulté le 31 mars 2020 .
« Résumé de l'ABI C++ » . 20 mars 2001. Archivé de l'original le 10 juillet 2018. Consulté le 30 mai 2006 .
« FAQ de Bjarne Stroustrup – Le C est-il un sous-ensemble du C++ ? » . Archivé de l'original le 6 février 2016. Consulté le 5 mai 2014 .
« C9X – La nouvelle norme C » . Archivé de l'original le 21 juin 2018. Consulté le 27 décembre 2008 .
« Prise en charge de C++0x dans GCC » . Archivé de l'original le 21 juillet 2010. Consulté le 12 octobre 2010 .
« Fonctionnalités principales du langage C++0x dans VC10 : le tableau » . Archivé de l'original le 21 août 2010. Consulté le 12 octobre 2010 .
« Clang - État des versions C++98, C++11 et C++14 » . Clang.llvm.org. 12 mai 2013. Archivé de l'original le 4 juillet 2013. Consulté le 10 juin 2013 .
 Bokil, Milind A. (2021). « Écriture de routines d'assemblage dans les programmes C/C++ et Java ». ResearchGate. Consulté le 1er avril 2025.
 Vilhena, Paulo Emílio de ; Lahav, Ori ; Vafeiadis, Viktor ; Raad, Azalea (2024). « Extension du modèle de mémoire C/C++ avec l'assemblage en ligne ». Actes de l'ACM sur les langages de programmation, vol. 8, OOPSLA2, article 309. doi:10.1145/3689749.
 Contributeurs de cppreference.com. « Déclaration ASM ». cppreference.com . Consulté le 1er avril 2025.
« Asm étendu (utilisation de la collection de compilateurs GNU) » . Documentation en ligne de GCC . Projet GNU . Consulté le 1er avril 2025 .
 Intel Corporation. « Assemblage en ligne ». Guide du développeur et référence du compilateur Intel® C++ Classic , version 2021.9. Consulté le 1er avril 2025.
 IBM. « Instructions d'assemblage en ligne (extension IBM) ». Documentation IBM . Consulté le 1er avril 2025.
« Présentation de l'assembleur en ligne » . Microsoft Learn . Microsoft . Consulté le 1er avril 2025 .
« Interfaçage de C et C++ avec le langage assembleur » . Texas Instruments . Texas Instruments Incorporated. 23 février 2025. Consulté le 1er avril 2025 .
« Liaison C++ vers ASM dans GCC » . Wiki OSDev . Consulté le 1er avril 2025 .
Lectures complémentaires
Abrahams, David ; Gurtovoy, Aleksey (2005). Métaprogrammation de modèles C++ : concepts, outils et techniques issus de Boost et au-delà . Addison-Wesley. ISBN 0-321-22725-5.
Alexandrescu, Andrei (2001). Conception C++ moderne : Programmation générique et modèles de conception appliqués . Addison-Wesley. ISBN. 0-201-70431-5.
Alexandrescu, Andrei ; Sutter, Herb (2004). Normes de conception et de codage C++ : règles et directives pour l'écriture de programmes . Addison-Wesley. ISBN 0-321-11358-6.
Becker, Pete (2006). Les extensions de la bibliothèque standard C++ : tutoriel et référence . Addison-Wesley. ISBN. 0-321-41299-0.
Cassé, Frank (2010). Annotations C++ . Université de Groningue. ISBN 978-90-367-0470-0. Archivé de l'original le 28 avril 2010 . Récupéré le 28 avril 2010 .
Coplien, James O. (1994) [réédité avec corrections, année de publication originale : 1992]. C++ avancé : Styles et expressions idiomatiques de programmation . Addison-Wesley. ISBN 0-201-54855-0.
Dewhurst, Stephen C. (2005). C++ Common Knowledge : Programmation intermédiaire essentielle . Addison-Wesley. ISBN. 0-321-32192-8.
Conseil de l'industrie des technologies de l'information (15 octobre 2003). Langages de programmation – C++ (deuxième éd.). Genève : ISO/IEC. 14882:2003(E).
Josuttis, Nicolai M. (2012). La bibliothèque standard C++ : tutoriel et référence (deuxième éd.). Addison-Wesley. ISBN. 978-0-321-62321-8.
Koenig, Andrew ; Moo, Barbara E. (2000). C++ accéléré – Programmation pratique par l'exemple . Addison-Wesley. ISBN 0-201-70353-X.
Lippman, Stanley B. ; Lajoie, Josée; Moo, Barbara E. (2011). Introduction à C++ (Cinquième éd.). Addison-Wesley. ISBN 978-0-321-71411-4.
Lippman, Stanley B. (1996). Au cœur du modèle objet C++ . Addison-Wesley. ISBN. 0-201-83454-5.
Meyers, Scott (2005). Effective C++ (3e éd.). Addison-Wesley. ISBN. 0-321-33487-6.
Stroustrup, Bjarne (2013). Le langage de programmation C++ (quatrième éd.). Addison-Wesley. ISBN. 978-0-321-56384-2.
Stroustrup, Bjarne (1994). Conception et évolution de C++ . Addison-Wesley. ISBN. 0-201-54330-3.
Stroustrup, Bjarne (2014). Programmation : Principes et pratique en C++ (2e éd.). Addison-Wesley. ISBN. 978-0-321-99278-9.
Sutter, Herb (2001). C++ encore plus exceptionnel : 40 nouveaux casse-têtes d'ingénierie, problèmes de programmation et solutions . Addison-Wesley. ISBN 0-201-70434-X.
Sutter, Herb (2004). Style C++ exceptionnel . Addison-Wesley. ISBN. 0-201-76042-8.
Vandevoorde, David; Josuttis, Nicolai M. (2003). Modèles C++ : le guide complet . Addison-Wesley. ISBN 0-201-73484-2.
Liens externes
JTC1/SC22/WG21 – Groupe de travail sur la norme ISO/IEC C++
Standard C++ Foundation – une organisation à but non lucratif qui promeut l'utilisation et la compréhension du C++ standard. Bjarne Stroustrup est l'un des directeurs de l'organisation.
Mots-clés C++
Expressions C++
Priorité des opérateurs C++
C++ dans les projets frères de Wikipédia :

Médias de Commons

Citations de Wikiquote

Manuels scolaires de Wikibooks

Ressources de Wikiversité
vtet
C++
vtet
Langages de programmation
ComparaisonChronologieHistoire
AdaALGOL SimulaAPLAssembléeBASIQUE Visual Basic classique.FILETCC++C#COBOLErlang ÉlixirEn avantFortranAllerHaskellJavaJavaScript ManuscritJuliaKotlinZézayerLuaMATLABML Caml OCamlPascal Pascal ObjetPerl RakuPHPProloguePythonRRubisRouillerSQLGratterCoquillePetite conversationRapideplus...
 Listes : alphabétiqueCatégoriqueGénérationnelNon basé sur l'anglais Catégorie
vtet
Normes de l'Organisation internationale de normalisation (ISO)
vtet
normes CEI
Bases de données de contrôle d'autorité Modifiez ceci sur Wikidata
Catégories :C++Famille de langages de programmation AlgolFamille de langages de programmation C++Langages de programmation basés sur les classesLogiciel multiplateformeLangages de programmation de haut niveauLangages de programmation orientés objetLangages de programmation créés en 1983Langages de programmation avec une norme ISOLangages de programmation à typage statiqueLangages de programmation compilés
===================(04)======================
### [C++]
C++ ( / ˈsiːplʌsplʌs / , prononcé « C plus plus » et parfois abrégé en CPP ) est un langage de programmation de haut niveau à usage général créé par l' informaticien danois Bjarne Stroustrup . Initialement publié en 1985 comme une extension du langage de programmation C , il s'est depuis considérablement développé au fil du temps ; en 1997 , C++ possède des fonctionnalités orientées objet , génériques et fonctionnelles , en plus de fonctionnalités de manipulation de mémoire de bas niveau pour des systèmes comme les micro-ordinateurs ou pour créer des systèmes d'exploitation comme Linux ou Windows . Il est généralement implémenté comme un langage compilé , et de nombreux fournisseurs fournissent des compilateurs C++ , notamment la Free Software Foundation , LLVM , Microsoft , Intel , Embarcadero , Oracle et IBM . [ 14 ]

C++ a été conçu pour la programmation de systèmes et de logiciels embarqués , à ressources limitées et de grands systèmes, avec la performance , l'efficacité et la flexibilité d'utilisation comme points forts de sa conception. [ 15 ] C++ s'est également avéré utile dans de nombreux autres contextes, ses principaux atouts étant l'infrastructure logicielle et les applications à ressources limitées, [ 15 ] y compris les applications de bureau , les jeux vidéo , les serveurs (par exemple, le commerce électronique , la recherche sur le Web ou les bases de données ) et les applications critiques en termes de performances (par exemple, les commutateurs téléphoniques ou les sondes spatiales ). [ 16 ]

Français C++ est normalisé par l' Organisation internationale de normalisation (ISO), la dernière version de la norme ayant été ratifiée et publiée par l'ISO en octobre 2024 sous le nom d' ISO/IEC 14882:2024 (connue officieusement sous le nom de C++23 ). [ 17 ] Le langage de programmation C++ a été initialement normalisé en 1998 sous le nom d'ISO/IEC 14882:1998 , qui a ensuite été modifié par les normes C++03 , C++11 , C ++14 , C++17 et C++20 . La norme C++23 actuelle les remplace par de nouvelles fonctionnalités et une bibliothèque standard élargie . Avant la normalisation initiale en 1998, C++ a été développé par Stroustrup aux Bell Labs depuis 1979 comme une extension du langage C ; il voulait un langage efficace et flexible similaire à C qui fournisse également des fonctionnalités de haut niveau pour l'organisation des programmes. [ 18 ] Depuis 2012, C++ suit un calendrier de publication de trois ans [ 19 ] avec C++26 comme prochaine norme prévue. [ 20 ]

Malgré son adoption généralisée, certains programmeurs notables ont critiqué le langage C++ , notamment Linus Torvalds , [ 21 ] Richard Stallman , [ 22 ] Joshua Bloch , Ken Thompson , [ 23 ] [ 24 ] [ 25 ] et Donald Knuth . [ 26 ] [ 27 ] Cela est dû en grande partie à sa gestion manuelle de la mémoire, qui le rend vulnérable aux bogues de dépassement de tampon , qui représentent un risque de sécurité. [ 28 ]

Histoire

Bjarne Stroustrup, le créateur de C++, dans son bureau d'AT&T dans le New Jersey, vers  2000
En 1979, Bjarne Stroustrup , un informaticien danois , a commencé à travailler sur «C avec classes , prédécesseur de C++. [ 29 ] La création d'un nouveau langage est née de l'expérience de Stroustrup en programmation pour sa thèse de doctorat. Stroustrup a constaté que Simula possédait des fonctionnalités très utiles pour le développement de logiciels de grande envergure, mais que le langage était trop lent pour une utilisation pratique, tandis que BCPL était rapide mais trop bas niveau pour convenir au développement de logiciels de grande envergure. Lorsque Stroustrup a commencé à travailler chez AT&T Bell Labs , il a dû analyser le noyau UNIX en termes de calcul distribué . Se souvenant de son doctorat, Stroustrup a entrepris d'améliorer le langage C avec des fonctionnalités similaires à Simula. [ 30 ] Le C a été choisi pour sa polyvalence, sa rapidité, sa portabilité et sa large diffusion. Outre l'influence de C et de Simula, d'autres langages ont influencé ce nouveau langage, notamment ALGOL 68 , Ada , CLU et ML . [ citation requise ]

Initialement, le « C avec classes » de Stroustrup ajoutait des fonctionnalités au compilateur C, Cpre, notamment les classes , les classes dérivées , le typage fort , l'inlining et les arguments par défaut . [ 31 ]


Un quiz sur les fonctionnalités de C++11 donné à Paris en 2015
En 1982, Stroustrup commença à développer un successeur au C avec des classes, qu'il baptisa « C++ » ( ++opérateur d'incrémentation en C) après avoir essayé plusieurs autres noms. De nouvelles fonctionnalités furent ajoutées, notamment les fonctions virtuelles , la surcharge des noms de fonctions et des opérateurs , les références , les constantes, l'allocation de mémoire libre sécurisée (nouveau/suppression), une vérification de type améliorée et des commentaires sur une seule ligne de style BCPL avec deux barres obliques ( //). De plus, Stroustrup développa un nouveau compilateur autonome pour C++, Cfront .

En 1984, Stroustrup a implémenté la première bibliothèque d'entrée/sortie de flux. L'idée de fournir un opérateur de sortie plutôt qu'une fonction de sortie nommée a été suggérée par Doug McIlroy [ 2 ] (qui avait précédemment suggéré les tubes Unix ).

En 1985, la première édition du langage de programmation C++ a été publiée, qui est devenue la référence définitive pour le langage, car il n'y avait pas encore de norme officielle. [ 32 ] La première implémentation commerciale de C++ a été publiée en octobre de la même année. [ 29 ]

En 1989, C++ 2.0 a été publié, suivi par la deuxième édition mise à jour du langage de programmation C++ en 1991. [ 33 ] Les nouvelles fonctionnalités de la version 2.0 comprenaient l'héritage multiple, les classes abstraites, les fonctions membres statiques, les fonctions membres const et les membres protégés. En 1990, le Manuel de référence C++ annoté a été publié. Ce travail est devenu la base de la future norme. Les ajouts de fonctionnalités ultérieurs comprenaient les modèles , les exceptions , les espaces de noms , les nouveaux casts et un type booléen .

En 1998, C++98 a été publié, standardisant le langage, et une mise à jour mineure ( C++03 ) a été publiée en 2003.

Après C++98, le C++ a évolué relativement lentement jusqu'à la publication, en 2011, de la norme C++11 , qui ajoutait de nombreuses nouvelles fonctionnalités, élargissait la bibliothèque standard et offrait davantage de fonctionnalités aux programmeurs C++. Après une mise à jour mineure de C++14 publiée en décembre 2014, divers ajouts ont été introduits dans C++17 . [ 34 ] Après sa finalisation en février 2020, [ 35 ] un projet de norme C++20 a été approuvé le 4 septembre 2020 et officiellement publié le 15 décembre 2020. [ 36 ] [ 37 ]

Le 3 janvier 2018, Stroustrup a été annoncé comme le lauréat 2018 du prix Charles Stark Draper d'ingénierie, « pour la conceptualisation et le développement du langage de programmation C++ ». [ 38 ]

En décembre 2022, C++ se classait troisième au classement TIOBE , surpassant Java pour la première fois dans l'histoire de l'indice. En novembre 2024 , le langage se classait deuxième après Python , Java étant troisième. [ 39 ]

Étymologie
Selon Stroustrup, « le nom signifie la nature évolutive des changements par rapport à C. » [ 40 ] Ce nom est attribué à Rick Mascitti (mi-1983) [ 31 ] et a été utilisé pour la première fois en décembre 1983. Lorsque Mascitti a été interrogé de manière informelle en 1992 sur le nom, il a indiqué qu'il avait été donné dans un esprit ironique . Le nom vient de ++ l'opérateur de C (qui incrémente la valeur d'une variable ) et d'une convention de nommage courante consistant à utiliser « + » pour indiquer un programme informatique amélioré.

Au cours de la période de développement du C++, le langage a été appelé « nouveau C » et « C avec classes » [ 31 ] [ 41 ] avant d'acquérir son nom définitif.

Philosophie
Tout au long de la vie de C++, son développement et son évolution ont été guidés par un ensemble de principes : [ 30 ]

Il doit être motivé par des problèmes réels et ses fonctionnalités doivent être immédiatement utiles dans les programmes du monde réel.
Chaque fonctionnalité doit être implémentable (avec une manière raisonnablement évidente de le faire).
Les programmeurs devraient être libres de choisir leur propre style de programmation, et ce style devrait être entièrement pris en charge par C++.
Autoriser une fonctionnalité utile est plus important que d’empêcher toute mauvaise utilisation possible de C++.
Il devrait fournir des moyens d’organiser les programmes en parties distinctes et bien définies, ainsi que des moyens de combiner des parties développées séparément.
Aucune violation implicite du système de types (mais autorise les violations explicites, c'est-à-dire celles explicitement demandées par le programmeur).
Les types créés par l’utilisateur doivent bénéficier du même support et des mêmes performances que les types intégrés.
Les fonctionnalités inutilisées ne doivent pas avoir d'impact négatif sur les exécutables créés (par exemple, en réduisant les performances).
Il ne devrait y avoir aucun langage sous C++ (à l'exception du langage assembleur ).
C++ devrait fonctionner aux côtés d’autres langages de programmation existants , plutôt que de favoriser son propre environnement de programmation séparé et incompatible .
Si l’intention du programmeur est inconnue, permettez-lui de la spécifier en fournissant un contrôle manuel.
Standardisation
Articles principaux : C++03 , C++11 , C++14 , C++17 , C++20 , C++23 et C++26
Normes C++
Année	Norme ISO/CEI	Nom informel
1998	14882:1998 [ 42 ]	C++98
2003	14882:2003 [ 43 ]	C++03
2011	14882:2011 [ 44 ]	C++11 , C++0x
2014	14882:2014 [ 45 ]	C++14 , C++1y
2017	14882:2017 [ 46 ]	C++17 , C++1z
2020	14882:2020 [ 47 ]	C++20 , C++2a
2024	14882:2024 [ 17 ]	C++23 , C++2b
À déterminer		C++26 , C++2c
Le C++ est normalisé par un groupe de travail ISO appelé JTC1/SC22/WG21 . À ce jour, sept révisions de la norme C++ ont été publiées et la prochaine révision, C++26 , est actuellement en cours .


Scène lors de la réunion du comité des normes C++ à Stockholm en 1996
En 1998, le groupe de travail ISO a normalisé C++ pour la première fois sous la norme ISO/IEC 14882:1998 , plus connue sous le nom informel de C++98 . En 2003, il a publié une nouvelle version de la norme C++, appelée ISO/IEC 14882:2003 , qui corrigeait les problèmes identifiés dans C++98.

La prochaine révision majeure de la norme a été appelée de manière informelle « C++0x », mais elle n'a été publiée qu'en 2011. [ 48 ] C++11 (14882:2011) comprenait de nombreux ajouts au langage de base et à la bibliothèque standard. [ 44 ]

En 2014, C++14 (également connu sous le nom de C++1y) a été publié comme une petite extension de C++11, comportant principalement des corrections de bogues et de petites améliorations. [ 49 ] Les procédures de vote du projet de norme internationale se sont achevées à la mi-août 2014. [ 50 ]

Après C++14, une révision majeure C++17 , connue officieusement sous le nom de C++1z, a été achevée par le comité ISO C++ à la mi-juillet 2017 et a été approuvée et publiée en décembre 2017. [ 51 ]

Dans le cadre du processus de normalisation, l’ISO publie également des rapports et des spécifications techniques :

ISO/IEC TR 18015:2006 [ 52 ] sur l'utilisation du C++ dans les systèmes embarqués et sur les implications en termes de performances des fonctionnalités du langage et de la bibliothèque C++,
ISO/IEC TR 19768:2007 [ 53 ] (également connu sous le nom de Rapport technique C++ 1 ) sur les extensions de bibliothèque principalement intégrées dans C++11 ,
ISO/IEC TR 29124:2010 [ 54 ] sur les fonctions mathématiques spéciales, intégrées dans C++17 ,
ISO/IEC TR 24733:2011 [ 55 ] sur l'arithmétique décimale à virgule flottante ,
ISO/IEC TS 18822:2015 [ 56 ] sur la bibliothèque de systèmes de fichiers standard, intégrée dans C++17 ,
ISO/IEC TS 19570:2015 [ 57 ] sur les versions parallèles des algorithmes de la bibliothèque standard, intégrés dans C++17 ,
ISO/IEC TS 19841:2015 [ 58 ] sur la mémoire transactionnelle logicielle ,
ISO/IEC TS 19568:2015 [ 59 ] sur un nouvel ensemble d'extensions de bibliothèque, dont certaines sont déjà intégrées dans C++17 ,
ISO/IEC TS 19217:2015 [ 60 ] sur les concepts C++ , intégrés dans C++20 ,
ISO/IEC TS 19571:2016 [ 61 ] sur les extensions de bibliothèque pour la concurrence, dont certaines sont déjà intégrées dans C++20 ,
ISO/IEC TS 19568:2017 [ 62 ] sur un nouvel ensemble d'extensions de bibliothèque à usage général,
ISO/IEC TS 21425:2017 [ 63 ] sur les extensions de bibliothèque pour les plages, intégrées dans C++20 ,
ISO/IEC TS 22277:2017 [ 64 ] sur les coroutines, intégrées dans C++20 ,
ISO/IEC TS 19216:2018 [ 65 ] sur la bibliothèque réseau,
ISO/IEC TS 21544:2018 [ 66 ] sur les modules, intégrés dans C++20 ,
ISO/IEC TS 19570:2018 [ 67 ] sur un nouvel ensemble d'extensions de bibliothèque pour le parallélisme
ISO/IEC TS 23619:2021 [ 68 ] sur les nouvelles extensions pour la programmation réflexive (réflexion),
ISO/IEC TS 9922:2024 [ 69 ] sur un nouvel ensemble d'extensions de concurrence, et
ISO/IEC TS 19568:2024 [ 70 ] sur un autre nouvel ensemble d'extensions de bibliothèque.
D’autres spécifications techniques sont en cours de développement et en attente d’approbation.

Langue
Article principal : Syntaxe C++
Le langage C++ comporte deux composantes principales : un mappage direct des fonctionnalités matérielles fournies principalement par le sous-ensemble C, et des abstractions sans surcharge basées sur ces mappages. Stroustrup décrit le C++ comme « un langage de programmation d'abstraction léger [conçu] pour construire et utiliser des abstractions efficaces et élégantes » ; [ 15 ] et « offrir à la fois accès au matériel et abstraction est la base du C++. Son efficacité le distingue des autres langages. » [ 71 ]

Le C++ hérite de la majeure partie de la syntaxe du C. Un programme « Hello World » conforme à la norme C est également un programme « Hello World » C++ valide. Voici la version de Bjarne Stroustrup du programme « Hello World » , qui utilise la fonctionnalité de flux de la bibliothèque standard C++ pour écrire un message sur la sortie standard : [ 72 ] [ 73 ] [ note 2 ]

#include <iostream>

int main ()
{
    std :: cout << "Bonjour tout le monde ! \n " ;
}
Bibliothèque standard

Le projet de norme « Working Paper » qui a été approuvé sous le nom de C++98 ; la moitié de sa taille était consacrée à la bibliothèque standard C++.
Article principal : Bibliothèque standard C++
La norme C++ se compose de deux parties : le langage principal et la bibliothèque standard. Les programmeurs C++ s'attendent à la présence de cette dernière sur chaque implémentation majeure de C++ ; elle inclut des types d'agrégats ( vecteurs , listes, cartes, ensembles, files d'attente, piles, tableaux, tuples), des algorithmes (find, for_each , binary_search , random_shuffle, etc.), des fonctions d'entrée/sortie ( iostream , pour la lecture et l'écriture sur la console et les fichiers), une bibliothèque de systèmes de fichiers, la prise en charge de la localisation, des pointeurs intelligents pour la gestion automatique de la mémoire, la prise en charge des expressions régulières , une bibliothèque multithreading , la prise en charge des atomes (permettant la lecture ou l'écriture d'une variable par un seul thread à la fois sans synchronisation externe), des utilitaires de temps (mesure, obtention de l'heure actuelle, etc.), un système de conversion des rapports d'erreurs n'utilisant pas d'exceptions C++ en exceptions C++, un générateur de nombres aléatoires et une version légèrement modifiée de la bibliothèque standard C (pour la rendre compatible avec le système de types C++).

Une grande partie de la bibliothèque C++ repose sur la bibliothèque de modèles standard (STL). Parmi les outils utiles fournis par la STL figurent des conteneurs sous forme de collections d'objets (tels que des vecteurs et des listes ), des itérateurs offrant un accès aux conteneurs de type tableau, et des algorithmes effectuant des opérations telles que la recherche et le tri.

De plus, des (multi)maps ( tableaux associatifs ) et des (multi)sets sont fournis, exportant tous des interfaces compatibles. Par conséquent, l'utilisation de modèles permet d'écrire des algorithmes génériques fonctionnant avec n'importe quel conteneur ou sur n'importe quelle séquence définie par des itérateurs.

Comme en C, les fonctionnalités de la bibliothèque sont accessibles via la #include directive « include un en-tête standard » . La bibliothèque standard C++ fournit 105 en-têtes standard, dont 27 sont obsolètes. Avec l'introduction des modules en C++20 , ces en-têtes sont accessibles via import, et en C++23 , l'intégralité de la bibliothèque standard peut désormais être importée directement en tant que module, via . Actuellement, la bibliothèque standard C++ fournit deux modules, et (un module de compatibilité pour lequel exporte les fonctionnalités de la bibliothèque standard C dans l'espace de noms global). import std;stdstd.compatstd

La norme intègre la STL, initialement conçue par Alexander Stepanov , qui a expérimenté des algorithmes et des conteneurs génériques pendant de nombreuses années. En commençant avec le C++, il a finalement trouvé un langage permettant de créer des algorithmes génériques (par exemple, le tri STL) encore plus performants que, par exemple, la bibliothèque standard C qsort, grâce à des fonctionnalités C++ comme l'utilisation de l'inlining et de la liaison à la compilation au lieu de pointeurs de fonction. La norme ne la désigne pas comme « STL », car elle n'en est qu'une partie, mais ce terme reste largement utilisé pour la distinguer du reste de la bibliothèque standard (flux d'entrée/sortie, internationalisation, diagnostics, sous-ensemble de la bibliothèque C, etc.). [ 74 ]

La plupart des compilateurs C++, et tous les principaux, fournissent une implémentation conforme aux normes de la bibliothèque standard C++.

Directives de base C++
Les C++ Core Guidelines [ 75 ] sont une initiative menée par Bjarne Stroustrup, l'inventeur du C++, et Herb Sutter, le coordinateur et président du groupe de travail ISO C++, pour aider les programmeurs à écrire du « C++ moderne » en utilisant les meilleures pratiques pour les normes de langage C++11 et plus récentes, et pour aider les développeurs de compilateurs et d'outils de vérification statique à créer des règles pour détecter les mauvaises pratiques de programmation.

L'objectif principal est d'écrire de manière efficace et cohérente du C++ sûr en termes de type et de ressources.

Les lignes directrices de base ont été annoncées [ 76 ] lors du discours d’ouverture du CPPCon 2015.

Les lignes directrices sont accompagnées de la bibliothèque de support des lignes directrices (GSL), [ 77 ] une bibliothèque d'en-têtes uniquement de types et de fonctions pour implémenter les lignes directrices de base et des outils de vérification statique pour appliquer les règles des lignes directrices. [ 78 ]

Compatibilité
Afin de donner plus de liberté aux fournisseurs de compilateurs, le comité de normalisation C++ a décidé de ne pas imposer l'implémentation de la modification des noms , de la gestion des exceptions et d'autres fonctionnalités spécifiques à l'implémentation. L'inconvénient de cette décision est que le code objet produit par différents compilateurs est susceptible d'être incompatible. Il existe cependant des tentatives de normalisation des compilateurs pour des machines ou des systèmes d'exploitation spécifiques . Par exemple, l'ABI Itanium C++ est indépendante du processeur (malgré son nom) et est implémentée par GCC et Clang. [ 79 ]

Avec C
Article principal : Compatibilité de C et C++
Le C++ est souvent considéré comme un sur-ensemble du C , mais ce n'est pas tout à fait vrai. [ 80 ] La plupart du code C peut facilement être compilé correctement en C++, mais il existe quelques différences qui rendent certains codes C valides invalides ou se comportent différemment en C++. Par exemple, le C autorise la conversion implicite de vers d'autres types de pointeurs, mais pas le C++ (pour des raisons de sécurité des types). De plus, le C++ définit de nombreux nouveaux mots-clés, tels que et , qui peuvent être utilisés comme identifiants (par exemple, des noms de variables) dans un programme C. void*newclass

Français Certaines incompatibilités ont été supprimées par la révision de 1999 de la norme C ( C99 ), qui prend désormais en charge les fonctionnalités C++ telles que les commentaires de ligne ( //) et les déclarations mélangées au code. D'autre part, C99 a introduit un certain nombre de nouvelles fonctionnalités que C++ ne prenait pas en charge et qui étaient incompatibles ou redondantes en C++, telles que les tableaux de longueur variable , les types de nombres complexes natifs (cependant, la classe de la bibliothèque standard C++ fournit des fonctionnalités similaires, bien que non compatibles avec le code), les initialiseurs désignés, les littéraux composés et le mot-clé. [ 81 ] Certaines des fonctionnalités introduites par C99 ont été incluses dans la version ultérieure de la norme C++, C++11 (parmi celles qui n'étaient pas redondantes). [ 82 ] [ 83 ] [ 84 ] Cependant, la norme C++11 introduit de nouvelles incompatibilités, telles que l'interdiction d'assigner un littéral de chaîne à un pointeur de caractère, ce qui reste valide en C. std::complexrestrict

Pour mélanger du code C et du code C++, toute déclaration ou définition de fonction appelée ou utilisée à la fois en C et en C++ doit être déclarée avec une liaison C, en la plaçant dans un bloc. Une telle fonction ne doit pas dépendre de fonctionnalités dépendant de la modification des noms (c'est-à-dire de la surcharge de fonction). extern "C" {/*...*/}

Assemblage en ligne
Les programmes développés en C ou C++ utilisent souvent l'assembleur en ligne pour tirer parti de ses fonctionnalités de bas niveau, de sa vitesse supérieure et de son contrôle amélioré par rapport aux langages de programmation de haut niveau [ 85 ] [ 86 ] lorsque l'optimisation des performances est essentielle. C++ prend en charge l'intégration du langage assembleur à l'aide de déclarations asm [ 87 ] , mais la compatibilité de l'assembleur en ligne varie considérablement entre les compilateurs et les architectures. Contrairement aux fonctionnalités des langages de haut niveau tels que Python ou Java , le code assembleur dépend fortement du processeur sous-jacent et de l'implémentation du compilateur.

Variations entre les compilateurs
Différents compilateurs C++ implémentent l'assemblage en ligne de manières distinctes.

GCC ( GNU Compiler Collection ) et Clang [ 88 ] : Utilisent la syntaxe d'assemblage en ligne étendue de GCC. L'utilisation __asm__du mot-clé plutôt que asmde lors de l'écriture de code pouvant être compilé avec les options et permet de spécifier les opérandes d'entrée/sortie et les registres écrasés. Cette approche est largement adoptée, notamment par les compilateurs Intel [ 89 ] et IBM [ 90 ] .-ansi-std
MSVC ( Microsoft Visual C++ ) : l'assembleur en ligne est intégré au compilateur. Auparavant, l'assembleur en ligne était pris en charge via le __asmmot-clé, mais cette prise en charge a été supprimée en mode 64 bits, nécessitant des modules .asm distincts [ 91 ] .
TI ARM Clang et compilateurs embarqués [ 92 ] : Certains compilateurs de systèmes embarqués, comme TI Arm Clang de Texas Instruments, autorisent l'assemblage en ligne mais imposent des règles plus strictes pour éviter les conflits avec les conventions de registre et les conventions d'appel.
Interopérabilité entre C++ et Assembleur
C++ fournit deux méthodes principales d’intégration du code ASM.

1. Fichiers d'assemblage autonomes – Le code d'assemblage est écrit séparément et lié au code C++. [ 93 ]

2. Assemblage en ligne – Le code assembleur est intégré au code C++ à l’aide d’extensions spécifiques au compilateur.

Exemple de code pour la compatibilité ASM

Lors de l'appel d'une fonction d'assemblage à partir de C++, utilisez pour empêcher la modification du nom C++.extern "C"
//main.cpp
importer std ;

extern "C" int add_asm ( int , int ); // Déclarer la fonction d'assemblage

int main () {
    int résultat = add_asm ( 5 , 7 );
    std :: println ( "Résultat de l'ASM : {}" , result );
    renvoie 0 ;
}
#code asm utilisant l'architecture RISC-V
. section . texte
. global add_asm

add_asm :
    ajouter a0 , a0 , a1 # Ajouter le premier argument ( a0 ) et le deuxième argument ( a1 ), stocker dans a0
    ret # Retour ( a0 contient la valeur de retour )
Les variables globales dans l'assembly doivent être déclarées comme externen C++ et marquées .globaldans l'assembly.
// main.cpp
importer std ;

extern "C" int global_var ; // Déclarer une variable globale à partir de l'assembly

int main () {
    std :: println ( "Variable globale de l'ASM : {}" , global_var );
    renvoie 0 ;
}
#asm utilisant l'architecture RISC-V
. section . données
. global global_var
. aligner 4
global_var :
    . mot 42 # Définir la valeur entière
L'assemblage en ligne permet d'intégrer ASM directement dans C++ à l'aide du asmmot-clé.
//main.cpp (en utilisant le compilateur GCC/CLANG)
importer std ;

int main () {
    int x = 10 , y = 20 , somme ;

    asm volatile (
        "ajouter %0, %1, %2"
        : "=r" ( sum ) // Opérande de sortie (stocké dans un registre)
        : "r" ( x ), "r" ( y ) // Opérandes d'entrée (stockés dans des registres)
    );

    std :: println ( "Somme en utilisant ASM en ligne : {}" , sum );
    renvoie 0 ;
}
Voir aussi
icône	Portail de programmation informatique
Carbone (langage de programmation)
Comparaison des langages de programmation
Liste des compilateurs C++
Aperçu du C++
Catégorie : Bibliothèques C++
Notes de bas de page
 Pour l'idée des coroutines sans pile C++20.
 Ce code est directement copié de la page d'errata de Bjarne Stroustrup (p. 633). Il aborde l'utilisation de'\n'plutôt questd::endl. Voir également « Puis-je écrire « void main() » ? » (archivé le 2 juillet 2020 sur Wayback Machine) pour une explication de l'implicitereturn 0;de lamainfonction. Ce retour implicite n'est pas disponible dans les autres fonctions.
Références
« Présentation des modules en C++ » . Microsoft. 24 avril 2023.
 Stroustrup, Bjarne (1996). « Une histoire du C++ : 1979-1991 ».Histoire des langages de programmation --- II.ACM. pp. 699–769.doi: 10.1145/234286.1057836 .
 Stroustrup, Bjarne (16 décembre 2021). « C++20 : Atteindre les objectifs du C++ - Bjarne Stroustrup - CppCon 2021 » . CppCon. Archivé de l'original le 30 décembre 2021. Consulté le 30 décembre 2021 .
 Stroustrup, Bjarne (12 juin 2020). « Prospérer dans un monde saturé et en constante évolution : C++ 2006–2020 » . Actes de l'ACM sur les langages de programmation . 4 (HOPL). Association for Computing Machinery (ACM) : 1– 168. doi : 10.1145/3386320 . ISSN : 2475-1421 . S2CID : 219603741 .
 Naugler, David (mai 2007). « C# 2.0 pour les programmeurs C++ et Java : atelier de conférence ». Journal of Computing Sciences in Colleges . 22 (5). Bien que C# ait été fortement influencé par Java, il l'a également été par C++ et doit être considéré comme un descendant à la fois de C++ et de Java.
« Spécifications de la chapelle (Remerciements) » (PDF) . Cray Inc., 1er octobre 2015. Archivé (PDF) de l'original le 24 juin 2018. Consulté le 14 janvier 2016 .
 Fogus, Michael. « Rich Hickey Q&R » . Code Quarterly . Archivé de l'original le 11 janvier 2017. Consulté le 11 janvier 2017 .
 Harry. H. Chaudhary (28 juillet 2014). « Décrypter l'entretien de programmation Java : plus de 2 000 questions/réponses d'entretien Java » . Archivé de l'original le 27 mai 2021. Consulté le 29 mai 2016 .
 Roger Poon (1er mai 2017). « Mise à l'échelle de JS++ : abstraction, performances et lisibilité » . Archivé de l'original le 11 mai 2020. Consulté le 21 avril 2020 .
« L'évolution d'un langage d'extension : une histoire de Lua » . www.lua.org . Consulté le 4 janvier 2023 .
« FAQ sur le langage de programmation Nim » . Archivé de l'original le 11 juillet 2017. Consulté le 21 avril 2020 .
« 9. Classes — Documentation Python 3.6.4 » . docs.python.org . Archivé de l'original le 23 octobre 2012 . Consulté le 9 janvier 2018 .
« Influences – La référence Rust » . doc.rust-lang.org . Consulté le 4 janvier 2023 .
Stroustrup, Bjarne (1997). « 1 ». Le langage de programmation C++ (3e éd.). Addison-Wesley. ISBN 0-201-88954-4. OCLC  59193992 .
 Stroustrup, B. (6 mai 2014).« Lecture: The essence of C++. University of Edinburgh ». YouTube .Archivéde l'original le 28 avril 2015. Consulté le 12 juin 2015.
 Stroustrup, Bjarne (17 février 2014). « Applications C++ » . stroustrup.com . Archivé de l'original le 4 avril 2021. Consulté le 5 mai 2014 .
 « ISO/IEC 14882:2024 ». Organisation internationale de normalisation. Consulté le 21 octobre 2020.
« Page d'accueil de Bjarne Stroustrup » . www.stroustrup.com . Archivé de l'original le 14 mai 2019. Consulté le 15 mai 2013 .
« Calendrier IS C++ » (PDF) . Archivé (PDF) de l'original le 10 août 2020. Consulté le 9 août 2020 .
« C++ ; Vers où il va » . Archivé de l'original le 3 décembre 2018. Consulté le 3 décembre 2018 .
« Re : [RFC] Convertir builin-mailinfo.c pour utiliser The Better String Library » (Liste de diffusion). 6 septembre 2007. Archivé de l'original le 8 mars 2021. Consulté le 31 mars 2015 .
« Re : Des efforts pour attirer plus d'utilisateurs ? » (Liste de diffusion). 12 juillet 2010. Archivé de l'original le 21 mars 2015. Consulté le 31 mars 2015 .
 Andrew Binstock (18 mai 2011). « Dr. Dobb's : Entretien avec Ken Thompson » . Dr. Dobb's . Archivé de l'original le 13 mars 2014. Consulté le 7 février 2014 .
 Peter Seibel (16 septembre 2009). Codeurs au travail : Réflexions sur l'art de programmer . Apress. pp.  475–476 . ISBN 978-1-4302-1948-4. Archivé de l'original le 1er décembre 2019 . Récupéré le 9 novembre 2017 .
« C++ dans Coders at Work » . 16 octobre 2009. Archivé de l'original le 10 novembre 2017. Consulté le 9 novembre 2017 .
« Entretien avec Donald Knuth » . Dr. Dobb's . Archivé de l'original le 8 mars 2021. Consulté le 18 juillet 2021 .
« (La)TeX Navigator » . Archivé de l'original le 20 novembre 2017. Consulté le 10 novembre 2017 .
 Claburn, Thomas (2 mars 2025). « Le créateur du C++ appelle à l'aide pour défendre son langage de programmation contre les « attaques graves »" . Le Registre . Récupéré le 5 mars 2025 .
 Stroustrup, Bjarne (7 mars 2010).« FAQ de Bjarne Stroustrup : Quand le C++ a-t-il été inventé ? ».stroustrup.com.Archivéde l'original le 6 février 2016. Consulté le 16 septembre 2010.
 Stroustrup, Bjarne.« Évolution d'un langage dans et pour le monde réel : C++ 1991-2006 »(PDF).Archivé(PDF)de l'original le 20 novembre 2007.Consulté le 14 août 2013.
 Stroustrup, Bjarne.« Histoire du C++ : 1979-1991 »(PDF).Archivé(PDF)de l'original le 2 février 2019.Consulté le 18 juillet 2013.
 Stroustrup, Bjarne. « Le langage de programmation C++ » (première éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Stroustrup, Bjarne. « Le langage de programmation C++ » (deuxième éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Sutter, Herb (30 juin 2016). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Oulu) » . herbsutter.com . Archivé de l'original le 8 octobre 2016. La prochaine norme après C++17 sera C++20.
 Dusíková, Hana (6 novembre 2019). « N4817 : Invitation et informations à la réunion de Prague 2020 » (PDF) . Archivé (PDF) de l'original le 29 décembre 2019. Consulté le 13 février 2020 .
« État actuel » . isocpp.org . Archivé de l'original le 8 septembre 2020. Consulté le 7 septembre 2020 .
« C++20 approuvé – Herb Sutter » . isocpp.org . Archivé de l'original le 11 septembre 2020. Consulté le 8 septembre 2020 .
« Le pionnier de l'informatique Bjarne Stroustrup recevra le prix Charles Stark Draper d'ingénierie 2018 » (communiqué de presse). Académie nationale d'ingénierie. 3 janvier 2018. Archivé de l'original le 3 janvier 2018. Consulté le 14 décembre 2021 .
 TIOBE (novembre 2024). « Indice TIOBE de novembre 2024 » . TIOBE.com . Société TIOBE. Archivé de l'original le 18 novembre 2024. Consulté le 18 novembre 2024 .
« FAQ de Bjarne Stroustrup – D'où vient le nom « C++ » ? » . Archivé de l'original le 6 février 2016. Consulté le 16 janvier 2008 .
« C pour les programmeurs C++ » . Université Northeastern . Archivé de l'original le 17 novembre 2010. Consulté le 7 septembre 2015 .
« ISO/CEI 14882:1998 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2017. Consulté le 23 novembre 2018 .
« ISO/CEI 14882:2003 » . Organisation internationale de normalisation. Archivé de l'original le 13 août 2021. Consulté le 23 novembre 2018 .
 « ISO/IEC 14882:2011 ». Organisation internationale de normalisation.Archivéde l'original le 27 mai 2016.Consulté le 23 novembre 2018.
« ISO/IEC 14882:2014 » . Organisation internationale de normalisation. Archivé de l'original le 29 avril 2016. Consulté le 23 novembre 2018 .
« ISO/IEC 14882:2017 » . Organisation internationale de normalisation. Archivé de l'original le 29 janvier 2013. Consulté le 2 décembre 2017 .
« ISO/IEC 14882:2020 » . Organisation internationale de normalisation. Archivé de l'original le 16 décembre 2020. Consulté le 16 décembre 2020 .
« Nous disposons d'une norme internationale : C++0x est approuvé à l'unanimité . » Sutter's Mill . 12 août 2011. Archivé de l'original le 28 juin 2018. Consulté le 23 novembre 2018 .
« L'avenir du C++ » . Archivé de l'original le 23 octobre 2018. Consulté le 23 novembre 2018 via channel9.msdn.com.
« Nous avons C++14 ! : C++ standard » . isocpp.org . Archivé de l'original le 19 août 2014 . Consulté le 19 août 2014 .
 Sutter, Herb (15 juillet 2017). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Toronto) » . Archivé de l'original le 6 août 2017. Consulté le 4 août 2017 .
« ISO/IEC TR 18015:2006 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 19768:2007 » . Organisation internationale de normalisation. Archivé de l'original le 4 mars 2016. Consulté le 15 février 2019 .
« ISO/IEC TR 29124:2010 » . Organisation internationale de normalisation. Archivé de l'original le 12 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 24733:2011 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 18822:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19841:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19217:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19571:2016 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21425:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 22277:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19216:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21544:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 23619:2021 » . Organisation internationale de normalisation. Archivé de l'original le 15 décembre 2018. Consulté le 11 octobre 2021 .
« ISO/IEC TS 9922:2024 » . Organisation internationale de normalisation. Archivé de l'original le 1er avril 2025. Consulté le 1er avril 2025 .
« ISO/IEC TS 19568:2024 » . Organisation internationale de normalisation. Archivé de l'original le 25 février 2025. Consulté le 1er avril 2025 .
 B. Stroustrup (interviewé par Sergio De Simone) (30 avril 2015). « Stroustrup : Réflexions sur C++17 - Une interview » . Archivé de l'original le 8 juillet 2015. Consulté le 8 juillet 2015 .
 Stroustrup, Bjarne (2000). Le langage de programmation C++ (éd. spéciale). Addison-Wesley. p. 46. ISBN 0-201-70073-5.
 Stroustrup, Bjarne. « Problèmes en suspens concernant le langage de programmation C++ (3e édition) » . Archivé de l'original le 5 mai 2014. Consulté le 5 mai 2014 .
 Graziano Lo Russo (2008). « Entretien avec A. Stepanov » . stlport.org . Archivé de l'original le 4 mars 2009. Consulté le 8 octobre 2015 .
« Directives C++ Core » . isocpp.github.io . Archivé de l'original le 16 février 2020 . Consulté le 9 février 2020 .
« Bjarne Stroustrup annonce les directives de base du C++ : C++ standard » . isocpp.org . Archivé de l'original le 11 mai 2020. Consulté le 31 mars 2020 .
« microsoft/GSL » . 18 juillet 2021. Archivé de l'original le 18 juillet 2021. Consulté le 18 juillet 2021 via GitHub.
« Utilisation des vérificateurs des directives de base C++ » . Microsoft Learn . Archivé de l'original le 13 août 2021. Consulté le 31 mars 2020 .
« Résumé de l'ABI C++ » . 20 mars 2001. Archivé de l'original le 10 juillet 2018. Consulté le 30 mai 2006 .
« FAQ de Bjarne Stroustrup – Le C est-il un sous-ensemble du C++ ? » . Archivé de l'original le 6 février 2016. Consulté le 5 mai 2014 .
« C9X – La nouvelle norme C » . Archivé de l'original le 21 juin 2018. Consulté le 27 décembre 2008 .
« Prise en charge de C++0x dans GCC » . Archivé de l'original le 21 juillet 2010. Consulté le 12 octobre 2010 .
« Fonctionnalités principales du langage C++0x dans VC10 : le tableau » . Archivé de l'original le 21 août 2010. Consulté le 12 octobre 2010 .
« Clang - État des versions C++98, C++11 et C++14 » . Clang.llvm.org. 12 mai 2013. Archivé de l'original le 4 juillet 2013. Consulté le 10 juin 2013 .
 Bokil, Milind A. (2021). « Écriture de routines d'assemblage dans les programmes C/C++ et Java ». ResearchGate. Consulté le 1er avril 2025.
 Vilhena, Paulo Emílio de ; Lahav, Ori ; Vafeiadis, Viktor ; Raad, Azalea (2024). « Extension du modèle de mémoire C/C++ avec l'assemblage en ligne ». Actes de l'ACM sur les langages de programmation, vol. 8, OOPSLA2, article 309. doi:10.1145/3689749.
 Contributeurs de cppreference.com. « Déclaration ASM ». cppreference.com . Consulté le 1er avril 2025.
« Asm étendu (utilisation de la collection de compilateurs GNU) » . Documentation en ligne de GCC . Projet GNU . Consulté le 1er avril 2025 .
 Intel Corporation. « Assemblage en ligne ». Guide du développeur et référence du compilateur Intel® C++ Classic , version 2021.9. Consulté le 1er avril 2025.
 IBM. « Instructions d'assemblage en ligne (extension IBM) ». Documentation IBM . Consulté le 1er avril 2025.
« Présentation de l'assembleur en ligne » . Microsoft Learn . Microsoft . Consulté le 1er avril 2025 .
« Interfaçage de C et C++ avec le langage assembleur » . Texas Instruments . Texas Instruments Incorporated. 23 février 2025. Consulté le 1er avril 2025 .
« Liaison C++ vers ASM dans GCC » . Wiki OSDev . Consulté le 1er avril 2025 .
Lectures complémentaires
Abrahams, David ; Gurtovoy, Aleksey (2005). Métaprogrammation de modèles C++ : concepts, outils et techniques issus de Boost et au-delà . Addison-Wesley. ISBN 0-321-22725-5.
Alexandrescu, Andrei (2001). Conception C++ moderne : Programmation générique et modèles de conception appliqués . Addison-Wesley. ISBN. 0-201-70431-5.
Alexandrescu, Andrei ; Sutter, Herb (2004). Normes de conception et de codage C++ : règles et directives pour l'écriture de programmes . Addison-Wesley. ISBN 0-321-11358-6.
Becker, Pete (2006). Les extensions de la bibliothèque standard C++ : tutoriel et référence . Addison-Wesley. ISBN. 0-321-41299-0.
Cassé, Frank (2010). Annotations C++ . Université de Groningue. ISBN 978-90-367-0470-0. Archivé de l'original le 28 avril 2010 . Récupéré le 28 avril 2010 .
Coplien, James O. (1994) [réédité avec corrections, année de publication originale : 1992]. C++ avancé : Styles et expressions idiomatiques de programmation . Addison-Wesley. ISBN 0-201-54855-0.
Dewhurst, Stephen C. (2005). C++ Common Knowledge : Programmation intermédiaire essentielle . Addison-Wesley. ISBN. 0-321-32192-8.
Conseil de l'industrie des technologies de l'information (15 octobre 2003). Langages de programmation – C++ (deuxième éd.). Genève : ISO/IEC. 14882:2003(E).
Josuttis, Nicolai M. (2012). La bibliothèque standard C++ : tutoriel et référence (deuxième éd.). Addison-Wesley. ISBN. 978-0-321-62321-8.
Koenig, Andrew ; Moo, Barbara E. (2000). C++ accéléré – Programmation pratique par l'exemple . Addison-Wesley. ISBN 0-201-70353-X.
Lippman, Stanley B. ; Lajoie, Josée; Moo, Barbara E. (2011). Introduction à C++ (Cinquième éd.). Addison-Wesley. ISBN 978-0-321-71411-4.
Lippman, Stanley B. (1996). Au cœur du modèle objet C++ . Addison-Wesley. ISBN. 0-201-83454-5.
Meyers, Scott (2005). Effective C++ (3e éd.). Addison-Wesley. ISBN. 0-321-33487-6.
Stroustrup, Bjarne (2013). Le langage de programmation C++ (quatrième éd.). Addison-Wesley. ISBN. 978-0-321-56384-2.
Stroustrup, Bjarne (1994). Conception et évolution de C++ . Addison-Wesley. ISBN. 0-201-54330-3.
Stroustrup, Bjarne (2014). Programmation : Principes et pratique en C++ (2e éd.). Addison-Wesley. ISBN. 978-0-321-99278-9.
Sutter, Herb (2001). C++ encore plus exceptionnel : 40 nouveaux casse-têtes d'ingénierie, problèmes de programmation et solutions . Addison-Wesley. ISBN 0-201-70434-X.
Sutter, Herb (2004). Style C++ exceptionnel . Addison-Wesley. ISBN. 0-201-76042-8.
Vandevoorde, David; Josuttis, Nicolai M. (2003). Modèles C++ : le guide complet . Addison-Wesley. ISBN 0-201-73484-2.
Liens externes
JTC1/SC22/WG21 – Groupe de travail sur la norme ISO/IEC C++
Standard C++ Foundation – une organisation à but non lucratif qui promeut l'utilisation et la compréhension du C++ standard. Bjarne Stroustrup est l'un des directeurs de l'organisation.
Mots-clés C++
Expressions C++
Priorité des opérateurs C++
C++ dans les projets frères de Wikipédia :

Médias de Commons

Citations de Wikiquote

Manuels scolaires de Wikibooks

Ressources de Wikiversité
vtet
C++
vtet
Langages de programmation
ComparaisonChronologieHistoire
AdaALGOL SimulaAPLAssembléeBASIQUE Visual Basic classique.FILETCC++C#COBOLErlang ÉlixirEn avantFortranAllerHaskellJavaJavaScript ManuscritJuliaKotlinZézayerLuaMATLABML Caml OCamlPascal Pascal ObjetPerl RakuPHPProloguePythonRRubisRouillerSQLGratterCoquillePetite conversationRapideplus...
 Listes : alphabétiqueCatégoriqueGénérationnelNon basé sur l'anglais Catégorie
vtet
Normes de l'Organisation internationale de normalisation (ISO)
vtet
normes CEI
Bases de données de contrôle d'autorité Modifiez ceci sur Wikidata
Catégories :C++Famille de langages de programmation AlgolFamille de langages de programmation C++Langages de programmation basés sur les classesLogiciel multiplateformeLangages de programmation de haut niveauLangages de programmation orientés objetLangages de programmation créés en 1983Langages de programmation avec une norme ISOLangages de programmation à typage statiqueLangages de programmation compilés
===================(05)======================
### [C++]
C++ ( / ˈsiːplʌsplʌs / , prononcé « C plus plus » et parfois abrégé en CPP ) est un langage de programmation de haut niveau à usage général créé par l' informaticien danois Bjarne Stroustrup . Initialement publié en 1985 comme une extension du langage de programmation C , il s'est depuis considérablement développé au fil du temps ; en 1997 , C++ possède des fonctionnalités orientées objet , génériques et fonctionnelles , en plus de fonctionnalités de manipulation de mémoire de bas niveau pour des systèmes comme les micro-ordinateurs ou pour créer des systèmes d'exploitation comme Linux ou Windows . Il est généralement implémenté comme un langage compilé , et de nombreux fournisseurs fournissent des compilateurs C++ , notamment la Free Software Foundation , LLVM , Microsoft , Intel , Embarcadero , Oracle et IBM . [ 14 ]

C++ a été conçu pour la programmation de systèmes et de logiciels embarqués , à ressources limitées et de grands systèmes, avec la performance , l'efficacité et la flexibilité d'utilisation comme points forts de sa conception. [ 15 ] C++ s'est également avéré utile dans de nombreux autres contextes, ses principaux atouts étant l'infrastructure logicielle et les applications à ressources limitées, [ 15 ] y compris les applications de bureau , les jeux vidéo , les serveurs (par exemple, le commerce électronique , la recherche sur le Web ou les bases de données ) et les applications critiques en termes de performances (par exemple, les commutateurs téléphoniques ou les sondes spatiales ). [ 16 ]

Français C++ est normalisé par l' Organisation internationale de normalisation (ISO), la dernière version de la norme ayant été ratifiée et publiée par l'ISO en octobre 2024 sous le nom d' ISO/IEC 14882:2024 (connue officieusement sous le nom de C++23 ). [ 17 ] Le langage de programmation C++ a été initialement normalisé en 1998 sous le nom d'ISO/IEC 14882:1998 , qui a ensuite été modifié par les normes C++03 , C++11 , C ++14 , C++17 et C++20 . La norme C++23 actuelle les remplace par de nouvelles fonctionnalités et une bibliothèque standard élargie . Avant la normalisation initiale en 1998, C++ a été développé par Stroustrup aux Bell Labs depuis 1979 comme une extension du langage C ; il voulait un langage efficace et flexible similaire à C qui fournisse également des fonctionnalités de haut niveau pour l'organisation des programmes. [ 18 ] Depuis 2012, C++ suit un calendrier de publication de trois ans [ 19 ] avec C++26 comme prochaine norme prévue. [ 20 ]

Malgré son adoption généralisée, certains programmeurs notables ont critiqué le langage C++ , notamment Linus Torvalds , [ 21 ] Richard Stallman , [ 22 ] Joshua Bloch , Ken Thompson , [ 23 ] [ 24 ] [ 25 ] et Donald Knuth . [ 26 ] [ 27 ] Cela est dû en grande partie à sa gestion manuelle de la mémoire, qui le rend vulnérable aux bogues de dépassement de tampon , qui représentent un risque de sécurité. [ 28 ]

Histoire

Bjarne Stroustrup, le créateur de C++, dans son bureau d'AT&T dans le New Jersey, vers  2000
En 1979, Bjarne Stroustrup , un informaticien danois , a commencé à travailler sur «C avec classes , prédécesseur de C++. [ 29 ] La création d'un nouveau langage est née de l'expérience de Stroustrup en programmation pour sa thèse de doctorat. Stroustrup a constaté que Simula possédait des fonctionnalités très utiles pour le développement de logiciels de grande envergure, mais que le langage était trop lent pour une utilisation pratique, tandis que BCPL était rapide mais trop bas niveau pour convenir au développement de logiciels de grande envergure. Lorsque Stroustrup a commencé à travailler chez AT&T Bell Labs , il a dû analyser le noyau UNIX en termes de calcul distribué . Se souvenant de son doctorat, Stroustrup a entrepris d'améliorer le langage C avec des fonctionnalités similaires à Simula. [ 30 ] Le C a été choisi pour sa polyvalence, sa rapidité, sa portabilité et sa large diffusion. Outre l'influence de C et de Simula, d'autres langages ont influencé ce nouveau langage, notamment ALGOL 68 , Ada , CLU et ML . [ citation requise ]

Initialement, le « C avec classes » de Stroustrup ajoutait des fonctionnalités au compilateur C, Cpre, notamment les classes , les classes dérivées , le typage fort , l'inlining et les arguments par défaut . [ 31 ]


Un quiz sur les fonctionnalités de C++11 donné à Paris en 2015
En 1982, Stroustrup commença à développer un successeur au C avec des classes, qu'il baptisa « C++ » ( ++opérateur d'incrémentation en C) après avoir essayé plusieurs autres noms. De nouvelles fonctionnalités furent ajoutées, notamment les fonctions virtuelles , la surcharge des noms de fonctions et des opérateurs , les références , les constantes, l'allocation de mémoire libre sécurisée (nouveau/suppression), une vérification de type améliorée et des commentaires sur une seule ligne de style BCPL avec deux barres obliques ( //). De plus, Stroustrup développa un nouveau compilateur autonome pour C++, Cfront .

En 1984, Stroustrup a implémenté la première bibliothèque d'entrée/sortie de flux. L'idée de fournir un opérateur de sortie plutôt qu'une fonction de sortie nommée a été suggérée par Doug McIlroy [ 2 ] (qui avait précédemment suggéré les tubes Unix ).

En 1985, la première édition du langage de programmation C++ a été publiée, qui est devenue la référence définitive pour le langage, car il n'y avait pas encore de norme officielle. [ 32 ] La première implémentation commerciale de C++ a été publiée en octobre de la même année. [ 29 ]

En 1989, C++ 2.0 a été publié, suivi par la deuxième édition mise à jour du langage de programmation C++ en 1991. [ 33 ] Les nouvelles fonctionnalités de la version 2.0 comprenaient l'héritage multiple, les classes abstraites, les fonctions membres statiques, les fonctions membres const et les membres protégés. En 1990, le Manuel de référence C++ annoté a été publié. Ce travail est devenu la base de la future norme. Les ajouts de fonctionnalités ultérieurs comprenaient les modèles , les exceptions , les espaces de noms , les nouveaux casts et un type booléen .

En 1998, C++98 a été publié, standardisant le langage, et une mise à jour mineure ( C++03 ) a été publiée en 2003.

Après C++98, le C++ a évolué relativement lentement jusqu'à la publication, en 2011, de la norme C++11 , qui ajoutait de nombreuses nouvelles fonctionnalités, élargissait la bibliothèque standard et offrait davantage de fonctionnalités aux programmeurs C++. Après une mise à jour mineure de C++14 publiée en décembre 2014, divers ajouts ont été introduits dans C++17 . [ 34 ] Après sa finalisation en février 2020, [ 35 ] un projet de norme C++20 a été approuvé le 4 septembre 2020 et officiellement publié le 15 décembre 2020. [ 36 ] [ 37 ]

Le 3 janvier 2018, Stroustrup a été annoncé comme le lauréat 2018 du prix Charles Stark Draper d'ingénierie, « pour la conceptualisation et le développement du langage de programmation C++ ». [ 38 ]

En décembre 2022, C++ se classait troisième au classement TIOBE , surpassant Java pour la première fois dans l'histoire de l'indice. En novembre 2024 , le langage se classait deuxième après Python , Java étant troisième. [ 39 ]

Étymologie
Selon Stroustrup, « le nom signifie la nature évolutive des changements par rapport à C. » [ 40 ] Ce nom est attribué à Rick Mascitti (mi-1983) [ 31 ] et a été utilisé pour la première fois en décembre 1983. Lorsque Mascitti a été interrogé de manière informelle en 1992 sur le nom, il a indiqué qu'il avait été donné dans un esprit ironique . Le nom vient de ++ l'opérateur de C (qui incrémente la valeur d'une variable ) et d'une convention de nommage courante consistant à utiliser « + » pour indiquer un programme informatique amélioré.

Au cours de la période de développement du C++, le langage a été appelé « nouveau C » et « C avec classes » [ 31 ] [ 41 ] avant d'acquérir son nom définitif.

Philosophie
Tout au long de la vie de C++, son développement et son évolution ont été guidés par un ensemble de principes : [ 30 ]

Il doit être motivé par des problèmes réels et ses fonctionnalités doivent être immédiatement utiles dans les programmes du monde réel.
Chaque fonctionnalité doit être implémentable (avec une manière raisonnablement évidente de le faire).
Les programmeurs devraient être libres de choisir leur propre style de programmation, et ce style devrait être entièrement pris en charge par C++.
Autoriser une fonctionnalité utile est plus important que d’empêcher toute mauvaise utilisation possible de C++.
Il devrait fournir des moyens d’organiser les programmes en parties distinctes et bien définies, ainsi que des moyens de combiner des parties développées séparément.
Aucune violation implicite du système de types (mais autorise les violations explicites, c'est-à-dire celles explicitement demandées par le programmeur).
Les types créés par l’utilisateur doivent bénéficier du même support et des mêmes performances que les types intégrés.
Les fonctionnalités inutilisées ne doivent pas avoir d'impact négatif sur les exécutables créés (par exemple, en réduisant les performances).
Il ne devrait y avoir aucun langage sous C++ (à l'exception du langage assembleur ).
C++ devrait fonctionner aux côtés d’autres langages de programmation existants , plutôt que de favoriser son propre environnement de programmation séparé et incompatible .
Si l’intention du programmeur est inconnue, permettez-lui de la spécifier en fournissant un contrôle manuel.
Standardisation
Articles principaux : C++03 , C++11 , C++14 , C++17 , C++20 , C++23 et C++26
Normes C++
Année	Norme ISO/CEI	Nom informel
1998	14882:1998 [ 42 ]	C++98
2003	14882:2003 [ 43 ]	C++03
2011	14882:2011 [ 44 ]	C++11 , C++0x
2014	14882:2014 [ 45 ]	C++14 , C++1y
2017	14882:2017 [ 46 ]	C++17 , C++1z
2020	14882:2020 [ 47 ]	C++20 , C++2a
2024	14882:2024 [ 17 ]	C++23 , C++2b
À déterminer		C++26 , C++2c
Le C++ est normalisé par un groupe de travail ISO appelé JTC1/SC22/WG21 . À ce jour, sept révisions de la norme C++ ont été publiées et la prochaine révision, C++26 , est actuellement en cours .


Scène lors de la réunion du comité des normes C++ à Stockholm en 1996
En 1998, le groupe de travail ISO a normalisé C++ pour la première fois sous la norme ISO/IEC 14882:1998 , plus connue sous le nom informel de C++98 . En 2003, il a publié une nouvelle version de la norme C++, appelée ISO/IEC 14882:2003 , qui corrigeait les problèmes identifiés dans C++98.

La prochaine révision majeure de la norme a été appelée de manière informelle « C++0x », mais elle n'a été publiée qu'en 2011. [ 48 ] C++11 (14882:2011) comprenait de nombreux ajouts au langage de base et à la bibliothèque standard. [ 44 ]

En 2014, C++14 (également connu sous le nom de C++1y) a été publié comme une petite extension de C++11, comportant principalement des corrections de bogues et de petites améliorations. [ 49 ] Les procédures de vote du projet de norme internationale se sont achevées à la mi-août 2014. [ 50 ]

Après C++14, une révision majeure C++17 , connue officieusement sous le nom de C++1z, a été achevée par le comité ISO C++ à la mi-juillet 2017 et a été approuvée et publiée en décembre 2017. [ 51 ]

Dans le cadre du processus de normalisation, l’ISO publie également des rapports et des spécifications techniques :

ISO/IEC TR 18015:2006 [ 52 ] sur l'utilisation du C++ dans les systèmes embarqués et sur les implications en termes de performances des fonctionnalités du langage et de la bibliothèque C++,
ISO/IEC TR 19768:2007 [ 53 ] (également connu sous le nom de Rapport technique C++ 1 ) sur les extensions de bibliothèque principalement intégrées dans C++11 ,
ISO/IEC TR 29124:2010 [ 54 ] sur les fonctions mathématiques spéciales, intégrées dans C++17 ,
ISO/IEC TR 24733:2011 [ 55 ] sur l'arithmétique décimale à virgule flottante ,
ISO/IEC TS 18822:2015 [ 56 ] sur la bibliothèque de systèmes de fichiers standard, intégrée dans C++17 ,
ISO/IEC TS 19570:2015 [ 57 ] sur les versions parallèles des algorithmes de la bibliothèque standard, intégrés dans C++17 ,
ISO/IEC TS 19841:2015 [ 58 ] sur la mémoire transactionnelle logicielle ,
ISO/IEC TS 19568:2015 [ 59 ] sur un nouvel ensemble d'extensions de bibliothèque, dont certaines sont déjà intégrées dans C++17 ,
ISO/IEC TS 19217:2015 [ 60 ] sur les concepts C++ , intégrés dans C++20 ,
ISO/IEC TS 19571:2016 [ 61 ] sur les extensions de bibliothèque pour la concurrence, dont certaines sont déjà intégrées dans C++20 ,
ISO/IEC TS 19568:2017 [ 62 ] sur un nouvel ensemble d'extensions de bibliothèque à usage général,
ISO/IEC TS 21425:2017 [ 63 ] sur les extensions de bibliothèque pour les plages, intégrées dans C++20 ,
ISO/IEC TS 22277:2017 [ 64 ] sur les coroutines, intégrées dans C++20 ,
ISO/IEC TS 19216:2018 [ 65 ] sur la bibliothèque réseau,
ISO/IEC TS 21544:2018 [ 66 ] sur les modules, intégrés dans C++20 ,
ISO/IEC TS 19570:2018 [ 67 ] sur un nouvel ensemble d'extensions de bibliothèque pour le parallélisme
ISO/IEC TS 23619:2021 [ 68 ] sur les nouvelles extensions pour la programmation réflexive (réflexion),
ISO/IEC TS 9922:2024 [ 69 ] sur un nouvel ensemble d'extensions de concurrence, et
ISO/IEC TS 19568:2024 [ 70 ] sur un autre nouvel ensemble d'extensions de bibliothèque.
D’autres spécifications techniques sont en cours de développement et en attente d’approbation.

Langue
Article principal : Syntaxe C++
Le langage C++ comporte deux composantes principales : un mappage direct des fonctionnalités matérielles fournies principalement par le sous-ensemble C, et des abstractions sans surcharge basées sur ces mappages. Stroustrup décrit le C++ comme « un langage de programmation d'abstraction léger [conçu] pour construire et utiliser des abstractions efficaces et élégantes » ; [ 15 ] et « offrir à la fois accès au matériel et abstraction est la base du C++. Son efficacité le distingue des autres langages. » [ 71 ]

Le C++ hérite de la majeure partie de la syntaxe du C. Un programme « Hello World » conforme à la norme C est également un programme « Hello World » C++ valide. Voici la version de Bjarne Stroustrup du programme « Hello World » , qui utilise la fonctionnalité de flux de la bibliothèque standard C++ pour écrire un message sur la sortie standard : [ 72 ] [ 73 ] [ note 2 ]

#include <iostream>

int main ()
{
    std :: cout << "Bonjour tout le monde ! \n " ;
}
Bibliothèque standard

Le projet de norme « Working Paper » qui a été approuvé sous le nom de C++98 ; la moitié de sa taille était consacrée à la bibliothèque standard C++.
Article principal : Bibliothèque standard C++
La norme C++ se compose de deux parties : le langage principal et la bibliothèque standard. Les programmeurs C++ s'attendent à la présence de cette dernière sur chaque implémentation majeure de C++ ; elle inclut des types d'agrégats ( vecteurs , listes, cartes, ensembles, files d'attente, piles, tableaux, tuples), des algorithmes (find, for_each , binary_search , random_shuffle, etc.), des fonctions d'entrée/sortie ( iostream , pour la lecture et l'écriture sur la console et les fichiers), une bibliothèque de systèmes de fichiers, la prise en charge de la localisation, des pointeurs intelligents pour la gestion automatique de la mémoire, la prise en charge des expressions régulières , une bibliothèque multithreading , la prise en charge des atomes (permettant la lecture ou l'écriture d'une variable par un seul thread à la fois sans synchronisation externe), des utilitaires de temps (mesure, obtention de l'heure actuelle, etc.), un système de conversion des rapports d'erreurs n'utilisant pas d'exceptions C++ en exceptions C++, un générateur de nombres aléatoires et une version légèrement modifiée de la bibliothèque standard C (pour la rendre compatible avec le système de types C++).

Une grande partie de la bibliothèque C++ repose sur la bibliothèque de modèles standard (STL). Parmi les outils utiles fournis par la STL figurent des conteneurs sous forme de collections d'objets (tels que des vecteurs et des listes ), des itérateurs offrant un accès aux conteneurs de type tableau, et des algorithmes effectuant des opérations telles que la recherche et le tri.

De plus, des (multi)maps ( tableaux associatifs ) et des (multi)sets sont fournis, exportant tous des interfaces compatibles. Par conséquent, l'utilisation de modèles permet d'écrire des algorithmes génériques fonctionnant avec n'importe quel conteneur ou sur n'importe quelle séquence définie par des itérateurs.

Comme en C, les fonctionnalités de la bibliothèque sont accessibles via la #include directive « include un en-tête standard » . La bibliothèque standard C++ fournit 105 en-têtes standard, dont 27 sont obsolètes. Avec l'introduction des modules en C++20 , ces en-têtes sont accessibles via import, et en C++23 , l'intégralité de la bibliothèque standard peut désormais être importée directement en tant que module, via . Actuellement, la bibliothèque standard C++ fournit deux modules, et (un module de compatibilité pour lequel exporte les fonctionnalités de la bibliothèque standard C dans l'espace de noms global). import std;stdstd.compatstd

La norme intègre la STL, initialement conçue par Alexander Stepanov , qui a expérimenté des algorithmes et des conteneurs génériques pendant de nombreuses années. En commençant avec le C++, il a finalement trouvé un langage permettant de créer des algorithmes génériques (par exemple, le tri STL) encore plus performants que, par exemple, la bibliothèque standard C qsort, grâce à des fonctionnalités C++ comme l'utilisation de l'inlining et de la liaison à la compilation au lieu de pointeurs de fonction. La norme ne la désigne pas comme « STL », car elle n'en est qu'une partie, mais ce terme reste largement utilisé pour la distinguer du reste de la bibliothèque standard (flux d'entrée/sortie, internationalisation, diagnostics, sous-ensemble de la bibliothèque C, etc.). [ 74 ]

La plupart des compilateurs C++, et tous les principaux, fournissent une implémentation conforme aux normes de la bibliothèque standard C++.

Directives de base C++
Les C++ Core Guidelines [ 75 ] sont une initiative menée par Bjarne Stroustrup, l'inventeur du C++, et Herb Sutter, le coordinateur et président du groupe de travail ISO C++, pour aider les programmeurs à écrire du « C++ moderne » en utilisant les meilleures pratiques pour les normes de langage C++11 et plus récentes, et pour aider les développeurs de compilateurs et d'outils de vérification statique à créer des règles pour détecter les mauvaises pratiques de programmation.

L'objectif principal est d'écrire de manière efficace et cohérente du C++ sûr en termes de type et de ressources.

Les lignes directrices de base ont été annoncées [ 76 ] lors du discours d’ouverture du CPPCon 2015.

Les lignes directrices sont accompagnées de la bibliothèque de support des lignes directrices (GSL), [ 77 ] une bibliothèque d'en-têtes uniquement de types et de fonctions pour implémenter les lignes directrices de base et des outils de vérification statique pour appliquer les règles des lignes directrices. [ 78 ]

Compatibilité
Afin de donner plus de liberté aux fournisseurs de compilateurs, le comité de normalisation C++ a décidé de ne pas imposer l'implémentation de la modification des noms , de la gestion des exceptions et d'autres fonctionnalités spécifiques à l'implémentation. L'inconvénient de cette décision est que le code objet produit par différents compilateurs est susceptible d'être incompatible. Il existe cependant des tentatives de normalisation des compilateurs pour des machines ou des systèmes d'exploitation spécifiques . Par exemple, l'ABI Itanium C++ est indépendante du processeur (malgré son nom) et est implémentée par GCC et Clang. [ 79 ]

Avec C
Article principal : Compatibilité de C et C++
Le C++ est souvent considéré comme un sur-ensemble du C , mais ce n'est pas tout à fait vrai. [ 80 ] La plupart du code C peut facilement être compilé correctement en C++, mais il existe quelques différences qui rendent certains codes C valides invalides ou se comportent différemment en C++. Par exemple, le C autorise la conversion implicite de vers d'autres types de pointeurs, mais pas le C++ (pour des raisons de sécurité des types). De plus, le C++ définit de nombreux nouveaux mots-clés, tels que et , qui peuvent être utilisés comme identifiants (par exemple, des noms de variables) dans un programme C. void*newclass

Français Certaines incompatibilités ont été supprimées par la révision de 1999 de la norme C ( C99 ), qui prend désormais en charge les fonctionnalités C++ telles que les commentaires de ligne ( //) et les déclarations mélangées au code. D'autre part, C99 a introduit un certain nombre de nouvelles fonctionnalités que C++ ne prenait pas en charge et qui étaient incompatibles ou redondantes en C++, telles que les tableaux de longueur variable , les types de nombres complexes natifs (cependant, la classe de la bibliothèque standard C++ fournit des fonctionnalités similaires, bien que non compatibles avec le code), les initialiseurs désignés, les littéraux composés et le mot-clé. [ 81 ] Certaines des fonctionnalités introduites par C99 ont été incluses dans la version ultérieure de la norme C++, C++11 (parmi celles qui n'étaient pas redondantes). [ 82 ] [ 83 ] [ 84 ] Cependant, la norme C++11 introduit de nouvelles incompatibilités, telles que l'interdiction d'assigner un littéral de chaîne à un pointeur de caractère, ce qui reste valide en C. std::complexrestrict

Pour mélanger du code C et du code C++, toute déclaration ou définition de fonction appelée ou utilisée à la fois en C et en C++ doit être déclarée avec une liaison C, en la plaçant dans un bloc. Une telle fonction ne doit pas dépendre de fonctionnalités dépendant de la modification des noms (c'est-à-dire de la surcharge de fonction). extern "C" {/*...*/}

Assemblage en ligne
Les programmes développés en C ou C++ utilisent souvent l'assembleur en ligne pour tirer parti de ses fonctionnalités de bas niveau, de sa vitesse supérieure et de son contrôle amélioré par rapport aux langages de programmation de haut niveau [ 85 ] [ 86 ] lorsque l'optimisation des performances est essentielle. C++ prend en charge l'intégration du langage assembleur à l'aide de déclarations asm [ 87 ] , mais la compatibilité de l'assembleur en ligne varie considérablement entre les compilateurs et les architectures. Contrairement aux fonctionnalités des langages de haut niveau tels que Python ou Java , le code assembleur dépend fortement du processeur sous-jacent et de l'implémentation du compilateur.

Variations entre les compilateurs
Différents compilateurs C++ implémentent l'assemblage en ligne de manières distinctes.

GCC ( GNU Compiler Collection ) et Clang [ 88 ] : Utilisent la syntaxe d'assemblage en ligne étendue de GCC. L'utilisation __asm__du mot-clé plutôt que asmde lors de l'écriture de code pouvant être compilé avec les options et permet de spécifier les opérandes d'entrée/sortie et les registres écrasés. Cette approche est largement adoptée, notamment par les compilateurs Intel [ 89 ] et IBM [ 90 ] .-ansi-std
MSVC ( Microsoft Visual C++ ) : l'assembleur en ligne est intégré au compilateur. Auparavant, l'assembleur en ligne était pris en charge via le __asmmot-clé, mais cette prise en charge a été supprimée en mode 64 bits, nécessitant des modules .asm distincts [ 91 ] .
TI ARM Clang et compilateurs embarqués [ 92 ] : Certains compilateurs de systèmes embarqués, comme TI Arm Clang de Texas Instruments, autorisent l'assemblage en ligne mais imposent des règles plus strictes pour éviter les conflits avec les conventions de registre et les conventions d'appel.
Interopérabilité entre C++ et Assembleur
C++ fournit deux méthodes principales d’intégration du code ASM.

1. Fichiers d'assemblage autonomes – Le code d'assemblage est écrit séparément et lié au code C++. [ 93 ]

2. Assemblage en ligne – Le code assembleur est intégré au code C++ à l’aide d’extensions spécifiques au compilateur.

Exemple de code pour la compatibilité ASM

Lors de l'appel d'une fonction d'assemblage à partir de C++, utilisez pour empêcher la modification du nom C++.extern "C"
//main.cpp
importer std ;

extern "C" int add_asm ( int , int ); // Déclarer la fonction d'assemblage

int main () {
    int résultat = add_asm ( 5 , 7 );
    std :: println ( "Résultat de l'ASM : {}" , result );
    renvoie 0 ;
}
#code asm utilisant l'architecture RISC-V
. section . texte
. global add_asm

add_asm :
    ajouter a0 , a0 , a1 # Ajouter le premier argument ( a0 ) et le deuxième argument ( a1 ), stocker dans a0
    ret # Retour ( a0 contient la valeur de retour )
Les variables globales dans l'assembly doivent être déclarées comme externen C++ et marquées .globaldans l'assembly.
// main.cpp
importer std ;

extern "C" int global_var ; // Déclarer une variable globale à partir de l'assembly

int main () {
    std :: println ( "Variable globale de l'ASM : {}" , global_var );
    renvoie 0 ;
}
#asm utilisant l'architecture RISC-V
. section . données
. global global_var
. aligner 4
global_var :
    . mot 42 # Définir la valeur entière
L'assemblage en ligne permet d'intégrer ASM directement dans C++ à l'aide du asmmot-clé.
//main.cpp (en utilisant le compilateur GCC/CLANG)
importer std ;

int main () {
    int x = 10 , y = 20 , somme ;

    asm volatile (
        "ajouter %0, %1, %2"
        : "=r" ( sum ) // Opérande de sortie (stocké dans un registre)
        : "r" ( x ), "r" ( y ) // Opérandes d'entrée (stockés dans des registres)
    );

    std :: println ( "Somme en utilisant ASM en ligne : {}" , sum );
    renvoie 0 ;
}
Voir aussi
icône	Portail de programmation informatique
Carbone (langage de programmation)
Comparaison des langages de programmation
Liste des compilateurs C++
Aperçu du C++
Catégorie : Bibliothèques C++
Notes de bas de page
 Pour l'idée des coroutines sans pile C++20.
 Ce code est directement copié de la page d'errata de Bjarne Stroustrup (p. 633). Il aborde l'utilisation de'\n'plutôt questd::endl. Voir également « Puis-je écrire « void main() » ? » (archivé le 2 juillet 2020 sur Wayback Machine) pour une explication de l'implicitereturn 0;de lamainfonction. Ce retour implicite n'est pas disponible dans les autres fonctions.
Références
« Présentation des modules en C++ » . Microsoft. 24 avril 2023.
 Stroustrup, Bjarne (1996). « Une histoire du C++ : 1979-1991 ».Histoire des langages de programmation --- II.ACM. pp. 699–769.doi: 10.1145/234286.1057836 .
 Stroustrup, Bjarne (16 décembre 2021). « C++20 : Atteindre les objectifs du C++ - Bjarne Stroustrup - CppCon 2021 » . CppCon. Archivé de l'original le 30 décembre 2021. Consulté le 30 décembre 2021 .
 Stroustrup, Bjarne (12 juin 2020). « Prospérer dans un monde saturé et en constante évolution : C++ 2006–2020 » . Actes de l'ACM sur les langages de programmation . 4 (HOPL). Association for Computing Machinery (ACM) : 1– 168. doi : 10.1145/3386320 . ISSN : 2475-1421 . S2CID : 219603741 .
 Naugler, David (mai 2007). « C# 2.0 pour les programmeurs C++ et Java : atelier de conférence ». Journal of Computing Sciences in Colleges . 22 (5). Bien que C# ait été fortement influencé par Java, il l'a également été par C++ et doit être considéré comme un descendant à la fois de C++ et de Java.
« Spécifications de la chapelle (Remerciements) » (PDF) . Cray Inc., 1er octobre 2015. Archivé (PDF) de l'original le 24 juin 2018. Consulté le 14 janvier 2016 .
 Fogus, Michael. « Rich Hickey Q&R » . Code Quarterly . Archivé de l'original le 11 janvier 2017. Consulté le 11 janvier 2017 .
 Harry. H. Chaudhary (28 juillet 2014). « Décrypter l'entretien de programmation Java : plus de 2 000 questions/réponses d'entretien Java » . Archivé de l'original le 27 mai 2021. Consulté le 29 mai 2016 .
 Roger Poon (1er mai 2017). « Mise à l'échelle de JS++ : abstraction, performances et lisibilité » . Archivé de l'original le 11 mai 2020. Consulté le 21 avril 2020 .
« L'évolution d'un langage d'extension : une histoire de Lua » . www.lua.org . Consulté le 4 janvier 2023 .
« FAQ sur le langage de programmation Nim » . Archivé de l'original le 11 juillet 2017. Consulté le 21 avril 2020 .
« 9. Classes — Documentation Python 3.6.4 » . docs.python.org . Archivé de l'original le 23 octobre 2012 . Consulté le 9 janvier 2018 .
« Influences – La référence Rust » . doc.rust-lang.org . Consulté le 4 janvier 2023 .
Stroustrup, Bjarne (1997). « 1 ». Le langage de programmation C++ (3e éd.). Addison-Wesley. ISBN 0-201-88954-4. OCLC  59193992 .
 Stroustrup, B. (6 mai 2014).« Lecture: The essence of C++. University of Edinburgh ». YouTube .Archivéde l'original le 28 avril 2015. Consulté le 12 juin 2015.
 Stroustrup, Bjarne (17 février 2014). « Applications C++ » . stroustrup.com . Archivé de l'original le 4 avril 2021. Consulté le 5 mai 2014 .
 « ISO/IEC 14882:2024 ». Organisation internationale de normalisation. Consulté le 21 octobre 2020.
« Page d'accueil de Bjarne Stroustrup » . www.stroustrup.com . Archivé de l'original le 14 mai 2019. Consulté le 15 mai 2013 .
« Calendrier IS C++ » (PDF) . Archivé (PDF) de l'original le 10 août 2020. Consulté le 9 août 2020 .
« C++ ; Vers où il va » . Archivé de l'original le 3 décembre 2018. Consulté le 3 décembre 2018 .
« Re : [RFC] Convertir builin-mailinfo.c pour utiliser The Better String Library » (Liste de diffusion). 6 septembre 2007. Archivé de l'original le 8 mars 2021. Consulté le 31 mars 2015 .
« Re : Des efforts pour attirer plus d'utilisateurs ? » (Liste de diffusion). 12 juillet 2010. Archivé de l'original le 21 mars 2015. Consulté le 31 mars 2015 .
 Andrew Binstock (18 mai 2011). « Dr. Dobb's : Entretien avec Ken Thompson » . Dr. Dobb's . Archivé de l'original le 13 mars 2014. Consulté le 7 février 2014 .
 Peter Seibel (16 septembre 2009). Codeurs au travail : Réflexions sur l'art de programmer . Apress. pp.  475–476 . ISBN 978-1-4302-1948-4. Archivé de l'original le 1er décembre 2019 . Récupéré le 9 novembre 2017 .
« C++ dans Coders at Work » . 16 octobre 2009. Archivé de l'original le 10 novembre 2017. Consulté le 9 novembre 2017 .
« Entretien avec Donald Knuth » . Dr. Dobb's . Archivé de l'original le 8 mars 2021. Consulté le 18 juillet 2021 .
« (La)TeX Navigator » . Archivé de l'original le 20 novembre 2017. Consulté le 10 novembre 2017 .
 Claburn, Thomas (2 mars 2025). « Le créateur du C++ appelle à l'aide pour défendre son langage de programmation contre les « attaques graves »" . Le Registre . Récupéré le 5 mars 2025 .
 Stroustrup, Bjarne (7 mars 2010).« FAQ de Bjarne Stroustrup : Quand le C++ a-t-il été inventé ? ».stroustrup.com.Archivéde l'original le 6 février 2016. Consulté le 16 septembre 2010.
 Stroustrup, Bjarne.« Évolution d'un langage dans et pour le monde réel : C++ 1991-2006 »(PDF).Archivé(PDF)de l'original le 20 novembre 2007.Consulté le 14 août 2013.
 Stroustrup, Bjarne.« Histoire du C++ : 1979-1991 »(PDF).Archivé(PDF)de l'original le 2 février 2019.Consulté le 18 juillet 2013.
 Stroustrup, Bjarne. « Le langage de programmation C++ » (première éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Stroustrup, Bjarne. « Le langage de programmation C++ » (deuxième éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Sutter, Herb (30 juin 2016). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Oulu) » . herbsutter.com . Archivé de l'original le 8 octobre 2016. La prochaine norme après C++17 sera C++20.
 Dusíková, Hana (6 novembre 2019). « N4817 : Invitation et informations à la réunion de Prague 2020 » (PDF) . Archivé (PDF) de l'original le 29 décembre 2019. Consulté le 13 février 2020 .
« État actuel » . isocpp.org . Archivé de l'original le 8 septembre 2020. Consulté le 7 septembre 2020 .
« C++20 approuvé – Herb Sutter » . isocpp.org . Archivé de l'original le 11 septembre 2020. Consulté le 8 septembre 2020 .
« Le pionnier de l'informatique Bjarne Stroustrup recevra le prix Charles Stark Draper d'ingénierie 2018 » (communiqué de presse). Académie nationale d'ingénierie. 3 janvier 2018. Archivé de l'original le 3 janvier 2018. Consulté le 14 décembre 2021 .
 TIOBE (novembre 2024). « Indice TIOBE de novembre 2024 » . TIOBE.com . Société TIOBE. Archivé de l'original le 18 novembre 2024. Consulté le 18 novembre 2024 .
« FAQ de Bjarne Stroustrup – D'où vient le nom « C++ » ? » . Archivé de l'original le 6 février 2016. Consulté le 16 janvier 2008 .
« C pour les programmeurs C++ » . Université Northeastern . Archivé de l'original le 17 novembre 2010. Consulté le 7 septembre 2015 .
« ISO/CEI 14882:1998 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2017. Consulté le 23 novembre 2018 .
« ISO/CEI 14882:2003 » . Organisation internationale de normalisation. Archivé de l'original le 13 août 2021. Consulté le 23 novembre 2018 .
 « ISO/IEC 14882:2011 ». Organisation internationale de normalisation.Archivéde l'original le 27 mai 2016.Consulté le 23 novembre 2018.
« ISO/IEC 14882:2014 » . Organisation internationale de normalisation. Archivé de l'original le 29 avril 2016. Consulté le 23 novembre 2018 .
« ISO/IEC 14882:2017 » . Organisation internationale de normalisation. Archivé de l'original le 29 janvier 2013. Consulté le 2 décembre 2017 .
« ISO/IEC 14882:2020 » . Organisation internationale de normalisation. Archivé de l'original le 16 décembre 2020. Consulté le 16 décembre 2020 .
« Nous disposons d'une norme internationale : C++0x est approuvé à l'unanimité . » Sutter's Mill . 12 août 2011. Archivé de l'original le 28 juin 2018. Consulté le 23 novembre 2018 .
« L'avenir du C++ » . Archivé de l'original le 23 octobre 2018. Consulté le 23 novembre 2018 via channel9.msdn.com.
« Nous avons C++14 ! : C++ standard » . isocpp.org . Archivé de l'original le 19 août 2014 . Consulté le 19 août 2014 .
 Sutter, Herb (15 juillet 2017). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Toronto) » . Archivé de l'original le 6 août 2017. Consulté le 4 août 2017 .
« ISO/IEC TR 18015:2006 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 19768:2007 » . Organisation internationale de normalisation. Archivé de l'original le 4 mars 2016. Consulté le 15 février 2019 .
« ISO/IEC TR 29124:2010 » . Organisation internationale de normalisation. Archivé de l'original le 12 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 24733:2011 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 18822:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19841:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19217:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19571:2016 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21425:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 22277:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19216:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21544:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 23619:2021 » . Organisation internationale de normalisation. Archivé de l'original le 15 décembre 2018. Consulté le 11 octobre 2021 .
« ISO/IEC TS 9922:2024 » . Organisation internationale de normalisation. Archivé de l'original le 1er avril 2025. Consulté le 1er avril 2025 .
« ISO/IEC TS 19568:2024 » . Organisation internationale de normalisation. Archivé de l'original le 25 février 2025. Consulté le 1er avril 2025 .
 B. Stroustrup (interviewé par Sergio De Simone) (30 avril 2015). « Stroustrup : Réflexions sur C++17 - Une interview » . Archivé de l'original le 8 juillet 2015. Consulté le 8 juillet 2015 .
 Stroustrup, Bjarne (2000). Le langage de programmation C++ (éd. spéciale). Addison-Wesley. p. 46. ISBN 0-201-70073-5.
 Stroustrup, Bjarne. « Problèmes en suspens concernant le langage de programmation C++ (3e édition) » . Archivé de l'original le 5 mai 2014. Consulté le 5 mai 2014 .
 Graziano Lo Russo (2008). « Entretien avec A. Stepanov » . stlport.org . Archivé de l'original le 4 mars 2009. Consulté le 8 octobre 2015 .
« Directives C++ Core » . isocpp.github.io . Archivé de l'original le 16 février 2020 . Consulté le 9 février 2020 .
« Bjarne Stroustrup annonce les directives de base du C++ : C++ standard » . isocpp.org . Archivé de l'original le 11 mai 2020. Consulté le 31 mars 2020 .
« microsoft/GSL » . 18 juillet 2021. Archivé de l'original le 18 juillet 2021. Consulté le 18 juillet 2021 via GitHub.
« Utilisation des vérificateurs des directives de base C++ » . Microsoft Learn . Archivé de l'original le 13 août 2021. Consulté le 31 mars 2020 .
« Résumé de l'ABI C++ » . 20 mars 2001. Archivé de l'original le 10 juillet 2018. Consulté le 30 mai 2006 .
« FAQ de Bjarne Stroustrup – Le C est-il un sous-ensemble du C++ ? » . Archivé de l'original le 6 février 2016. Consulté le 5 mai 2014 .
« C9X – La nouvelle norme C » . Archivé de l'original le 21 juin 2018. Consulté le 27 décembre 2008 .
« Prise en charge de C++0x dans GCC » . Archivé de l'original le 21 juillet 2010. Consulté le 12 octobre 2010 .
« Fonctionnalités principales du langage C++0x dans VC10 : le tableau » . Archivé de l'original le 21 août 2010. Consulté le 12 octobre 2010 .
« Clang - État des versions C++98, C++11 et C++14 » . Clang.llvm.org. 12 mai 2013. Archivé de l'original le 4 juillet 2013. Consulté le 10 juin 2013 .
 Bokil, Milind A. (2021). « Écriture de routines d'assemblage dans les programmes C/C++ et Java ». ResearchGate. Consulté le 1er avril 2025.
 Vilhena, Paulo Emílio de ; Lahav, Ori ; Vafeiadis, Viktor ; Raad, Azalea (2024). « Extension du modèle de mémoire C/C++ avec l'assemblage en ligne ». Actes de l'ACM sur les langages de programmation, vol. 8, OOPSLA2, article 309. doi:10.1145/3689749.
 Contributeurs de cppreference.com. « Déclaration ASM ». cppreference.com . Consulté le 1er avril 2025.
« Asm étendu (utilisation de la collection de compilateurs GNU) » . Documentation en ligne de GCC . Projet GNU . Consulté le 1er avril 2025 .
 Intel Corporation. « Assemblage en ligne ». Guide du développeur et référence du compilateur Intel® C++ Classic , version 2021.9. Consulté le 1er avril 2025.
 IBM. « Instructions d'assemblage en ligne (extension IBM) ». Documentation IBM . Consulté le 1er avril 2025.
« Présentation de l'assembleur en ligne » . Microsoft Learn . Microsoft . Consulté le 1er avril 2025 .
« Interfaçage de C et C++ avec le langage assembleur » . Texas Instruments . Texas Instruments Incorporated. 23 février 2025. Consulté le 1er avril 2025 .
« Liaison C++ vers ASM dans GCC » . Wiki OSDev . Consulté le 1er avril 2025 .
Lectures complémentaires
Abrahams, David ; Gurtovoy, Aleksey (2005). Métaprogrammation de modèles C++ : concepts, outils et techniques issus de Boost et au-delà . Addison-Wesley. ISBN 0-321-22725-5.
Alexandrescu, Andrei (2001). Conception C++ moderne : Programmation générique et modèles de conception appliqués . Addison-Wesley. ISBN. 0-201-70431-5.
Alexandrescu, Andrei ; Sutter, Herb (2004). Normes de conception et de codage C++ : règles et directives pour l'écriture de programmes . Addison-Wesley. ISBN 0-321-11358-6.
Becker, Pete (2006). Les extensions de la bibliothèque standard C++ : tutoriel et référence . Addison-Wesley. ISBN. 0-321-41299-0.
Cassé, Frank (2010). Annotations C++ . Université de Groningue. ISBN 978-90-367-0470-0. Archivé de l'original le 28 avril 2010 . Récupéré le 28 avril 2010 .
Coplien, James O. (1994) [réédité avec corrections, année de publication originale : 1992]. C++ avancé : Styles et expressions idiomatiques de programmation . Addison-Wesley. ISBN 0-201-54855-0.
Dewhurst, Stephen C. (2005). C++ Common Knowledge : Programmation intermédiaire essentielle . Addison-Wesley. ISBN. 0-321-32192-8.
Conseil de l'industrie des technologies de l'information (15 octobre 2003). Langages de programmation – C++ (deuxième éd.). Genève : ISO/IEC. 14882:2003(E).
Josuttis, Nicolai M. (2012). La bibliothèque standard C++ : tutoriel et référence (deuxième éd.). Addison-Wesley. ISBN. 978-0-321-62321-8.
Koenig, Andrew ; Moo, Barbara E. (2000). C++ accéléré – Programmation pratique par l'exemple . Addison-Wesley. ISBN 0-201-70353-X.
Lippman, Stanley B. ; Lajoie, Josée; Moo, Barbara E. (2011). Introduction à C++ (Cinquième éd.). Addison-Wesley. ISBN 978-0-321-71411-4.
Lippman, Stanley B. (1996). Au cœur du modèle objet C++ . Addison-Wesley. ISBN. 0-201-83454-5.
Meyers, Scott (2005). Effective C++ (3e éd.). Addison-Wesley. ISBN. 0-321-33487-6.
Stroustrup, Bjarne (2013). Le langage de programmation C++ (quatrième éd.). Addison-Wesley. ISBN. 978-0-321-56384-2.
Stroustrup, Bjarne (1994). Conception et évolution de C++ . Addison-Wesley. ISBN. 0-201-54330-3.
Stroustrup, Bjarne (2014). Programmation : Principes et pratique en C++ (2e éd.). Addison-Wesley. ISBN. 978-0-321-99278-9.
Sutter, Herb (2001). C++ encore plus exceptionnel : 40 nouveaux casse-têtes d'ingénierie, problèmes de programmation et solutions . Addison-Wesley. ISBN 0-201-70434-X.
Sutter, Herb (2004). Style C++ exceptionnel . Addison-Wesley. ISBN. 0-201-76042-8.
Vandevoorde, David; Josuttis, Nicolai M. (2003). Modèles C++ : le guide complet . Addison-Wesley. ISBN 0-201-73484-2.
Liens externes
JTC1/SC22/WG21 – Groupe de travail sur la norme ISO/IEC C++
Standard C++ Foundation – une organisation à but non lucratif qui promeut l'utilisation et la compréhension du C++ standard. Bjarne Stroustrup est l'un des directeurs de l'organisation.
Mots-clés C++
Expressions C++
Priorité des opérateurs C++
C++ dans les projets frères de Wikipédia :

Médias de Commons

Citations de Wikiquote

Manuels scolaires de Wikibooks

Ressources de Wikiversité
vtet
C++
vtet
Langages de programmation
ComparaisonChronologieHistoire
AdaALGOL SimulaAPLAssembléeBASIQUE Visual Basic classique.FILETCC++C#COBOLErlang ÉlixirEn avantFortranAllerHaskellJavaJavaScript ManuscritJuliaKotlinZézayerLuaMATLABML Caml OCamlPascal Pascal ObjetPerl RakuPHPProloguePythonRRubisRouillerSQLGratterCoquillePetite conversationRapideplus...
 Listes : alphabétiqueCatégoriqueGénérationnelNon basé sur l'anglais Catégorie
vtet
Normes de l'Organisation internationale de normalisation (ISO)
vtet
normes CEI
Bases de données de contrôle d'autorité Modifiez ceci sur Wikidata
Catégories :C++Famille de langages de programmation AlgolFamille de langages de programmation C++Langages de programmation basés sur les classesLogiciel multiplateformeLangages de programmation de haut niveauLangages de programmation orientés objetLangages de programmation créés en 1983Langages de programmation avec une norme ISOLangages de programmation à typage statiqueLangages de programmation compilés
===================(01)======================
### [C++]
C++ ( / ˈsiːplʌsplʌs / , prononcé « C plus plus » et parfois abrégé en CPP ) est un langage de programmation de haut niveau à usage général créé par l' informaticien danois Bjarne Stroustrup . Initialement publié en 1985 comme une extension du langage de programmation C , il s'est depuis considérablement développé au fil du temps ; en 1997 , C++ possède des fonctionnalités orientées objet , génériques et fonctionnelles , en plus de fonctionnalités de manipulation de mémoire de bas niveau pour des systèmes comme les micro-ordinateurs ou pour créer des systèmes d'exploitation comme Linux ou Windows . Il est généralement implémenté comme un langage compilé , et de nombreux fournisseurs fournissent des compilateurs C++ , notamment la Free Software Foundation , LLVM , Microsoft , Intel , Embarcadero , Oracle et IBM . [ 14 ]

C++ a été conçu pour la programmation de systèmes et de logiciels embarqués , à ressources limitées et de grands systèmes, avec la performance , l'efficacité et la flexibilité d'utilisation comme points forts de sa conception. [ 15 ] C++ s'est également avéré utile dans de nombreux autres contextes, ses principaux atouts étant l'infrastructure logicielle et les applications à ressources limitées, [ 15 ] y compris les applications de bureau , les jeux vidéo , les serveurs (par exemple, le commerce électronique , la recherche sur le Web ou les bases de données ) et les applications critiques en termes de performances (par exemple, les commutateurs téléphoniques ou les sondes spatiales ). [ 16 ]

Français C++ est normalisé par l' Organisation internationale de normalisation (ISO), la dernière version de la norme ayant été ratifiée et publiée par l'ISO en octobre 2024 sous le nom d' ISO/IEC 14882:2024 (connue officieusement sous le nom de C++23 ). [ 17 ] Le langage de programmation C++ a été initialement normalisé en 1998 sous le nom d'ISO/IEC 14882:1998 , qui a ensuite été modifié par les normes C++03 , C++11 , C ++14 , C++17 et C++20 . La norme C++23 actuelle les remplace par de nouvelles fonctionnalités et une bibliothèque standard élargie . Avant la normalisation initiale en 1998, C++ a été développé par Stroustrup aux Bell Labs depuis 1979 comme une extension du langage C ; il voulait un langage efficace et flexible similaire à C qui fournisse également des fonctionnalités de haut niveau pour l'organisation des programmes. [ 18 ] Depuis 2012, C++ suit un calendrier de publication de trois ans [ 19 ] avec C++26 comme prochaine norme prévue. [ 20 ]

Malgré son adoption généralisée, certains programmeurs notables ont critiqué le langage C++ , notamment Linus Torvalds , [ 21 ] Richard Stallman , [ 22 ] Joshua Bloch , Ken Thompson , [ 23 ] [ 24 ] [ 25 ] et Donald Knuth . [ 26 ] [ 27 ] Cela est dû en grande partie à sa gestion manuelle de la mémoire, qui le rend vulnérable aux bogues de dépassement de tampon , qui représentent un risque de sécurité. [ 28 ]

Histoire

Bjarne Stroustrup, le créateur de C++, dans son bureau d'AT&T dans le New Jersey, vers  2000
En 1979, Bjarne Stroustrup , un informaticien danois , a commencé à travailler sur «C avec classes , prédécesseur de C++. [ 29 ] La création d'un nouveau langage est née de l'expérience de Stroustrup en programmation pour sa thèse de doctorat. Stroustrup a constaté que Simula possédait des fonctionnalités très utiles pour le développement de logiciels de grande envergure, mais que le langage était trop lent pour une utilisation pratique, tandis que BCPL était rapide mais trop bas niveau pour convenir au développement de logiciels de grande envergure. Lorsque Stroustrup a commencé à travailler chez AT&T Bell Labs , il a dû analyser le noyau UNIX en termes de calcul distribué . Se souvenant de son doctorat, Stroustrup a entrepris d'améliorer le langage C avec des fonctionnalités similaires à Simula. [ 30 ] Le C a été choisi pour sa polyvalence, sa rapidité, sa portabilité et sa large diffusion. Outre l'influence de C et de Simula, d'autres langages ont influencé ce nouveau langage, notamment ALGOL 68 , Ada , CLU et ML . [ citation requise ]

Initialement, le « C avec classes » de Stroustrup ajoutait des fonctionnalités au compilateur C, Cpre, notamment les classes , les classes dérivées , le typage fort , l'inlining et les arguments par défaut . [ 31 ]


Un quiz sur les fonctionnalités de C++11 donné à Paris en 2015
En 1982, Stroustrup commença à développer un successeur au C avec des classes, qu'il baptisa « C++ » ( ++opérateur d'incrémentation en C) après avoir essayé plusieurs autres noms. De nouvelles fonctionnalités furent ajoutées, notamment les fonctions virtuelles , la surcharge des noms de fonctions et des opérateurs , les références , les constantes, l'allocation de mémoire libre sécurisée (nouveau/suppression), une vérification de type améliorée et des commentaires sur une seule ligne de style BCPL avec deux barres obliques ( //). De plus, Stroustrup développa un nouveau compilateur autonome pour C++, Cfront .

En 1984, Stroustrup a implémenté la première bibliothèque d'entrée/sortie de flux. L'idée de fournir un opérateur de sortie plutôt qu'une fonction de sortie nommée a été suggérée par Doug McIlroy [ 2 ] (qui avait précédemment suggéré les tubes Unix ).

En 1985, la première édition du langage de programmation C++ a été publiée, qui est devenue la référence définitive pour le langage, car il n'y avait pas encore de norme officielle. [ 32 ] La première implémentation commerciale de C++ a été publiée en octobre de la même année. [ 29 ]

En 1989, C++ 2.0 a été publié, suivi par la deuxième édition mise à jour du langage de programmation C++ en 1991. [ 33 ] Les nouvelles fonctionnalités de la version 2.0 comprenaient l'héritage multiple, les classes abstraites, les fonctions membres statiques, les fonctions membres const et les membres protégés. En 1990, le Manuel de référence C++ annoté a été publié. Ce travail est devenu la base de la future norme. Les ajouts de fonctionnalités ultérieurs comprenaient les modèles , les exceptions , les espaces de noms , les nouveaux casts et un type booléen .

En 1998, C++98 a été publié, standardisant le langage, et une mise à jour mineure ( C++03 ) a été publiée en 2003.

Après C++98, le C++ a évolué relativement lentement jusqu'à la publication, en 2011, de la norme C++11 , qui ajoutait de nombreuses nouvelles fonctionnalités, élargissait la bibliothèque standard et offrait davantage de fonctionnalités aux programmeurs C++. Après une mise à jour mineure de C++14 publiée en décembre 2014, divers ajouts ont été introduits dans C++17 . [ 34 ] Après sa finalisation en février 2020, [ 35 ] un projet de norme C++20 a été approuvé le 4 septembre 2020 et officiellement publié le 15 décembre 2020. [ 36 ] [ 37 ]

Le 3 janvier 2018, Stroustrup a été annoncé comme le lauréat 2018 du prix Charles Stark Draper d'ingénierie, « pour la conceptualisation et le développement du langage de programmation C++ ». [ 38 ]

En décembre 2022, C++ se classait troisième au classement TIOBE , surpassant Java pour la première fois dans l'histoire de l'indice. En novembre 2024 , le langage se classait deuxième après Python , Java étant troisième. [ 39 ]

Étymologie
Selon Stroustrup, « le nom signifie la nature évolutive des changements par rapport à C. » [ 40 ] Ce nom est attribué à Rick Mascitti (mi-1983) [ 31 ] et a été utilisé pour la première fois en décembre 1983. Lorsque Mascitti a été interrogé de manière informelle en 1992 sur le nom, il a indiqué qu'il avait été donné dans un esprit ironique . Le nom vient de ++ l'opérateur de C (qui incrémente la valeur d'une variable ) et d'une convention de nommage courante consistant à utiliser « + » pour indiquer un programme informatique amélioré.

Au cours de la période de développement du C++, le langage a été appelé « nouveau C » et « C avec classes » [ 31 ] [ 41 ] avant d'acquérir son nom définitif.

Philosophie
Tout au long de la vie de C++, son développement et son évolution ont été guidés par un ensemble de principes : [ 30 ]

Il doit être motivé par des problèmes réels et ses fonctionnalités doivent être immédiatement utiles dans les programmes du monde réel.
Chaque fonctionnalité doit être implémentable (avec une manière raisonnablement évidente de le faire).
Les programmeurs devraient être libres de choisir leur propre style de programmation, et ce style devrait être entièrement pris en charge par C++.
Autoriser une fonctionnalité utile est plus important que d’empêcher toute mauvaise utilisation possible de C++.
Il devrait fournir des moyens d’organiser les programmes en parties distinctes et bien définies, ainsi que des moyens de combiner des parties développées séparément.
Aucune violation implicite du système de types (mais autorise les violations explicites, c'est-à-dire celles explicitement demandées par le programmeur).
Les types créés par l’utilisateur doivent bénéficier du même support et des mêmes performances que les types intégrés.
Les fonctionnalités inutilisées ne doivent pas avoir d'impact négatif sur les exécutables créés (par exemple, en réduisant les performances).
Il ne devrait y avoir aucun langage sous C++ (à l'exception du langage assembleur ).
C++ devrait fonctionner aux côtés d’autres langages de programmation existants , plutôt que de favoriser son propre environnement de programmation séparé et incompatible .
Si l’intention du programmeur est inconnue, permettez-lui de la spécifier en fournissant un contrôle manuel.
Standardisation
Articles principaux : C++03 , C++11 , C++14 , C++17 , C++20 , C++23 et C++26
Normes C++
Année	Norme ISO/CEI	Nom informel
1998	14882:1998 [ 42 ]	C++98
2003	14882:2003 [ 43 ]	C++03
2011	14882:2011 [ 44 ]	C++11 , C++0x
2014	14882:2014 [ 45 ]	C++14 , C++1y
2017	14882:2017 [ 46 ]	C++17 , C++1z
2020	14882:2020 [ 47 ]	C++20 , C++2a
2024	14882:2024 [ 17 ]	C++23 , C++2b
À déterminer		C++26 , C++2c
Le C++ est normalisé par un groupe de travail ISO appelé JTC1/SC22/WG21 . À ce jour, sept révisions de la norme C++ ont été publiées et la prochaine révision, C++26 , est actuellement en cours .


Scène lors de la réunion du comité des normes C++ à Stockholm en 1996
En 1998, le groupe de travail ISO a normalisé C++ pour la première fois sous la norme ISO/IEC 14882:1998 , plus connue sous le nom informel de C++98 . En 2003, il a publié une nouvelle version de la norme C++, appelée ISO/IEC 14882:2003 , qui corrigeait les problèmes identifiés dans C++98.

La prochaine révision majeure de la norme a été appelée de manière informelle « C++0x », mais elle n'a été publiée qu'en 2011. [ 48 ] C++11 (14882:2011) comprenait de nombreux ajouts au langage de base et à la bibliothèque standard. [ 44 ]

En 2014, C++14 (également connu sous le nom de C++1y) a été publié comme une petite extension de C++11, comportant principalement des corrections de bogues et de petites améliorations. [ 49 ] Les procédures de vote du projet de norme internationale se sont achevées à la mi-août 2014. [ 50 ]

Après C++14, une révision majeure C++17 , connue officieusement sous le nom de C++1z, a été achevée par le comité ISO C++ à la mi-juillet 2017 et a été approuvée et publiée en décembre 2017. [ 51 ]

Dans le cadre du processus de normalisation, l’ISO publie également des rapports et des spécifications techniques :

ISO/IEC TR 18015:2006 [ 52 ] sur l'utilisation du C++ dans les systèmes embarqués et sur les implications en termes de performances des fonctionnalités du langage et de la bibliothèque C++,
ISO/IEC TR 19768:2007 [ 53 ] (également connu sous le nom de Rapport technique C++ 1 ) sur les extensions de bibliothèque principalement intégrées dans C++11 ,
ISO/IEC TR 29124:2010 [ 54 ] sur les fonctions mathématiques spéciales, intégrées dans C++17 ,
ISO/IEC TR 24733:2011 [ 55 ] sur l'arithmétique décimale à virgule flottante ,
ISO/IEC TS 18822:2015 [ 56 ] sur la bibliothèque de systèmes de fichiers standard, intégrée dans C++17 ,
ISO/IEC TS 19570:2015 [ 57 ] sur les versions parallèles des algorithmes de la bibliothèque standard, intégrés dans C++17 ,
ISO/IEC TS 19841:2015 [ 58 ] sur la mémoire transactionnelle logicielle ,
ISO/IEC TS 19568:2015 [ 59 ] sur un nouvel ensemble d'extensions de bibliothèque, dont certaines sont déjà intégrées dans C++17 ,
ISO/IEC TS 19217:2015 [ 60 ] sur les concepts C++ , intégrés dans C++20 ,
ISO/IEC TS 19571:2016 [ 61 ] sur les extensions de bibliothèque pour la concurrence, dont certaines sont déjà intégrées dans C++20 ,
ISO/IEC TS 19568:2017 [ 62 ] sur un nouvel ensemble d'extensions de bibliothèque à usage général,
ISO/IEC TS 21425:2017 [ 63 ] sur les extensions de bibliothèque pour les plages, intégrées dans C++20 ,
ISO/IEC TS 22277:2017 [ 64 ] sur les coroutines, intégrées dans C++20 ,
ISO/IEC TS 19216:2018 [ 65 ] sur la bibliothèque réseau,
ISO/IEC TS 21544:2018 [ 66 ] sur les modules, intégrés dans C++20 ,
ISO/IEC TS 19570:2018 [ 67 ] sur un nouvel ensemble d'extensions de bibliothèque pour le parallélisme
ISO/IEC TS 23619:2021 [ 68 ] sur les nouvelles extensions pour la programmation réflexive (réflexion),
ISO/IEC TS 9922:2024 [ 69 ] sur un nouvel ensemble d'extensions de concurrence, et
ISO/IEC TS 19568:2024 [ 70 ] sur un autre nouvel ensemble d'extensions de bibliothèque.
D’autres spécifications techniques sont en cours de développement et en attente d’approbation.

Langue
Article principal : Syntaxe C++
Le langage C++ comporte deux composantes principales : un mappage direct des fonctionnalités matérielles fournies principalement par le sous-ensemble C, et des abstractions sans surcharge basées sur ces mappages. Stroustrup décrit le C++ comme « un langage de programmation d'abstraction léger [conçu] pour construire et utiliser des abstractions efficaces et élégantes » ; [ 15 ] et « offrir à la fois accès au matériel et abstraction est la base du C++. Son efficacité le distingue des autres langages. » [ 71 ]

Le C++ hérite de la majeure partie de la syntaxe du C. Un programme « Hello World » conforme à la norme C est également un programme « Hello World » C++ valide. Voici la version de Bjarne Stroustrup du programme « Hello World » , qui utilise la fonctionnalité de flux de la bibliothèque standard C++ pour écrire un message sur la sortie standard : [ 72 ] [ 73 ] [ note 2 ]

#include <iostream>

int main ()
{
    std :: cout << "Bonjour tout le monde ! \n " ;
}
Bibliothèque standard

Le projet de norme « Working Paper » qui a été approuvé sous le nom de C++98 ; la moitié de sa taille était consacrée à la bibliothèque standard C++.
Article principal : Bibliothèque standard C++
La norme C++ se compose de deux parties : le langage principal et la bibliothèque standard. Les programmeurs C++ s'attendent à la présence de cette dernière sur chaque implémentation majeure de C++ ; elle inclut des types d'agrégats ( vecteurs , listes, cartes, ensembles, files d'attente, piles, tableaux, tuples), des algorithmes (find, for_each , binary_search , random_shuffle, etc.), des fonctions d'entrée/sortie ( iostream , pour la lecture et l'écriture sur la console et les fichiers), une bibliothèque de systèmes de fichiers, la prise en charge de la localisation, des pointeurs intelligents pour la gestion automatique de la mémoire, la prise en charge des expressions régulières , une bibliothèque multithreading , la prise en charge des atomes (permettant la lecture ou l'écriture d'une variable par un seul thread à la fois sans synchronisation externe), des utilitaires de temps (mesure, obtention de l'heure actuelle, etc.), un système de conversion des rapports d'erreurs n'utilisant pas d'exceptions C++ en exceptions C++, un générateur de nombres aléatoires et une version légèrement modifiée de la bibliothèque standard C (pour la rendre compatible avec le système de types C++).

Une grande partie de la bibliothèque C++ repose sur la bibliothèque de modèles standard (STL). Parmi les outils utiles fournis par la STL figurent des conteneurs sous forme de collections d'objets (tels que des vecteurs et des listes ), des itérateurs offrant un accès aux conteneurs de type tableau, et des algorithmes effectuant des opérations telles que la recherche et le tri.

De plus, des (multi)maps ( tableaux associatifs ) et des (multi)sets sont fournis, exportant tous des interfaces compatibles. Par conséquent, l'utilisation de modèles permet d'écrire des algorithmes génériques fonctionnant avec n'importe quel conteneur ou sur n'importe quelle séquence définie par des itérateurs.

Comme en C, les fonctionnalités de la bibliothèque sont accessibles via la #include directive « include un en-tête standard » . La bibliothèque standard C++ fournit 105 en-têtes standard, dont 27 sont obsolètes. Avec l'introduction des modules en C++20 , ces en-têtes sont accessibles via import, et en C++23 , l'intégralité de la bibliothèque standard peut désormais être importée directement en tant que module, via . Actuellement, la bibliothèque standard C++ fournit deux modules, et (un module de compatibilité pour lequel exporte les fonctionnalités de la bibliothèque standard C dans l'espace de noms global). import std;stdstd.compatstd

La norme intègre la STL, initialement conçue par Alexander Stepanov , qui a expérimenté des algorithmes et des conteneurs génériques pendant de nombreuses années. En commençant avec le C++, il a finalement trouvé un langage permettant de créer des algorithmes génériques (par exemple, le tri STL) encore plus performants que, par exemple, la bibliothèque standard C qsort, grâce à des fonctionnalités C++ comme l'utilisation de l'inlining et de la liaison à la compilation au lieu de pointeurs de fonction. La norme ne la désigne pas comme « STL », car elle n'en est qu'une partie, mais ce terme reste largement utilisé pour la distinguer du reste de la bibliothèque standard (flux d'entrée/sortie, internationalisation, diagnostics, sous-ensemble de la bibliothèque C, etc.). [ 74 ]

La plupart des compilateurs C++, et tous les principaux, fournissent une implémentation conforme aux normes de la bibliothèque standard C++.

Directives de base C++
Les C++ Core Guidelines [ 75 ] sont une initiative menée par Bjarne Stroustrup, l'inventeur du C++, et Herb Sutter, le coordinateur et président du groupe de travail ISO C++, pour aider les programmeurs à écrire du « C++ moderne » en utilisant les meilleures pratiques pour les normes de langage C++11 et plus récentes, et pour aider les développeurs de compilateurs et d'outils de vérification statique à créer des règles pour détecter les mauvaises pratiques de programmation.

L'objectif principal est d'écrire de manière efficace et cohérente du C++ sûr en termes de type et de ressources.

Les lignes directrices de base ont été annoncées [ 76 ] lors du discours d’ouverture du CPPCon 2015.

Les lignes directrices sont accompagnées de la bibliothèque de support des lignes directrices (GSL), [ 77 ] une bibliothèque d'en-têtes uniquement de types et de fonctions pour implémenter les lignes directrices de base et des outils de vérification statique pour appliquer les règles des lignes directrices. [ 78 ]

Compatibilité
Afin de donner plus de liberté aux fournisseurs de compilateurs, le comité de normalisation C++ a décidé de ne pas imposer l'implémentation de la modification des noms , de la gestion des exceptions et d'autres fonctionnalités spécifiques à l'implémentation. L'inconvénient de cette décision est que le code objet produit par différents compilateurs est susceptible d'être incompatible. Il existe cependant des tentatives de normalisation des compilateurs pour des machines ou des systèmes d'exploitation spécifiques . Par exemple, l'ABI Itanium C++ est indépendante du processeur (malgré son nom) et est implémentée par GCC et Clang. [ 79 ]

Avec C
Article principal : Compatibilité de C et C++
Le C++ est souvent considéré comme un sur-ensemble du C , mais ce n'est pas tout à fait vrai. [ 80 ] La plupart du code C peut facilement être compilé correctement en C++, mais il existe quelques différences qui rendent certains codes C valides invalides ou se comportent différemment en C++. Par exemple, le C autorise la conversion implicite de vers d'autres types de pointeurs, mais pas le C++ (pour des raisons de sécurité des types). De plus, le C++ définit de nombreux nouveaux mots-clés, tels que et , qui peuvent être utilisés comme identifiants (par exemple, des noms de variables) dans un programme C. void*newclass

Français Certaines incompatibilités ont été supprimées par la révision de 1999 de la norme C ( C99 ), qui prend désormais en charge les fonctionnalités C++ telles que les commentaires de ligne ( //) et les déclarations mélangées au code. D'autre part, C99 a introduit un certain nombre de nouvelles fonctionnalités que C++ ne prenait pas en charge et qui étaient incompatibles ou redondantes en C++, telles que les tableaux de longueur variable , les types de nombres complexes natifs (cependant, la classe de la bibliothèque standard C++ fournit des fonctionnalités similaires, bien que non compatibles avec le code), les initialiseurs désignés, les littéraux composés et le mot-clé. [ 81 ] Certaines des fonctionnalités introduites par C99 ont été incluses dans la version ultérieure de la norme C++, C++11 (parmi celles qui n'étaient pas redondantes). [ 82 ] [ 83 ] [ 84 ] Cependant, la norme C++11 introduit de nouvelles incompatibilités, telles que l'interdiction d'assigner un littéral de chaîne à un pointeur de caractère, ce qui reste valide en C. std::complexrestrict

Pour mélanger du code C et du code C++, toute déclaration ou définition de fonction appelée ou utilisée à la fois en C et en C++ doit être déclarée avec une liaison C, en la plaçant dans un bloc. Une telle fonction ne doit pas dépendre de fonctionnalités dépendant de la modification des noms (c'est-à-dire de la surcharge de fonction). extern "C" {/*...*/}

Assemblage en ligne
Les programmes développés en C ou C++ utilisent souvent l'assembleur en ligne pour tirer parti de ses fonctionnalités de bas niveau, de sa vitesse supérieure et de son contrôle amélioré par rapport aux langages de programmation de haut niveau [ 85 ] [ 86 ] lorsque l'optimisation des performances est essentielle. C++ prend en charge l'intégration du langage assembleur à l'aide de déclarations asm [ 87 ] , mais la compatibilité de l'assembleur en ligne varie considérablement entre les compilateurs et les architectures. Contrairement aux fonctionnalités des langages de haut niveau tels que Python ou Java , le code assembleur dépend fortement du processeur sous-jacent et de l'implémentation du compilateur.

Variations entre les compilateurs
Différents compilateurs C++ implémentent l'assemblage en ligne de manières distinctes.

GCC ( GNU Compiler Collection ) et Clang [ 88 ] : Utilisent la syntaxe d'assemblage en ligne étendue de GCC. L'utilisation __asm__du mot-clé plutôt que asmde lors de l'écriture de code pouvant être compilé avec les options et permet de spécifier les opérandes d'entrée/sortie et les registres écrasés. Cette approche est largement adoptée, notamment par les compilateurs Intel [ 89 ] et IBM [ 90 ] .-ansi-std
MSVC ( Microsoft Visual C++ ) : l'assembleur en ligne est intégré au compilateur. Auparavant, l'assembleur en ligne était pris en charge via le __asmmot-clé, mais cette prise en charge a été supprimée en mode 64 bits, nécessitant des modules .asm distincts [ 91 ] .
TI ARM Clang et compilateurs embarqués [ 92 ] : Certains compilateurs de systèmes embarqués, comme TI Arm Clang de Texas Instruments, autorisent l'assemblage en ligne mais imposent des règles plus strictes pour éviter les conflits avec les conventions de registre et les conventions d'appel.
Interopérabilité entre C++ et Assembleur
C++ fournit deux méthodes principales d’intégration du code ASM.

1. Fichiers d'assemblage autonomes – Le code d'assemblage est écrit séparément et lié au code C++. [ 93 ]

2. Assemblage en ligne – Le code assembleur est intégré au code C++ à l’aide d’extensions spécifiques au compilateur.

Exemple de code pour la compatibilité ASM

Lors de l'appel d'une fonction d'assemblage à partir de C++, utilisez pour empêcher la modification du nom C++.extern "C"
//main.cpp
importer std ;

extern "C" int add_asm ( int , int ); // Déclarer la fonction d'assemblage

int main () {
    int résultat = add_asm ( 5 , 7 );
    std :: println ( "Résultat de l'ASM : {}" , result );
    renvoie 0 ;
}
#code asm utilisant l'architecture RISC-V
. section . texte
. global add_asm

add_asm :
    ajouter a0 , a0 , a1 # Ajouter le premier argument ( a0 ) et le deuxième argument ( a1 ), stocker dans a0
    ret # Retour ( a0 contient la valeur de retour )
Les variables globales dans l'assembly doivent être déclarées comme externen C++ et marquées .globaldans l'assembly.
// main.cpp
importer std ;

extern "C" int global_var ; // Déclarer une variable globale à partir de l'assembly

int main () {
    std :: println ( "Variable globale de l'ASM : {}" , global_var );
    renvoie 0 ;
}
#asm utilisant l'architecture RISC-V
. section . données
. global global_var
. aligner 4
global_var :
    . mot 42 # Définir la valeur entière
L'assemblage en ligne permet d'intégrer ASM directement dans C++ à l'aide du asmmot-clé.
//main.cpp (en utilisant le compilateur GCC/CLANG)
importer std ;

int main () {
    int x = 10 , y = 20 , somme ;

    asm volatile (
        "ajouter %0, %1, %2"
        : "=r" ( sum ) // Opérande de sortie (stocké dans un registre)
        : "r" ( x ), "r" ( y ) // Opérandes d'entrée (stockés dans des registres)
    );

    std :: println ( "Somme en utilisant ASM en ligne : {}" , sum );
    renvoie 0 ;
}
Voir aussi
icône	Portail de programmation informatique
Carbone (langage de programmation)
Comparaison des langages de programmation
Liste des compilateurs C++
Aperçu du C++
Catégorie : Bibliothèques C++
Notes de bas de page
 Pour l'idée des coroutines sans pile C++20.
 Ce code est directement copié de la page d'errata de Bjarne Stroustrup (p. 633). Il aborde l'utilisation de'\n'plutôt questd::endl. Voir également « Puis-je écrire « void main() » ? » (archivé le 2 juillet 2020 sur Wayback Machine) pour une explication de l'implicitereturn 0;de lamainfonction. Ce retour implicite n'est pas disponible dans les autres fonctions.
Références
« Présentation des modules en C++ » . Microsoft. 24 avril 2023.
 Stroustrup, Bjarne (1996). « Une histoire du C++ : 1979-1991 ».Histoire des langages de programmation --- II.ACM. pp. 699–769.doi: 10.1145/234286.1057836 .
 Stroustrup, Bjarne (16 décembre 2021). « C++20 : Atteindre les objectifs du C++ - Bjarne Stroustrup - CppCon 2021 » . CppCon. Archivé de l'original le 30 décembre 2021. Consulté le 30 décembre 2021 .
 Stroustrup, Bjarne (12 juin 2020). « Prospérer dans un monde saturé et en constante évolution : C++ 2006–2020 » . Actes de l'ACM sur les langages de programmation . 4 (HOPL). Association for Computing Machinery (ACM) : 1– 168. doi : 10.1145/3386320 . ISSN : 2475-1421 . S2CID : 219603741 .
 Naugler, David (mai 2007). « C# 2.0 pour les programmeurs C++ et Java : atelier de conférence ». Journal of Computing Sciences in Colleges . 22 (5). Bien que C# ait été fortement influencé par Java, il l'a également été par C++ et doit être considéré comme un descendant à la fois de C++ et de Java.
« Spécifications de la chapelle (Remerciements) » (PDF) . Cray Inc., 1er octobre 2015. Archivé (PDF) de l'original le 24 juin 2018. Consulté le 14 janvier 2016 .
 Fogus, Michael. « Rich Hickey Q&R » . Code Quarterly . Archivé de l'original le 11 janvier 2017. Consulté le 11 janvier 2017 .
 Harry. H. Chaudhary (28 juillet 2014). « Décrypter l'entretien de programmation Java : plus de 2 000 questions/réponses d'entretien Java » . Archivé de l'original le 27 mai 2021. Consulté le 29 mai 2016 .
 Roger Poon (1er mai 2017). « Mise à l'échelle de JS++ : abstraction, performances et lisibilité » . Archivé de l'original le 11 mai 2020. Consulté le 21 avril 2020 .
« L'évolution d'un langage d'extension : une histoire de Lua » . www.lua.org . Consulté le 4 janvier 2023 .
« FAQ sur le langage de programmation Nim » . Archivé de l'original le 11 juillet 2017. Consulté le 21 avril 2020 .
« 9. Classes — Documentation Python 3.6.4 » . docs.python.org . Archivé de l'original le 23 octobre 2012 . Consulté le 9 janvier 2018 .
« Influences – La référence Rust » . doc.rust-lang.org . Consulté le 4 janvier 2023 .
Stroustrup, Bjarne (1997). « 1 ». Le langage de programmation C++ (3e éd.). Addison-Wesley. ISBN 0-201-88954-4. OCLC  59193992 .
 Stroustrup, B. (6 mai 2014).« Lecture: The essence of C++. University of Edinburgh ». YouTube .Archivéde l'original le 28 avril 2015. Consulté le 12 juin 2015.
 Stroustrup, Bjarne (17 février 2014). « Applications C++ » . stroustrup.com . Archivé de l'original le 4 avril 2021. Consulté le 5 mai 2014 .
 « ISO/IEC 14882:2024 ». Organisation internationale de normalisation. Consulté le 21 octobre 2020.
« Page d'accueil de Bjarne Stroustrup » . www.stroustrup.com . Archivé de l'original le 14 mai 2019. Consulté le 15 mai 2013 .
« Calendrier IS C++ » (PDF) . Archivé (PDF) de l'original le 10 août 2020. Consulté le 9 août 2020 .
« C++ ; Vers où il va » . Archivé de l'original le 3 décembre 2018. Consulté le 3 décembre 2018 .
« Re : [RFC] Convertir builin-mailinfo.c pour utiliser The Better String Library » (Liste de diffusion). 6 septembre 2007. Archivé de l'original le 8 mars 2021. Consulté le 31 mars 2015 .
« Re : Des efforts pour attirer plus d'utilisateurs ? » (Liste de diffusion). 12 juillet 2010. Archivé de l'original le 21 mars 2015. Consulté le 31 mars 2015 .
 Andrew Binstock (18 mai 2011). « Dr. Dobb's : Entretien avec Ken Thompson » . Dr. Dobb's . Archivé de l'original le 13 mars 2014. Consulté le 7 février 2014 .
 Peter Seibel (16 septembre 2009). Codeurs au travail : Réflexions sur l'art de programmer . Apress. pp.  475–476 . ISBN 978-1-4302-1948-4. Archivé de l'original le 1er décembre 2019 . Récupéré le 9 novembre 2017 .
« C++ dans Coders at Work » . 16 octobre 2009. Archivé de l'original le 10 novembre 2017. Consulté le 9 novembre 2017 .
« Entretien avec Donald Knuth » . Dr. Dobb's . Archivé de l'original le 8 mars 2021. Consulté le 18 juillet 2021 .
« (La)TeX Navigator » . Archivé de l'original le 20 novembre 2017. Consulté le 10 novembre 2017 .
 Claburn, Thomas (2 mars 2025). « Le créateur du C++ appelle à l'aide pour défendre son langage de programmation contre les « attaques graves »" . Le Registre . Récupéré le 5 mars 2025 .
 Stroustrup, Bjarne (7 mars 2010).« FAQ de Bjarne Stroustrup : Quand le C++ a-t-il été inventé ? ».stroustrup.com.Archivéde l'original le 6 février 2016. Consulté le 16 septembre 2010.
 Stroustrup, Bjarne.« Évolution d'un langage dans et pour le monde réel : C++ 1991-2006 »(PDF).Archivé(PDF)de l'original le 20 novembre 2007.Consulté le 14 août 2013.
 Stroustrup, Bjarne.« Histoire du C++ : 1979-1991 »(PDF).Archivé(PDF)de l'original le 2 février 2019.Consulté le 18 juillet 2013.
 Stroustrup, Bjarne. « Le langage de programmation C++ » (première éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Stroustrup, Bjarne. « Le langage de programmation C++ » (deuxième éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Sutter, Herb (30 juin 2016). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Oulu) » . herbsutter.com . Archivé de l'original le 8 octobre 2016. La prochaine norme après C++17 sera C++20.
 Dusíková, Hana (6 novembre 2019). « N4817 : Invitation et informations à la réunion de Prague 2020 » (PDF) . Archivé (PDF) de l'original le 29 décembre 2019. Consulté le 13 février 2020 .
« État actuel » . isocpp.org . Archivé de l'original le 8 septembre 2020. Consulté le 7 septembre 2020 .
« C++20 approuvé – Herb Sutter » . isocpp.org . Archivé de l'original le 11 septembre 2020. Consulté le 8 septembre 2020 .
« Le pionnier de l'informatique Bjarne Stroustrup recevra le prix Charles Stark Draper d'ingénierie 2018 » (communiqué de presse). Académie nationale d'ingénierie. 3 janvier 2018. Archivé de l'original le 3 janvier 2018. Consulté le 14 décembre 2021 .
 TIOBE (novembre 2024). « Indice TIOBE de novembre 2024 » . TIOBE.com . Société TIOBE. Archivé de l'original le 18 novembre 2024. Consulté le 18 novembre 2024 .
« FAQ de Bjarne Stroustrup – D'où vient le nom « C++ » ? » . Archivé de l'original le 6 février 2016. Consulté le 16 janvier 2008 .
« C pour les programmeurs C++ » . Université Northeastern . Archivé de l'original le 17 novembre 2010. Consulté le 7 septembre 2015 .
« ISO/CEI 14882:1998 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2017. Consulté le 23 novembre 2018 .
« ISO/CEI 14882:2003 » . Organisation internationale de normalisation. Archivé de l'original le 13 août 2021. Consulté le 23 novembre 2018 .
 « ISO/IEC 14882:2011 ». Organisation internationale de normalisation.Archivéde l'original le 27 mai 2016.Consulté le 23 novembre 2018.
« ISO/IEC 14882:2014 » . Organisation internationale de normalisation. Archivé de l'original le 29 avril 2016. Consulté le 23 novembre 2018 .
« ISO/IEC 14882:2017 » . Organisation internationale de normalisation. Archivé de l'original le 29 janvier 2013. Consulté le 2 décembre 2017 .
« ISO/IEC 14882:2020 » . Organisation internationale de normalisation. Archivé de l'original le 16 décembre 2020. Consulté le 16 décembre 2020 .
« Nous disposons d'une norme internationale : C++0x est approuvé à l'unanimité . » Sutter's Mill . 12 août 2011. Archivé de l'original le 28 juin 2018. Consulté le 23 novembre 2018 .
« L'avenir du C++ » . Archivé de l'original le 23 octobre 2018. Consulté le 23 novembre 2018 via channel9.msdn.com.
« Nous avons C++14 ! : C++ standard » . isocpp.org . Archivé de l'original le 19 août 2014 . Consulté le 19 août 2014 .
 Sutter, Herb (15 juillet 2017). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Toronto) » . Archivé de l'original le 6 août 2017. Consulté le 4 août 2017 .
« ISO/IEC TR 18015:2006 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 19768:2007 » . Organisation internationale de normalisation. Archivé de l'original le 4 mars 2016. Consulté le 15 février 2019 .
« ISO/IEC TR 29124:2010 » . Organisation internationale de normalisation. Archivé de l'original le 12 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 24733:2011 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 18822:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19841:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19217:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19571:2016 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21425:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 22277:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19216:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21544:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 23619:2021 » . Organisation internationale de normalisation. Archivé de l'original le 15 décembre 2018. Consulté le 11 octobre 2021 .
« ISO/IEC TS 9922:2024 » . Organisation internationale de normalisation. Archivé de l'original le 1er avril 2025. Consulté le 1er avril 2025 .
« ISO/IEC TS 19568:2024 » . Organisation internationale de normalisation. Archivé de l'original le 25 février 2025. Consulté le 1er avril 2025 .
 B. Stroustrup (interviewé par Sergio De Simone) (30 avril 2015). « Stroustrup : Réflexions sur C++17 - Une interview » . Archivé de l'original le 8 juillet 2015. Consulté le 8 juillet 2015 .
 Stroustrup, Bjarne (2000). Le langage de programmation C++ (éd. spéciale). Addison-Wesley. p. 46. ISBN 0-201-70073-5.
 Stroustrup, Bjarne. « Problèmes en suspens concernant le langage de programmation C++ (3e édition) » . Archivé de l'original le 5 mai 2014. Consulté le 5 mai 2014 .
 Graziano Lo Russo (2008). « Entretien avec A. Stepanov » . stlport.org . Archivé de l'original le 4 mars 2009. Consulté le 8 octobre 2015 .
« Directives C++ Core » . isocpp.github.io . Archivé de l'original le 16 février 2020 . Consulté le 9 février 2020 .
« Bjarne Stroustrup annonce les directives de base du C++ : C++ standard » . isocpp.org . Archivé de l'original le 11 mai 2020. Consulté le 31 mars 2020 .
« microsoft/GSL » . 18 juillet 2021. Archivé de l'original le 18 juillet 2021. Consulté le 18 juillet 2021 via GitHub.
« Utilisation des vérificateurs des directives de base C++ » . Microsoft Learn . Archivé de l'original le 13 août 2021. Consulté le 31 mars 2020 .
« Résumé de l'ABI C++ » . 20 mars 2001. Archivé de l'original le 10 juillet 2018. Consulté le 30 mai 2006 .
« FAQ de Bjarne Stroustrup – Le C est-il un sous-ensemble du C++ ? » . Archivé de l'original le 6 février 2016. Consulté le 5 mai 2014 .
« C9X – La nouvelle norme C » . Archivé de l'original le 21 juin 2018. Consulté le 27 décembre 2008 .
« Prise en charge de C++0x dans GCC » . Archivé de l'original le 21 juillet 2010. Consulté le 12 octobre 2010 .
« Fonctionnalités principales du langage C++0x dans VC10 : le tableau » . Archivé de l'original le 21 août 2010. Consulté le 12 octobre 2010 .
« Clang - État des versions C++98, C++11 et C++14 » . Clang.llvm.org. 12 mai 2013. Archivé de l'original le 4 juillet 2013. Consulté le 10 juin 2013 .
 Bokil, Milind A. (2021). « Écriture de routines d'assemblage dans les programmes C/C++ et Java ». ResearchGate. Consulté le 1er avril 2025.
 Vilhena, Paulo Emílio de ; Lahav, Ori ; Vafeiadis, Viktor ; Raad, Azalea (2024). « Extension du modèle de mémoire C/C++ avec l'assemblage en ligne ». Actes de l'ACM sur les langages de programmation, vol. 8, OOPSLA2, article 309. doi:10.1145/3689749.
 Contributeurs de cppreference.com. « Déclaration ASM ». cppreference.com . Consulté le 1er avril 2025.
« Asm étendu (utilisation de la collection de compilateurs GNU) » . Documentation en ligne de GCC . Projet GNU . Consulté le 1er avril 2025 .
 Intel Corporation. « Assemblage en ligne ». Guide du développeur et référence du compilateur Intel® C++ Classic , version 2021.9. Consulté le 1er avril 2025.
 IBM. « Instructions d'assemblage en ligne (extension IBM) ». Documentation IBM . Consulté le 1er avril 2025.
« Présentation de l'assembleur en ligne » . Microsoft Learn . Microsoft . Consulté le 1er avril 2025 .
« Interfaçage de C et C++ avec le langage assembleur » . Texas Instruments . Texas Instruments Incorporated. 23 février 2025. Consulté le 1er avril 2025 .
« Liaison C++ vers ASM dans GCC » . Wiki OSDev . Consulté le 1er avril 2025 .
Lectures complémentaires
Abrahams, David ; Gurtovoy, Aleksey (2005). Métaprogrammation de modèles C++ : concepts, outils et techniques issus de Boost et au-delà . Addison-Wesley. ISBN 0-321-22725-5.
Alexandrescu, Andrei (2001). Conception C++ moderne : Programmation générique et modèles de conception appliqués . Addison-Wesley. ISBN. 0-201-70431-5.
Alexandrescu, Andrei ; Sutter, Herb (2004). Normes de conception et de codage C++ : règles et directives pour l'écriture de programmes . Addison-Wesley. ISBN 0-321-11358-6.
Becker, Pete (2006). Les extensions de la bibliothèque standard C++ : tutoriel et référence . Addison-Wesley. ISBN. 0-321-41299-0.
Cassé, Frank (2010). Annotations C++ . Université de Groningue. ISBN 978-90-367-0470-0. Archivé de l'original le 28 avril 2010 . Récupéré le 28 avril 2010 .
Coplien, James O. (1994) [réédité avec corrections, année de publication originale : 1992]. C++ avancé : Styles et expressions idiomatiques de programmation . Addison-Wesley. ISBN 0-201-54855-0.
Dewhurst, Stephen C. (2005). C++ Common Knowledge : Programmation intermédiaire essentielle . Addison-Wesley. ISBN. 0-321-32192-8.
Conseil de l'industrie des technologies de l'information (15 octobre 2003). Langages de programmation – C++ (deuxième éd.). Genève : ISO/IEC. 14882:2003(E).
Josuttis, Nicolai M. (2012). La bibliothèque standard C++ : tutoriel et référence (deuxième éd.). Addison-Wesley. ISBN. 978-0-321-62321-8.
Koenig, Andrew ; Moo, Barbara E. (2000). C++ accéléré – Programmation pratique par l'exemple . Addison-Wesley. ISBN 0-201-70353-X.
Lippman, Stanley B. ; Lajoie, Josée; Moo, Barbara E. (2011). Introduction à C++ (Cinquième éd.). Addison-Wesley. ISBN 978-0-321-71411-4.
Lippman, Stanley B. (1996). Au cœur du modèle objet C++ . Addison-Wesley. ISBN. 0-201-83454-5.
Meyers, Scott (2005). Effective C++ (3e éd.). Addison-Wesley. ISBN. 0-321-33487-6.
Stroustrup, Bjarne (2013). Le langage de programmation C++ (quatrième éd.). Addison-Wesley. ISBN. 978-0-321-56384-2.
Stroustrup, Bjarne (1994). Conception et évolution de C++ . Addison-Wesley. ISBN. 0-201-54330-3.
Stroustrup, Bjarne (2014). Programmation : Principes et pratique en C++ (2e éd.). Addison-Wesley. ISBN. 978-0-321-99278-9.
Sutter, Herb (2001). C++ encore plus exceptionnel : 40 nouveaux casse-têtes d'ingénierie, problèmes de programmation et solutions . Addison-Wesley. ISBN 0-201-70434-X.
Sutter, Herb (2004). Style C++ exceptionnel . Addison-Wesley. ISBN. 0-201-76042-8.
Vandevoorde, David; Josuttis, Nicolai M. (2003). Modèles C++ : le guide complet . Addison-Wesley. ISBN 0-201-73484-2.
Liens externes
JTC1/SC22/WG21 – Groupe de travail sur la norme ISO/IEC C++
Standard C++ Foundation – une organisation à but non lucratif qui promeut l'utilisation et la compréhension du C++ standard. Bjarne Stroustrup est l'un des directeurs de l'organisation.
Mots-clés C++
Expressions C++
Priorité des opérateurs C++
C++ dans les projets frères de Wikipédia :

Médias de Commons

Citations de Wikiquote

Manuels scolaires de Wikibooks

Ressources de Wikiversité
vtet
C++
vtet
Langages de programmation
ComparaisonChronologieHistoire
AdaALGOL SimulaAPLAssembléeBASIQUE Visual Basic classique.FILETCC++C#COBOLErlang ÉlixirEn avantFortranAllerHaskellJavaJavaScript ManuscritJuliaKotlinZézayerLuaMATLABML Caml OCamlPascal Pascal ObjetPerl RakuPHPProloguePythonRRubisRouillerSQLGratterCoquillePetite conversationRapideplus...
 Listes : alphabétiqueCatégoriqueGénérationnelNon basé sur l'anglais Catégorie
vtet
Normes de l'Organisation internationale de normalisation (ISO)
vtet
normes CEI
Bases de données de contrôle d'autorité Modifiez ceci sur Wikidata
Catégories :C++Famille de langages de programmation AlgolFamille de langages de programmation C++Langages de programmation basés sur les classesLogiciel multiplateformeLangages de programmation de haut niveauLangages de programmation orientés objetLangages de programmation créés en 1983Langages de programmation avec une norme ISOLangages de programmation à typage statiqueLangages de programmation compilés
===================(02)======================
### [C++]
C++ ( / ˈsiːplʌsplʌs / , prononcé « C plus plus » et parfois abrégé en CPP ) est un langage de programmation de haut niveau à usage général créé par l' informaticien danois Bjarne Stroustrup . Initialement publié en 1985 comme une extension du langage de programmation C , il s'est depuis considérablement développé au fil du temps ; en 1997 , C++ possède des fonctionnalités orientées objet , génériques et fonctionnelles , en plus de fonctionnalités de manipulation de mémoire de bas niveau pour des systèmes comme les micro-ordinateurs ou pour créer des systèmes d'exploitation comme Linux ou Windows . Il est généralement implémenté comme un langage compilé , et de nombreux fournisseurs fournissent des compilateurs C++ , notamment la Free Software Foundation , LLVM , Microsoft , Intel , Embarcadero , Oracle et IBM . [ 14 ]

C++ a été conçu pour la programmation de systèmes et de logiciels embarqués , à ressources limitées et de grands systèmes, avec la performance , l'efficacité et la flexibilité d'utilisation comme points forts de sa conception. [ 15 ] C++ s'est également avéré utile dans de nombreux autres contextes, ses principaux atouts étant l'infrastructure logicielle et les applications à ressources limitées, [ 15 ] y compris les applications de bureau , les jeux vidéo , les serveurs (par exemple, le commerce électronique , la recherche sur le Web ou les bases de données ) et les applications critiques en termes de performances (par exemple, les commutateurs téléphoniques ou les sondes spatiales ). [ 16 ]

Français C++ est normalisé par l' Organisation internationale de normalisation (ISO), la dernière version de la norme ayant été ratifiée et publiée par l'ISO en octobre 2024 sous le nom d' ISO/IEC 14882:2024 (connue officieusement sous le nom de C++23 ). [ 17 ] Le langage de programmation C++ a été initialement normalisé en 1998 sous le nom d'ISO/IEC 14882:1998 , qui a ensuite été modifié par les normes C++03 , C++11 , C ++14 , C++17 et C++20 . La norme C++23 actuelle les remplace par de nouvelles fonctionnalités et une bibliothèque standard élargie . Avant la normalisation initiale en 1998, C++ a été développé par Stroustrup aux Bell Labs depuis 1979 comme une extension du langage C ; il voulait un langage efficace et flexible similaire à C qui fournisse également des fonctionnalités de haut niveau pour l'organisation des programmes. [ 18 ] Depuis 2012, C++ suit un calendrier de publication de trois ans [ 19 ] avec C++26 comme prochaine norme prévue. [ 20 ]

Malgré son adoption généralisée, certains programmeurs notables ont critiqué le langage C++ , notamment Linus Torvalds , [ 21 ] Richard Stallman , [ 22 ] Joshua Bloch , Ken Thompson , [ 23 ] [ 24 ] [ 25 ] et Donald Knuth . [ 26 ] [ 27 ] Cela est dû en grande partie à sa gestion manuelle de la mémoire, qui le rend vulnérable aux bogues de dépassement de tampon , qui représentent un risque de sécurité. [ 28 ]

Histoire

Bjarne Stroustrup, le créateur de C++, dans son bureau d'AT&T dans le New Jersey, vers  2000
En 1979, Bjarne Stroustrup , un informaticien danois , a commencé à travailler sur «C avec classes , prédécesseur de C++. [ 29 ] La création d'un nouveau langage est née de l'expérience de Stroustrup en programmation pour sa thèse de doctorat. Stroustrup a constaté que Simula possédait des fonctionnalités très utiles pour le développement de logiciels de grande envergure, mais que le langage était trop lent pour une utilisation pratique, tandis que BCPL était rapide mais trop bas niveau pour convenir au développement de logiciels de grande envergure. Lorsque Stroustrup a commencé à travailler chez AT&T Bell Labs , il a dû analyser le noyau UNIX en termes de calcul distribué . Se souvenant de son doctorat, Stroustrup a entrepris d'améliorer le langage C avec des fonctionnalités similaires à Simula. [ 30 ] Le C a été choisi pour sa polyvalence, sa rapidité, sa portabilité et sa large diffusion. Outre l'influence de C et de Simula, d'autres langages ont influencé ce nouveau langage, notamment ALGOL 68 , Ada , CLU et ML . [ citation requise ]

Initialement, le « C avec classes » de Stroustrup ajoutait des fonctionnalités au compilateur C, Cpre, notamment les classes , les classes dérivées , le typage fort , l'inlining et les arguments par défaut . [ 31 ]


Un quiz sur les fonctionnalités de C++11 donné à Paris en 2015
En 1982, Stroustrup commença à développer un successeur au C avec des classes, qu'il baptisa « C++ » ( ++opérateur d'incrémentation en C) après avoir essayé plusieurs autres noms. De nouvelles fonctionnalités furent ajoutées, notamment les fonctions virtuelles , la surcharge des noms de fonctions et des opérateurs , les références , les constantes, l'allocation de mémoire libre sécurisée (nouveau/suppression), une vérification de type améliorée et des commentaires sur une seule ligne de style BCPL avec deux barres obliques ( //). De plus, Stroustrup développa un nouveau compilateur autonome pour C++, Cfront .

En 1984, Stroustrup a implémenté la première bibliothèque d'entrée/sortie de flux. L'idée de fournir un opérateur de sortie plutôt qu'une fonction de sortie nommée a été suggérée par Doug McIlroy [ 2 ] (qui avait précédemment suggéré les tubes Unix ).

En 1985, la première édition du langage de programmation C++ a été publiée, qui est devenue la référence définitive pour le langage, car il n'y avait pas encore de norme officielle. [ 32 ] La première implémentation commerciale de C++ a été publiée en octobre de la même année. [ 29 ]

En 1989, C++ 2.0 a été publié, suivi par la deuxième édition mise à jour du langage de programmation C++ en 1991. [ 33 ] Les nouvelles fonctionnalités de la version 2.0 comprenaient l'héritage multiple, les classes abstraites, les fonctions membres statiques, les fonctions membres const et les membres protégés. En 1990, le Manuel de référence C++ annoté a été publié. Ce travail est devenu la base de la future norme. Les ajouts de fonctionnalités ultérieurs comprenaient les modèles , les exceptions , les espaces de noms , les nouveaux casts et un type booléen .

En 1998, C++98 a été publié, standardisant le langage, et une mise à jour mineure ( C++03 ) a été publiée en 2003.

Après C++98, le C++ a évolué relativement lentement jusqu'à la publication, en 2011, de la norme C++11 , qui ajoutait de nombreuses nouvelles fonctionnalités, élargissait la bibliothèque standard et offrait davantage de fonctionnalités aux programmeurs C++. Après une mise à jour mineure de C++14 publiée en décembre 2014, divers ajouts ont été introduits dans C++17 . [ 34 ] Après sa finalisation en février 2020, [ 35 ] un projet de norme C++20 a été approuvé le 4 septembre 2020 et officiellement publié le 15 décembre 2020. [ 36 ] [ 37 ]

Le 3 janvier 2018, Stroustrup a été annoncé comme le lauréat 2018 du prix Charles Stark Draper d'ingénierie, « pour la conceptualisation et le développement du langage de programmation C++ ». [ 38 ]

En décembre 2022, C++ se classait troisième au classement TIOBE , surpassant Java pour la première fois dans l'histoire de l'indice. En novembre 2024 , le langage se classait deuxième après Python , Java étant troisième. [ 39 ]

Étymologie
Selon Stroustrup, « le nom signifie la nature évolutive des changements par rapport à C. » [ 40 ] Ce nom est attribué à Rick Mascitti (mi-1983) [ 31 ] et a été utilisé pour la première fois en décembre 1983. Lorsque Mascitti a été interrogé de manière informelle en 1992 sur le nom, il a indiqué qu'il avait été donné dans un esprit ironique . Le nom vient de ++ l'opérateur de C (qui incrémente la valeur d'une variable ) et d'une convention de nommage courante consistant à utiliser « + » pour indiquer un programme informatique amélioré.

Au cours de la période de développement du C++, le langage a été appelé « nouveau C » et « C avec classes » [ 31 ] [ 41 ] avant d'acquérir son nom définitif.

Philosophie
Tout au long de la vie de C++, son développement et son évolution ont été guidés par un ensemble de principes : [ 30 ]

Il doit être motivé par des problèmes réels et ses fonctionnalités doivent être immédiatement utiles dans les programmes du monde réel.
Chaque fonctionnalité doit être implémentable (avec une manière raisonnablement évidente de le faire).
Les programmeurs devraient être libres de choisir leur propre style de programmation, et ce style devrait être entièrement pris en charge par C++.
Autoriser une fonctionnalité utile est plus important que d’empêcher toute mauvaise utilisation possible de C++.
Il devrait fournir des moyens d’organiser les programmes en parties distinctes et bien définies, ainsi que des moyens de combiner des parties développées séparément.
Aucune violation implicite du système de types (mais autorise les violations explicites, c'est-à-dire celles explicitement demandées par le programmeur).
Les types créés par l’utilisateur doivent bénéficier du même support et des mêmes performances que les types intégrés.
Les fonctionnalités inutilisées ne doivent pas avoir d'impact négatif sur les exécutables créés (par exemple, en réduisant les performances).
Il ne devrait y avoir aucun langage sous C++ (à l'exception du langage assembleur ).
C++ devrait fonctionner aux côtés d’autres langages de programmation existants , plutôt que de favoriser son propre environnement de programmation séparé et incompatible .
Si l’intention du programmeur est inconnue, permettez-lui de la spécifier en fournissant un contrôle manuel.
Standardisation
Articles principaux : C++03 , C++11 , C++14 , C++17 , C++20 , C++23 et C++26
Normes C++
Année	Norme ISO/CEI	Nom informel
1998	14882:1998 [ 42 ]	C++98
2003	14882:2003 [ 43 ]	C++03
2011	14882:2011 [ 44 ]	C++11 , C++0x
2014	14882:2014 [ 45 ]	C++14 , C++1y
2017	14882:2017 [ 46 ]	C++17 , C++1z
2020	14882:2020 [ 47 ]	C++20 , C++2a
2024	14882:2024 [ 17 ]	C++23 , C++2b
À déterminer		C++26 , C++2c
Le C++ est normalisé par un groupe de travail ISO appelé JTC1/SC22/WG21 . À ce jour, sept révisions de la norme C++ ont été publiées et la prochaine révision, C++26 , est actuellement en cours .


Scène lors de la réunion du comité des normes C++ à Stockholm en 1996
En 1998, le groupe de travail ISO a normalisé C++ pour la première fois sous la norme ISO/IEC 14882:1998 , plus connue sous le nom informel de C++98 . En 2003, il a publié une nouvelle version de la norme C++, appelée ISO/IEC 14882:2003 , qui corrigeait les problèmes identifiés dans C++98.

La prochaine révision majeure de la norme a été appelée de manière informelle « C++0x », mais elle n'a été publiée qu'en 2011. [ 48 ] C++11 (14882:2011) comprenait de nombreux ajouts au langage de base et à la bibliothèque standard. [ 44 ]

En 2014, C++14 (également connu sous le nom de C++1y) a été publié comme une petite extension de C++11, comportant principalement des corrections de bogues et de petites améliorations. [ 49 ] Les procédures de vote du projet de norme internationale se sont achevées à la mi-août 2014. [ 50 ]

Après C++14, une révision majeure C++17 , connue officieusement sous le nom de C++1z, a été achevée par le comité ISO C++ à la mi-juillet 2017 et a été approuvée et publiée en décembre 2017. [ 51 ]

Dans le cadre du processus de normalisation, l’ISO publie également des rapports et des spécifications techniques :

ISO/IEC TR 18015:2006 [ 52 ] sur l'utilisation du C++ dans les systèmes embarqués et sur les implications en termes de performances des fonctionnalités du langage et de la bibliothèque C++,
ISO/IEC TR 19768:2007 [ 53 ] (également connu sous le nom de Rapport technique C++ 1 ) sur les extensions de bibliothèque principalement intégrées dans C++11 ,
ISO/IEC TR 29124:2010 [ 54 ] sur les fonctions mathématiques spéciales, intégrées dans C++17 ,
ISO/IEC TR 24733:2011 [ 55 ] sur l'arithmétique décimale à virgule flottante ,
ISO/IEC TS 18822:2015 [ 56 ] sur la bibliothèque de systèmes de fichiers standard, intégrée dans C++17 ,
ISO/IEC TS 19570:2015 [ 57 ] sur les versions parallèles des algorithmes de la bibliothèque standard, intégrés dans C++17 ,
ISO/IEC TS 19841:2015 [ 58 ] sur la mémoire transactionnelle logicielle ,
ISO/IEC TS 19568:2015 [ 59 ] sur un nouvel ensemble d'extensions de bibliothèque, dont certaines sont déjà intégrées dans C++17 ,
ISO/IEC TS 19217:2015 [ 60 ] sur les concepts C++ , intégrés dans C++20 ,
ISO/IEC TS 19571:2016 [ 61 ] sur les extensions de bibliothèque pour la concurrence, dont certaines sont déjà intégrées dans C++20 ,
ISO/IEC TS 19568:2017 [ 62 ] sur un nouvel ensemble d'extensions de bibliothèque à usage général,
ISO/IEC TS 21425:2017 [ 63 ] sur les extensions de bibliothèque pour les plages, intégrées dans C++20 ,
ISO/IEC TS 22277:2017 [ 64 ] sur les coroutines, intégrées dans C++20 ,
ISO/IEC TS 19216:2018 [ 65 ] sur la bibliothèque réseau,
ISO/IEC TS 21544:2018 [ 66 ] sur les modules, intégrés dans C++20 ,
ISO/IEC TS 19570:2018 [ 67 ] sur un nouvel ensemble d'extensions de bibliothèque pour le parallélisme
ISO/IEC TS 23619:2021 [ 68 ] sur les nouvelles extensions pour la programmation réflexive (réflexion),
ISO/IEC TS 9922:2024 [ 69 ] sur un nouvel ensemble d'extensions de concurrence, et
ISO/IEC TS 19568:2024 [ 70 ] sur un autre nouvel ensemble d'extensions de bibliothèque.
D’autres spécifications techniques sont en cours de développement et en attente d’approbation.

Langue
Article principal : Syntaxe C++
Le langage C++ comporte deux composantes principales : un mappage direct des fonctionnalités matérielles fournies principalement par le sous-ensemble C, et des abstractions sans surcharge basées sur ces mappages. Stroustrup décrit le C++ comme « un langage de programmation d'abstraction léger [conçu] pour construire et utiliser des abstractions efficaces et élégantes » ; [ 15 ] et « offrir à la fois accès au matériel et abstraction est la base du C++. Son efficacité le distingue des autres langages. » [ 71 ]

Le C++ hérite de la majeure partie de la syntaxe du C. Un programme « Hello World » conforme à la norme C est également un programme « Hello World » C++ valide. Voici la version de Bjarne Stroustrup du programme « Hello World » , qui utilise la fonctionnalité de flux de la bibliothèque standard C++ pour écrire un message sur la sortie standard : [ 72 ] [ 73 ] [ note 2 ]

#include <iostream>

int main ()
{
    std :: cout << "Bonjour tout le monde ! \n " ;
}
Bibliothèque standard

Le projet de norme « Working Paper » qui a été approuvé sous le nom de C++98 ; la moitié de sa taille était consacrée à la bibliothèque standard C++.
Article principal : Bibliothèque standard C++
La norme C++ se compose de deux parties : le langage principal et la bibliothèque standard. Les programmeurs C++ s'attendent à la présence de cette dernière sur chaque implémentation majeure de C++ ; elle inclut des types d'agrégats ( vecteurs , listes, cartes, ensembles, files d'attente, piles, tableaux, tuples), des algorithmes (find, for_each , binary_search , random_shuffle, etc.), des fonctions d'entrée/sortie ( iostream , pour la lecture et l'écriture sur la console et les fichiers), une bibliothèque de systèmes de fichiers, la prise en charge de la localisation, des pointeurs intelligents pour la gestion automatique de la mémoire, la prise en charge des expressions régulières , une bibliothèque multithreading , la prise en charge des atomes (permettant la lecture ou l'écriture d'une variable par un seul thread à la fois sans synchronisation externe), des utilitaires de temps (mesure, obtention de l'heure actuelle, etc.), un système de conversion des rapports d'erreurs n'utilisant pas d'exceptions C++ en exceptions C++, un générateur de nombres aléatoires et une version légèrement modifiée de la bibliothèque standard C (pour la rendre compatible avec le système de types C++).

Une grande partie de la bibliothèque C++ repose sur la bibliothèque de modèles standard (STL). Parmi les outils utiles fournis par la STL figurent des conteneurs sous forme de collections d'objets (tels que des vecteurs et des listes ), des itérateurs offrant un accès aux conteneurs de type tableau, et des algorithmes effectuant des opérations telles que la recherche et le tri.

De plus, des (multi)maps ( tableaux associatifs ) et des (multi)sets sont fournis, exportant tous des interfaces compatibles. Par conséquent, l'utilisation de modèles permet d'écrire des algorithmes génériques fonctionnant avec n'importe quel conteneur ou sur n'importe quelle séquence définie par des itérateurs.

Comme en C, les fonctionnalités de la bibliothèque sont accessibles via la #include directive « include un en-tête standard » . La bibliothèque standard C++ fournit 105 en-têtes standard, dont 27 sont obsolètes. Avec l'introduction des modules en C++20 , ces en-têtes sont accessibles via import, et en C++23 , l'intégralité de la bibliothèque standard peut désormais être importée directement en tant que module, via . Actuellement, la bibliothèque standard C++ fournit deux modules, et (un module de compatibilité pour lequel exporte les fonctionnalités de la bibliothèque standard C dans l'espace de noms global). import std;stdstd.compatstd

La norme intègre la STL, initialement conçue par Alexander Stepanov , qui a expérimenté des algorithmes et des conteneurs génériques pendant de nombreuses années. En commençant avec le C++, il a finalement trouvé un langage permettant de créer des algorithmes génériques (par exemple, le tri STL) encore plus performants que, par exemple, la bibliothèque standard C qsort, grâce à des fonctionnalités C++ comme l'utilisation de l'inlining et de la liaison à la compilation au lieu de pointeurs de fonction. La norme ne la désigne pas comme « STL », car elle n'en est qu'une partie, mais ce terme reste largement utilisé pour la distinguer du reste de la bibliothèque standard (flux d'entrée/sortie, internationalisation, diagnostics, sous-ensemble de la bibliothèque C, etc.). [ 74 ]

La plupart des compilateurs C++, et tous les principaux, fournissent une implémentation conforme aux normes de la bibliothèque standard C++.

Directives de base C++
Les C++ Core Guidelines [ 75 ] sont une initiative menée par Bjarne Stroustrup, l'inventeur du C++, et Herb Sutter, le coordinateur et président du groupe de travail ISO C++, pour aider les programmeurs à écrire du « C++ moderne » en utilisant les meilleures pratiques pour les normes de langage C++11 et plus récentes, et pour aider les développeurs de compilateurs et d'outils de vérification statique à créer des règles pour détecter les mauvaises pratiques de programmation.

L'objectif principal est d'écrire de manière efficace et cohérente du C++ sûr en termes de type et de ressources.

Les lignes directrices de base ont été annoncées [ 76 ] lors du discours d’ouverture du CPPCon 2015.

Les lignes directrices sont accompagnées de la bibliothèque de support des lignes directrices (GSL), [ 77 ] une bibliothèque d'en-têtes uniquement de types et de fonctions pour implémenter les lignes directrices de base et des outils de vérification statique pour appliquer les règles des lignes directrices. [ 78 ]

Compatibilité
Afin de donner plus de liberté aux fournisseurs de compilateurs, le comité de normalisation C++ a décidé de ne pas imposer l'implémentation de la modification des noms , de la gestion des exceptions et d'autres fonctionnalités spécifiques à l'implémentation. L'inconvénient de cette décision est que le code objet produit par différents compilateurs est susceptible d'être incompatible. Il existe cependant des tentatives de normalisation des compilateurs pour des machines ou des systèmes d'exploitation spécifiques . Par exemple, l'ABI Itanium C++ est indépendante du processeur (malgré son nom) et est implémentée par GCC et Clang. [ 79 ]

Avec C
Article principal : Compatibilité de C et C++
Le C++ est souvent considéré comme un sur-ensemble du C , mais ce n'est pas tout à fait vrai. [ 80 ] La plupart du code C peut facilement être compilé correctement en C++, mais il existe quelques différences qui rendent certains codes C valides invalides ou se comportent différemment en C++. Par exemple, le C autorise la conversion implicite de vers d'autres types de pointeurs, mais pas le C++ (pour des raisons de sécurité des types). De plus, le C++ définit de nombreux nouveaux mots-clés, tels que et , qui peuvent être utilisés comme identifiants (par exemple, des noms de variables) dans un programme C. void*newclass

Français Certaines incompatibilités ont été supprimées par la révision de 1999 de la norme C ( C99 ), qui prend désormais en charge les fonctionnalités C++ telles que les commentaires de ligne ( //) et les déclarations mélangées au code. D'autre part, C99 a introduit un certain nombre de nouvelles fonctionnalités que C++ ne prenait pas en charge et qui étaient incompatibles ou redondantes en C++, telles que les tableaux de longueur variable , les types de nombres complexes natifs (cependant, la classe de la bibliothèque standard C++ fournit des fonctionnalités similaires, bien que non compatibles avec le code), les initialiseurs désignés, les littéraux composés et le mot-clé. [ 81 ] Certaines des fonctionnalités introduites par C99 ont été incluses dans la version ultérieure de la norme C++, C++11 (parmi celles qui n'étaient pas redondantes). [ 82 ] [ 83 ] [ 84 ] Cependant, la norme C++11 introduit de nouvelles incompatibilités, telles que l'interdiction d'assigner un littéral de chaîne à un pointeur de caractère, ce qui reste valide en C. std::complexrestrict

Pour mélanger du code C et du code C++, toute déclaration ou définition de fonction appelée ou utilisée à la fois en C et en C++ doit être déclarée avec une liaison C, en la plaçant dans un bloc. Une telle fonction ne doit pas dépendre de fonctionnalités dépendant de la modification des noms (c'est-à-dire de la surcharge de fonction). extern "C" {/*...*/}

Assemblage en ligne
Les programmes développés en C ou C++ utilisent souvent l'assembleur en ligne pour tirer parti de ses fonctionnalités de bas niveau, de sa vitesse supérieure et de son contrôle amélioré par rapport aux langages de programmation de haut niveau [ 85 ] [ 86 ] lorsque l'optimisation des performances est essentielle. C++ prend en charge l'intégration du langage assembleur à l'aide de déclarations asm [ 87 ] , mais la compatibilité de l'assembleur en ligne varie considérablement entre les compilateurs et les architectures. Contrairement aux fonctionnalités des langages de haut niveau tels que Python ou Java , le code assembleur dépend fortement du processeur sous-jacent et de l'implémentation du compilateur.

Variations entre les compilateurs
Différents compilateurs C++ implémentent l'assemblage en ligne de manières distinctes.

GCC ( GNU Compiler Collection ) et Clang [ 88 ] : Utilisent la syntaxe d'assemblage en ligne étendue de GCC. L'utilisation __asm__du mot-clé plutôt que asmde lors de l'écriture de code pouvant être compilé avec les options et permet de spécifier les opérandes d'entrée/sortie et les registres écrasés. Cette approche est largement adoptée, notamment par les compilateurs Intel [ 89 ] et IBM [ 90 ] .-ansi-std
MSVC ( Microsoft Visual C++ ) : l'assembleur en ligne est intégré au compilateur. Auparavant, l'assembleur en ligne était pris en charge via le __asmmot-clé, mais cette prise en charge a été supprimée en mode 64 bits, nécessitant des modules .asm distincts [ 91 ] .
TI ARM Clang et compilateurs embarqués [ 92 ] : Certains compilateurs de systèmes embarqués, comme TI Arm Clang de Texas Instruments, autorisent l'assemblage en ligne mais imposent des règles plus strictes pour éviter les conflits avec les conventions de registre et les conventions d'appel.
Interopérabilité entre C++ et Assembleur
C++ fournit deux méthodes principales d’intégration du code ASM.

1. Fichiers d'assemblage autonomes – Le code d'assemblage est écrit séparément et lié au code C++. [ 93 ]

2. Assemblage en ligne – Le code assembleur est intégré au code C++ à l’aide d’extensions spécifiques au compilateur.

Exemple de code pour la compatibilité ASM

Lors de l'appel d'une fonction d'assemblage à partir de C++, utilisez pour empêcher la modification du nom C++.extern "C"
//main.cpp
importer std ;

extern "C" int add_asm ( int , int ); // Déclarer la fonction d'assemblage

int main () {
    int résultat = add_asm ( 5 , 7 );
    std :: println ( "Résultat de l'ASM : {}" , result );
    renvoie 0 ;
}
#code asm utilisant l'architecture RISC-V
. section . texte
. global add_asm

add_asm :
    ajouter a0 , a0 , a1 # Ajouter le premier argument ( a0 ) et le deuxième argument ( a1 ), stocker dans a0
    ret # Retour ( a0 contient la valeur de retour )
Les variables globales dans l'assembly doivent être déclarées comme externen C++ et marquées .globaldans l'assembly.
// main.cpp
importer std ;

extern "C" int global_var ; // Déclarer une variable globale à partir de l'assembly

int main () {
    std :: println ( "Variable globale de l'ASM : {}" , global_var );
    renvoie 0 ;
}
#asm utilisant l'architecture RISC-V
. section . données
. global global_var
. aligner 4
global_var :
    . mot 42 # Définir la valeur entière
L'assemblage en ligne permet d'intégrer ASM directement dans C++ à l'aide du asmmot-clé.
//main.cpp (en utilisant le compilateur GCC/CLANG)
importer std ;

int main () {
    int x = 10 , y = 20 , somme ;

    asm volatile (
        "ajouter %0, %1, %2"
        : "=r" ( sum ) // Opérande de sortie (stocké dans un registre)
        : "r" ( x ), "r" ( y ) // Opérandes d'entrée (stockés dans des registres)
    );

    std :: println ( "Somme en utilisant ASM en ligne : {}" , sum );
    renvoie 0 ;
}
Voir aussi
icône	Portail de programmation informatique
Carbone (langage de programmation)
Comparaison des langages de programmation
Liste des compilateurs C++
Aperçu du C++
Catégorie : Bibliothèques C++
Notes de bas de page
 Pour l'idée des coroutines sans pile C++20.
 Ce code est directement copié de la page d'errata de Bjarne Stroustrup (p. 633). Il aborde l'utilisation de'\n'plutôt questd::endl. Voir également « Puis-je écrire « void main() » ? » (archivé le 2 juillet 2020 sur Wayback Machine) pour une explication de l'implicitereturn 0;de lamainfonction. Ce retour implicite n'est pas disponible dans les autres fonctions.
Références
« Présentation des modules en C++ » . Microsoft. 24 avril 2023.
 Stroustrup, Bjarne (1996). « Une histoire du C++ : 1979-1991 ».Histoire des langages de programmation --- II.ACM. pp. 699–769.doi: 10.1145/234286.1057836 .
 Stroustrup, Bjarne (16 décembre 2021). « C++20 : Atteindre les objectifs du C++ - Bjarne Stroustrup - CppCon 2021 » . CppCon. Archivé de l'original le 30 décembre 2021. Consulté le 30 décembre 2021 .
 Stroustrup, Bjarne (12 juin 2020). « Prospérer dans un monde saturé et en constante évolution : C++ 2006–2020 » . Actes de l'ACM sur les langages de programmation . 4 (HOPL). Association for Computing Machinery (ACM) : 1– 168. doi : 10.1145/3386320 . ISSN : 2475-1421 . S2CID : 219603741 .
 Naugler, David (mai 2007). « C# 2.0 pour les programmeurs C++ et Java : atelier de conférence ». Journal of Computing Sciences in Colleges . 22 (5). Bien que C# ait été fortement influencé par Java, il l'a également été par C++ et doit être considéré comme un descendant à la fois de C++ et de Java.
« Spécifications de la chapelle (Remerciements) » (PDF) . Cray Inc., 1er octobre 2015. Archivé (PDF) de l'original le 24 juin 2018. Consulté le 14 janvier 2016 .
 Fogus, Michael. « Rich Hickey Q&R » . Code Quarterly . Archivé de l'original le 11 janvier 2017. Consulté le 11 janvier 2017 .
 Harry. H. Chaudhary (28 juillet 2014). « Décrypter l'entretien de programmation Java : plus de 2 000 questions/réponses d'entretien Java » . Archivé de l'original le 27 mai 2021. Consulté le 29 mai 2016 .
 Roger Poon (1er mai 2017). « Mise à l'échelle de JS++ : abstraction, performances et lisibilité » . Archivé de l'original le 11 mai 2020. Consulté le 21 avril 2020 .
« L'évolution d'un langage d'extension : une histoire de Lua » . www.lua.org . Consulté le 4 janvier 2023 .
« FAQ sur le langage de programmation Nim » . Archivé de l'original le 11 juillet 2017. Consulté le 21 avril 2020 .
« 9. Classes — Documentation Python 3.6.4 » . docs.python.org . Archivé de l'original le 23 octobre 2012 . Consulté le 9 janvier 2018 .
« Influences – La référence Rust » . doc.rust-lang.org . Consulté le 4 janvier 2023 .
Stroustrup, Bjarne (1997). « 1 ». Le langage de programmation C++ (3e éd.). Addison-Wesley. ISBN 0-201-88954-4. OCLC  59193992 .
 Stroustrup, B. (6 mai 2014).« Lecture: The essence of C++. University of Edinburgh ». YouTube .Archivéde l'original le 28 avril 2015. Consulté le 12 juin 2015.
 Stroustrup, Bjarne (17 février 2014). « Applications C++ » . stroustrup.com . Archivé de l'original le 4 avril 2021. Consulté le 5 mai 2014 .
 « ISO/IEC 14882:2024 ». Organisation internationale de normalisation. Consulté le 21 octobre 2020.
« Page d'accueil de Bjarne Stroustrup » . www.stroustrup.com . Archivé de l'original le 14 mai 2019. Consulté le 15 mai 2013 .
« Calendrier IS C++ » (PDF) . Archivé (PDF) de l'original le 10 août 2020. Consulté le 9 août 2020 .
« C++ ; Vers où il va » . Archivé de l'original le 3 décembre 2018. Consulté le 3 décembre 2018 .
« Re : [RFC] Convertir builin-mailinfo.c pour utiliser The Better String Library » (Liste de diffusion). 6 septembre 2007. Archivé de l'original le 8 mars 2021. Consulté le 31 mars 2015 .
« Re : Des efforts pour attirer plus d'utilisateurs ? » (Liste de diffusion). 12 juillet 2010. Archivé de l'original le 21 mars 2015. Consulté le 31 mars 2015 .
 Andrew Binstock (18 mai 2011). « Dr. Dobb's : Entretien avec Ken Thompson » . Dr. Dobb's . Archivé de l'original le 13 mars 2014. Consulté le 7 février 2014 .
 Peter Seibel (16 septembre 2009). Codeurs au travail : Réflexions sur l'art de programmer . Apress. pp.  475–476 . ISBN 978-1-4302-1948-4. Archivé de l'original le 1er décembre 2019 . Récupéré le 9 novembre 2017 .
« C++ dans Coders at Work » . 16 octobre 2009. Archivé de l'original le 10 novembre 2017. Consulté le 9 novembre 2017 .
« Entretien avec Donald Knuth » . Dr. Dobb's . Archivé de l'original le 8 mars 2021. Consulté le 18 juillet 2021 .
« (La)TeX Navigator » . Archivé de l'original le 20 novembre 2017. Consulté le 10 novembre 2017 .
 Claburn, Thomas (2 mars 2025). « Le créateur du C++ appelle à l'aide pour défendre son langage de programmation contre les « attaques graves »" . Le Registre . Récupéré le 5 mars 2025 .
 Stroustrup, Bjarne (7 mars 2010).« FAQ de Bjarne Stroustrup : Quand le C++ a-t-il été inventé ? ».stroustrup.com.Archivéde l'original le 6 février 2016. Consulté le 16 septembre 2010.
 Stroustrup, Bjarne.« Évolution d'un langage dans et pour le monde réel : C++ 1991-2006 »(PDF).Archivé(PDF)de l'original le 20 novembre 2007.Consulté le 14 août 2013.
 Stroustrup, Bjarne.« Histoire du C++ : 1979-1991 »(PDF).Archivé(PDF)de l'original le 2 février 2019.Consulté le 18 juillet 2013.
 Stroustrup, Bjarne. « Le langage de programmation C++ » (première éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Stroustrup, Bjarne. « Le langage de programmation C++ » (deuxième éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Sutter, Herb (30 juin 2016). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Oulu) » . herbsutter.com . Archivé de l'original le 8 octobre 2016. La prochaine norme après C++17 sera C++20.
 Dusíková, Hana (6 novembre 2019). « N4817 : Invitation et informations à la réunion de Prague 2020 » (PDF) . Archivé (PDF) de l'original le 29 décembre 2019. Consulté le 13 février 2020 .
« État actuel » . isocpp.org . Archivé de l'original le 8 septembre 2020. Consulté le 7 septembre 2020 .
« C++20 approuvé – Herb Sutter » . isocpp.org . Archivé de l'original le 11 septembre 2020. Consulté le 8 septembre 2020 .
« Le pionnier de l'informatique Bjarne Stroustrup recevra le prix Charles Stark Draper d'ingénierie 2018 » (communiqué de presse). Académie nationale d'ingénierie. 3 janvier 2018. Archivé de l'original le 3 janvier 2018. Consulté le 14 décembre 2021 .
 TIOBE (novembre 2024). « Indice TIOBE de novembre 2024 » . TIOBE.com . Société TIOBE. Archivé de l'original le 18 novembre 2024. Consulté le 18 novembre 2024 .
« FAQ de Bjarne Stroustrup – D'où vient le nom « C++ » ? » . Archivé de l'original le 6 février 2016. Consulté le 16 janvier 2008 .
« C pour les programmeurs C++ » . Université Northeastern . Archivé de l'original le 17 novembre 2010. Consulté le 7 septembre 2015 .
« ISO/CEI 14882:1998 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2017. Consulté le 23 novembre 2018 .
« ISO/CEI 14882:2003 » . Organisation internationale de normalisation. Archivé de l'original le 13 août 2021. Consulté le 23 novembre 2018 .
 « ISO/IEC 14882:2011 ». Organisation internationale de normalisation.Archivéde l'original le 27 mai 2016.Consulté le 23 novembre 2018.
« ISO/IEC 14882:2014 » . Organisation internationale de normalisation. Archivé de l'original le 29 avril 2016. Consulté le 23 novembre 2018 .
« ISO/IEC 14882:2017 » . Organisation internationale de normalisation. Archivé de l'original le 29 janvier 2013. Consulté le 2 décembre 2017 .
« ISO/IEC 14882:2020 » . Organisation internationale de normalisation. Archivé de l'original le 16 décembre 2020. Consulté le 16 décembre 2020 .
« Nous disposons d'une norme internationale : C++0x est approuvé à l'unanimité . » Sutter's Mill . 12 août 2011. Archivé de l'original le 28 juin 2018. Consulté le 23 novembre 2018 .
« L'avenir du C++ » . Archivé de l'original le 23 octobre 2018. Consulté le 23 novembre 2018 via channel9.msdn.com.
« Nous avons C++14 ! : C++ standard » . isocpp.org . Archivé de l'original le 19 août 2014 . Consulté le 19 août 2014 .
 Sutter, Herb (15 juillet 2017). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Toronto) » . Archivé de l'original le 6 août 2017. Consulté le 4 août 2017 .
« ISO/IEC TR 18015:2006 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 19768:2007 » . Organisation internationale de normalisation. Archivé de l'original le 4 mars 2016. Consulté le 15 février 2019 .
« ISO/IEC TR 29124:2010 » . Organisation internationale de normalisation. Archivé de l'original le 12 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 24733:2011 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 18822:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19841:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19217:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19571:2016 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21425:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 22277:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19216:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21544:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 23619:2021 » . Organisation internationale de normalisation. Archivé de l'original le 15 décembre 2018. Consulté le 11 octobre 2021 .
« ISO/IEC TS 9922:2024 » . Organisation internationale de normalisation. Archivé de l'original le 1er avril 2025. Consulté le 1er avril 2025 .
« ISO/IEC TS 19568:2024 » . Organisation internationale de normalisation. Archivé de l'original le 25 février 2025. Consulté le 1er avril 2025 .
 B. Stroustrup (interviewé par Sergio De Simone) (30 avril 2015). « Stroustrup : Réflexions sur C++17 - Une interview » . Archivé de l'original le 8 juillet 2015. Consulté le 8 juillet 2015 .
 Stroustrup, Bjarne (2000). Le langage de programmation C++ (éd. spéciale). Addison-Wesley. p. 46. ISBN 0-201-70073-5.
 Stroustrup, Bjarne. « Problèmes en suspens concernant le langage de programmation C++ (3e édition) » . Archivé de l'original le 5 mai 2014. Consulté le 5 mai 2014 .
 Graziano Lo Russo (2008). « Entretien avec A. Stepanov » . stlport.org . Archivé de l'original le 4 mars 2009. Consulté le 8 octobre 2015 .
« Directives C++ Core » . isocpp.github.io . Archivé de l'original le 16 février 2020 . Consulté le 9 février 2020 .
« Bjarne Stroustrup annonce les directives de base du C++ : C++ standard » . isocpp.org . Archivé de l'original le 11 mai 2020. Consulté le 31 mars 2020 .
« microsoft/GSL » . 18 juillet 2021. Archivé de l'original le 18 juillet 2021. Consulté le 18 juillet 2021 via GitHub.
« Utilisation des vérificateurs des directives de base C++ » . Microsoft Learn . Archivé de l'original le 13 août 2021. Consulté le 31 mars 2020 .
« Résumé de l'ABI C++ » . 20 mars 2001. Archivé de l'original le 10 juillet 2018. Consulté le 30 mai 2006 .
« FAQ de Bjarne Stroustrup – Le C est-il un sous-ensemble du C++ ? » . Archivé de l'original le 6 février 2016. Consulté le 5 mai 2014 .
« C9X – La nouvelle norme C » . Archivé de l'original le 21 juin 2018. Consulté le 27 décembre 2008 .
« Prise en charge de C++0x dans GCC » . Archivé de l'original le 21 juillet 2010. Consulté le 12 octobre 2010 .
« Fonctionnalités principales du langage C++0x dans VC10 : le tableau » . Archivé de l'original le 21 août 2010. Consulté le 12 octobre 2010 .
« Clang - État des versions C++98, C++11 et C++14 » . Clang.llvm.org. 12 mai 2013. Archivé de l'original le 4 juillet 2013. Consulté le 10 juin 2013 .
 Bokil, Milind A. (2021). « Écriture de routines d'assemblage dans les programmes C/C++ et Java ». ResearchGate. Consulté le 1er avril 2025.
 Vilhena, Paulo Emílio de ; Lahav, Ori ; Vafeiadis, Viktor ; Raad, Azalea (2024). « Extension du modèle de mémoire C/C++ avec l'assemblage en ligne ». Actes de l'ACM sur les langages de programmation, vol. 8, OOPSLA2, article 309. doi:10.1145/3689749.
 Contributeurs de cppreference.com. « Déclaration ASM ». cppreference.com . Consulté le 1er avril 2025.
« Asm étendu (utilisation de la collection de compilateurs GNU) » . Documentation en ligne de GCC . Projet GNU . Consulté le 1er avril 2025 .
 Intel Corporation. « Assemblage en ligne ». Guide du développeur et référence du compilateur Intel® C++ Classic , version 2021.9. Consulté le 1er avril 2025.
 IBM. « Instructions d'assemblage en ligne (extension IBM) ». Documentation IBM . Consulté le 1er avril 2025.
« Présentation de l'assembleur en ligne » . Microsoft Learn . Microsoft . Consulté le 1er avril 2025 .
« Interfaçage de C et C++ avec le langage assembleur » . Texas Instruments . Texas Instruments Incorporated. 23 février 2025. Consulté le 1er avril 2025 .
« Liaison C++ vers ASM dans GCC » . Wiki OSDev . Consulté le 1er avril 2025 .
Lectures complémentaires
Abrahams, David ; Gurtovoy, Aleksey (2005). Métaprogrammation de modèles C++ : concepts, outils et techniques issus de Boost et au-delà . Addison-Wesley. ISBN 0-321-22725-5.
Alexandrescu, Andrei (2001). Conception C++ moderne : Programmation générique et modèles de conception appliqués . Addison-Wesley. ISBN. 0-201-70431-5.
Alexandrescu, Andrei ; Sutter, Herb (2004). Normes de conception et de codage C++ : règles et directives pour l'écriture de programmes . Addison-Wesley. ISBN 0-321-11358-6.
Becker, Pete (2006). Les extensions de la bibliothèque standard C++ : tutoriel et référence . Addison-Wesley. ISBN. 0-321-41299-0.
Cassé, Frank (2010). Annotations C++ . Université de Groningue. ISBN 978-90-367-0470-0. Archivé de l'original le 28 avril 2010 . Récupéré le 28 avril 2010 .
Coplien, James O. (1994) [réédité avec corrections, année de publication originale : 1992]. C++ avancé : Styles et expressions idiomatiques de programmation . Addison-Wesley. ISBN 0-201-54855-0.
Dewhurst, Stephen C. (2005). C++ Common Knowledge : Programmation intermédiaire essentielle . Addison-Wesley. ISBN. 0-321-32192-8.
Conseil de l'industrie des technologies de l'information (15 octobre 2003). Langages de programmation – C++ (deuxième éd.). Genève : ISO/IEC. 14882:2003(E).
Josuttis, Nicolai M. (2012). La bibliothèque standard C++ : tutoriel et référence (deuxième éd.). Addison-Wesley. ISBN. 978-0-321-62321-8.
Koenig, Andrew ; Moo, Barbara E. (2000). C++ accéléré – Programmation pratique par l'exemple . Addison-Wesley. ISBN 0-201-70353-X.
Lippman, Stanley B. ; Lajoie, Josée; Moo, Barbara E. (2011). Introduction à C++ (Cinquième éd.). Addison-Wesley. ISBN 978-0-321-71411-4.
Lippman, Stanley B. (1996). Au cœur du modèle objet C++ . Addison-Wesley. ISBN. 0-201-83454-5.
Meyers, Scott (2005). Effective C++ (3e éd.). Addison-Wesley. ISBN. 0-321-33487-6.
Stroustrup, Bjarne (2013). Le langage de programmation C++ (quatrième éd.). Addison-Wesley. ISBN. 978-0-321-56384-2.
Stroustrup, Bjarne (1994). Conception et évolution de C++ . Addison-Wesley. ISBN. 0-201-54330-3.
Stroustrup, Bjarne (2014). Programmation : Principes et pratique en C++ (2e éd.). Addison-Wesley. ISBN. 978-0-321-99278-9.
Sutter, Herb (2001). C++ encore plus exceptionnel : 40 nouveaux casse-têtes d'ingénierie, problèmes de programmation et solutions . Addison-Wesley. ISBN 0-201-70434-X.
Sutter, Herb (2004). Style C++ exceptionnel . Addison-Wesley. ISBN. 0-201-76042-8.
Vandevoorde, David; Josuttis, Nicolai M. (2003). Modèles C++ : le guide complet . Addison-Wesley. ISBN 0-201-73484-2.
Liens externes
JTC1/SC22/WG21 – Groupe de travail sur la norme ISO/IEC C++
Standard C++ Foundation – une organisation à but non lucratif qui promeut l'utilisation et la compréhension du C++ standard. Bjarne Stroustrup est l'un des directeurs de l'organisation.
Mots-clés C++
Expressions C++
Priorité des opérateurs C++
C++ dans les projets frères de Wikipédia :

Médias de Commons

Citations de Wikiquote

Manuels scolaires de Wikibooks

Ressources de Wikiversité
vtet
C++
vtet
Langages de programmation
ComparaisonChronologieHistoire
AdaALGOL SimulaAPLAssembléeBASIQUE Visual Basic classique.FILETCC++C#COBOLErlang ÉlixirEn avantFortranAllerHaskellJavaJavaScript ManuscritJuliaKotlinZézayerLuaMATLABML Caml OCamlPascal Pascal ObjetPerl RakuPHPProloguePythonRRubisRouillerSQLGratterCoquillePetite conversationRapideplus...
 Listes : alphabétiqueCatégoriqueGénérationnelNon basé sur l'anglais Catégorie
vtet
Normes de l'Organisation internationale de normalisation (ISO)
vtet
normes CEI
Bases de données de contrôle d'autorité Modifiez ceci sur Wikidata
Catégories :C++Famille de langages de programmation AlgolFamille de langages de programmation C++Langages de programmation basés sur les classesLogiciel multiplateformeLangages de programmation de haut niveauLangages de programmation orientés objetLangages de programmation créés en 1983Langages de programmation avec une norme ISOLangages de programmation à typage statiqueLangages de programmation compilés
===================(03)======================
### [C++]
C++ ( / ˈsiːplʌsplʌs / , prononcé « C plus plus » et parfois abrégé en CPP ) est un langage de programmation de haut niveau à usage général créé par l' informaticien danois Bjarne Stroustrup . Initialement publié en 1985 comme une extension du langage de programmation C , il s'est depuis considérablement développé au fil du temps ; en 1997 , C++ possède des fonctionnalités orientées objet , génériques et fonctionnelles , en plus de fonctionnalités de manipulation de mémoire de bas niveau pour des systèmes comme les micro-ordinateurs ou pour créer des systèmes d'exploitation comme Linux ou Windows . Il est généralement implémenté comme un langage compilé , et de nombreux fournisseurs fournissent des compilateurs C++ , notamment la Free Software Foundation , LLVM , Microsoft , Intel , Embarcadero , Oracle et IBM . [ 14 ]

C++ a été conçu pour la programmation de systèmes et de logiciels embarqués , à ressources limitées et de grands systèmes, avec la performance , l'efficacité et la flexibilité d'utilisation comme points forts de sa conception. [ 15 ] C++ s'est également avéré utile dans de nombreux autres contextes, ses principaux atouts étant l'infrastructure logicielle et les applications à ressources limitées, [ 15 ] y compris les applications de bureau , les jeux vidéo , les serveurs (par exemple, le commerce électronique , la recherche sur le Web ou les bases de données ) et les applications critiques en termes de performances (par exemple, les commutateurs téléphoniques ou les sondes spatiales ). [ 16 ]

Français C++ est normalisé par l' Organisation internationale de normalisation (ISO), la dernière version de la norme ayant été ratifiée et publiée par l'ISO en octobre 2024 sous le nom d' ISO/IEC 14882:2024 (connue officieusement sous le nom de C++23 ). [ 17 ] Le langage de programmation C++ a été initialement normalisé en 1998 sous le nom d'ISO/IEC 14882:1998 , qui a ensuite été modifié par les normes C++03 , C++11 , C ++14 , C++17 et C++20 . La norme C++23 actuelle les remplace par de nouvelles fonctionnalités et une bibliothèque standard élargie . Avant la normalisation initiale en 1998, C++ a été développé par Stroustrup aux Bell Labs depuis 1979 comme une extension du langage C ; il voulait un langage efficace et flexible similaire à C qui fournisse également des fonctionnalités de haut niveau pour l'organisation des programmes. [ 18 ] Depuis 2012, C++ suit un calendrier de publication de trois ans [ 19 ] avec C++26 comme prochaine norme prévue. [ 20 ]

Malgré son adoption généralisée, certains programmeurs notables ont critiqué le langage C++ , notamment Linus Torvalds , [ 21 ] Richard Stallman , [ 22 ] Joshua Bloch , Ken Thompson , [ 23 ] [ 24 ] [ 25 ] et Donald Knuth . [ 26 ] [ 27 ] Cela est dû en grande partie à sa gestion manuelle de la mémoire, qui le rend vulnérable aux bogues de dépassement de tampon , qui représentent un risque de sécurité. [ 28 ]

Histoire

Bjarne Stroustrup, le créateur de C++, dans son bureau d'AT&T dans le New Jersey, vers  2000
En 1979, Bjarne Stroustrup , un informaticien danois , a commencé à travailler sur «C avec classes , prédécesseur de C++. [ 29 ] La création d'un nouveau langage est née de l'expérience de Stroustrup en programmation pour sa thèse de doctorat. Stroustrup a constaté que Simula possédait des fonctionnalités très utiles pour le développement de logiciels de grande envergure, mais que le langage était trop lent pour une utilisation pratique, tandis que BCPL était rapide mais trop bas niveau pour convenir au développement de logiciels de grande envergure. Lorsque Stroustrup a commencé à travailler chez AT&T Bell Labs , il a dû analyser le noyau UNIX en termes de calcul distribué . Se souvenant de son doctorat, Stroustrup a entrepris d'améliorer le langage C avec des fonctionnalités similaires à Simula. [ 30 ] Le C a été choisi pour sa polyvalence, sa rapidité, sa portabilité et sa large diffusion. Outre l'influence de C et de Simula, d'autres langages ont influencé ce nouveau langage, notamment ALGOL 68 , Ada , CLU et ML . [ citation requise ]

Initialement, le « C avec classes » de Stroustrup ajoutait des fonctionnalités au compilateur C, Cpre, notamment les classes , les classes dérivées , le typage fort , l'inlining et les arguments par défaut . [ 31 ]


Un quiz sur les fonctionnalités de C++11 donné à Paris en 2015
En 1982, Stroustrup commença à développer un successeur au C avec des classes, qu'il baptisa « C++ » ( ++opérateur d'incrémentation en C) après avoir essayé plusieurs autres noms. De nouvelles fonctionnalités furent ajoutées, notamment les fonctions virtuelles , la surcharge des noms de fonctions et des opérateurs , les références , les constantes, l'allocation de mémoire libre sécurisée (nouveau/suppression), une vérification de type améliorée et des commentaires sur une seule ligne de style BCPL avec deux barres obliques ( //). De plus, Stroustrup développa un nouveau compilateur autonome pour C++, Cfront .

En 1984, Stroustrup a implémenté la première bibliothèque d'entrée/sortie de flux. L'idée de fournir un opérateur de sortie plutôt qu'une fonction de sortie nommée a été suggérée par Doug McIlroy [ 2 ] (qui avait précédemment suggéré les tubes Unix ).

En 1985, la première édition du langage de programmation C++ a été publiée, qui est devenue la référence définitive pour le langage, car il n'y avait pas encore de norme officielle. [ 32 ] La première implémentation commerciale de C++ a été publiée en octobre de la même année. [ 29 ]

En 1989, C++ 2.0 a été publié, suivi par la deuxième édition mise à jour du langage de programmation C++ en 1991. [ 33 ] Les nouvelles fonctionnalités de la version 2.0 comprenaient l'héritage multiple, les classes abstraites, les fonctions membres statiques, les fonctions membres const et les membres protégés. En 1990, le Manuel de référence C++ annoté a été publié. Ce travail est devenu la base de la future norme. Les ajouts de fonctionnalités ultérieurs comprenaient les modèles , les exceptions , les espaces de noms , les nouveaux casts et un type booléen .

En 1998, C++98 a été publié, standardisant le langage, et une mise à jour mineure ( C++03 ) a été publiée en 2003.

Après C++98, le C++ a évolué relativement lentement jusqu'à la publication, en 2011, de la norme C++11 , qui ajoutait de nombreuses nouvelles fonctionnalités, élargissait la bibliothèque standard et offrait davantage de fonctionnalités aux programmeurs C++. Après une mise à jour mineure de C++14 publiée en décembre 2014, divers ajouts ont été introduits dans C++17 . [ 34 ] Après sa finalisation en février 2020, [ 35 ] un projet de norme C++20 a été approuvé le 4 septembre 2020 et officiellement publié le 15 décembre 2020. [ 36 ] [ 37 ]

Le 3 janvier 2018, Stroustrup a été annoncé comme le lauréat 2018 du prix Charles Stark Draper d'ingénierie, « pour la conceptualisation et le développement du langage de programmation C++ ». [ 38 ]

En décembre 2022, C++ se classait troisième au classement TIOBE , surpassant Java pour la première fois dans l'histoire de l'indice. En novembre 2024 , le langage se classait deuxième après Python , Java étant troisième. [ 39 ]

Étymologie
Selon Stroustrup, « le nom signifie la nature évolutive des changements par rapport à C. » [ 40 ] Ce nom est attribué à Rick Mascitti (mi-1983) [ 31 ] et a été utilisé pour la première fois en décembre 1983. Lorsque Mascitti a été interrogé de manière informelle en 1992 sur le nom, il a indiqué qu'il avait été donné dans un esprit ironique . Le nom vient de ++ l'opérateur de C (qui incrémente la valeur d'une variable ) et d'une convention de nommage courante consistant à utiliser « + » pour indiquer un programme informatique amélioré.

Au cours de la période de développement du C++, le langage a été appelé « nouveau C » et « C avec classes » [ 31 ] [ 41 ] avant d'acquérir son nom définitif.

Philosophie
Tout au long de la vie de C++, son développement et son évolution ont été guidés par un ensemble de principes : [ 30 ]

Il doit être motivé par des problèmes réels et ses fonctionnalités doivent être immédiatement utiles dans les programmes du monde réel.
Chaque fonctionnalité doit être implémentable (avec une manière raisonnablement évidente de le faire).
Les programmeurs devraient être libres de choisir leur propre style de programmation, et ce style devrait être entièrement pris en charge par C++.
Autoriser une fonctionnalité utile est plus important que d’empêcher toute mauvaise utilisation possible de C++.
Il devrait fournir des moyens d’organiser les programmes en parties distinctes et bien définies, ainsi que des moyens de combiner des parties développées séparément.
Aucune violation implicite du système de types (mais autorise les violations explicites, c'est-à-dire celles explicitement demandées par le programmeur).
Les types créés par l’utilisateur doivent bénéficier du même support et des mêmes performances que les types intégrés.
Les fonctionnalités inutilisées ne doivent pas avoir d'impact négatif sur les exécutables créés (par exemple, en réduisant les performances).
Il ne devrait y avoir aucun langage sous C++ (à l'exception du langage assembleur ).
C++ devrait fonctionner aux côtés d’autres langages de programmation existants , plutôt que de favoriser son propre environnement de programmation séparé et incompatible .
Si l’intention du programmeur est inconnue, permettez-lui de la spécifier en fournissant un contrôle manuel.
Standardisation
Articles principaux : C++03 , C++11 , C++14 , C++17 , C++20 , C++23 et C++26
Normes C++
Année	Norme ISO/CEI	Nom informel
1998	14882:1998 [ 42 ]	C++98
2003	14882:2003 [ 43 ]	C++03
2011	14882:2011 [ 44 ]	C++11 , C++0x
2014	14882:2014 [ 45 ]	C++14 , C++1y
2017	14882:2017 [ 46 ]	C++17 , C++1z
2020	14882:2020 [ 47 ]	C++20 , C++2a
2024	14882:2024 [ 17 ]	C++23 , C++2b
À déterminer		C++26 , C++2c
Le C++ est normalisé par un groupe de travail ISO appelé JTC1/SC22/WG21 . À ce jour, sept révisions de la norme C++ ont été publiées et la prochaine révision, C++26 , est actuellement en cours .


Scène lors de la réunion du comité des normes C++ à Stockholm en 1996
En 1998, le groupe de travail ISO a normalisé C++ pour la première fois sous la norme ISO/IEC 14882:1998 , plus connue sous le nom informel de C++98 . En 2003, il a publié une nouvelle version de la norme C++, appelée ISO/IEC 14882:2003 , qui corrigeait les problèmes identifiés dans C++98.

La prochaine révision majeure de la norme a été appelée de manière informelle « C++0x », mais elle n'a été publiée qu'en 2011. [ 48 ] C++11 (14882:2011) comprenait de nombreux ajouts au langage de base et à la bibliothèque standard. [ 44 ]

En 2014, C++14 (également connu sous le nom de C++1y) a été publié comme une petite extension de C++11, comportant principalement des corrections de bogues et de petites améliorations. [ 49 ] Les procédures de vote du projet de norme internationale se sont achevées à la mi-août 2014. [ 50 ]

Après C++14, une révision majeure C++17 , connue officieusement sous le nom de C++1z, a été achevée par le comité ISO C++ à la mi-juillet 2017 et a été approuvée et publiée en décembre 2017. [ 51 ]

Dans le cadre du processus de normalisation, l’ISO publie également des rapports et des spécifications techniques :

ISO/IEC TR 18015:2006 [ 52 ] sur l'utilisation du C++ dans les systèmes embarqués et sur les implications en termes de performances des fonctionnalités du langage et de la bibliothèque C++,
ISO/IEC TR 19768:2007 [ 53 ] (également connu sous le nom de Rapport technique C++ 1 ) sur les extensions de bibliothèque principalement intégrées dans C++11 ,
ISO/IEC TR 29124:2010 [ 54 ] sur les fonctions mathématiques spéciales, intégrées dans C++17 ,
ISO/IEC TR 24733:2011 [ 55 ] sur l'arithmétique décimale à virgule flottante ,
ISO/IEC TS 18822:2015 [ 56 ] sur la bibliothèque de systèmes de fichiers standard, intégrée dans C++17 ,
ISO/IEC TS 19570:2015 [ 57 ] sur les versions parallèles des algorithmes de la bibliothèque standard, intégrés dans C++17 ,
ISO/IEC TS 19841:2015 [ 58 ] sur la mémoire transactionnelle logicielle ,
ISO/IEC TS 19568:2015 [ 59 ] sur un nouvel ensemble d'extensions de bibliothèque, dont certaines sont déjà intégrées dans C++17 ,
ISO/IEC TS 19217:2015 [ 60 ] sur les concepts C++ , intégrés dans C++20 ,
ISO/IEC TS 19571:2016 [ 61 ] sur les extensions de bibliothèque pour la concurrence, dont certaines sont déjà intégrées dans C++20 ,
ISO/IEC TS 19568:2017 [ 62 ] sur un nouvel ensemble d'extensions de bibliothèque à usage général,
ISO/IEC TS 21425:2017 [ 63 ] sur les extensions de bibliothèque pour les plages, intégrées dans C++20 ,
ISO/IEC TS 22277:2017 [ 64 ] sur les coroutines, intégrées dans C++20 ,
ISO/IEC TS 19216:2018 [ 65 ] sur la bibliothèque réseau,
ISO/IEC TS 21544:2018 [ 66 ] sur les modules, intégrés dans C++20 ,
ISO/IEC TS 19570:2018 [ 67 ] sur un nouvel ensemble d'extensions de bibliothèque pour le parallélisme
ISO/IEC TS 23619:2021 [ 68 ] sur les nouvelles extensions pour la programmation réflexive (réflexion),
ISO/IEC TS 9922:2024 [ 69 ] sur un nouvel ensemble d'extensions de concurrence, et
ISO/IEC TS 19568:2024 [ 70 ] sur un autre nouvel ensemble d'extensions de bibliothèque.
D’autres spécifications techniques sont en cours de développement et en attente d’approbation.

Langue
Article principal : Syntaxe C++
Le langage C++ comporte deux composantes principales : un mappage direct des fonctionnalités matérielles fournies principalement par le sous-ensemble C, et des abstractions sans surcharge basées sur ces mappages. Stroustrup décrit le C++ comme « un langage de programmation d'abstraction léger [conçu] pour construire et utiliser des abstractions efficaces et élégantes » ; [ 15 ] et « offrir à la fois accès au matériel et abstraction est la base du C++. Son efficacité le distingue des autres langages. » [ 71 ]

Le C++ hérite de la majeure partie de la syntaxe du C. Un programme « Hello World » conforme à la norme C est également un programme « Hello World » C++ valide. Voici la version de Bjarne Stroustrup du programme « Hello World » , qui utilise la fonctionnalité de flux de la bibliothèque standard C++ pour écrire un message sur la sortie standard : [ 72 ] [ 73 ] [ note 2 ]

#include <iostream>

int main ()
{
    std :: cout << "Bonjour tout le monde ! \n " ;
}
Bibliothèque standard

Le projet de norme « Working Paper » qui a été approuvé sous le nom de C++98 ; la moitié de sa taille était consacrée à la bibliothèque standard C++.
Article principal : Bibliothèque standard C++
La norme C++ se compose de deux parties : le langage principal et la bibliothèque standard. Les programmeurs C++ s'attendent à la présence de cette dernière sur chaque implémentation majeure de C++ ; elle inclut des types d'agrégats ( vecteurs , listes, cartes, ensembles, files d'attente, piles, tableaux, tuples), des algorithmes (find, for_each , binary_search , random_shuffle, etc.), des fonctions d'entrée/sortie ( iostream , pour la lecture et l'écriture sur la console et les fichiers), une bibliothèque de systèmes de fichiers, la prise en charge de la localisation, des pointeurs intelligents pour la gestion automatique de la mémoire, la prise en charge des expressions régulières , une bibliothèque multithreading , la prise en charge des atomes (permettant la lecture ou l'écriture d'une variable par un seul thread à la fois sans synchronisation externe), des utilitaires de temps (mesure, obtention de l'heure actuelle, etc.), un système de conversion des rapports d'erreurs n'utilisant pas d'exceptions C++ en exceptions C++, un générateur de nombres aléatoires et une version légèrement modifiée de la bibliothèque standard C (pour la rendre compatible avec le système de types C++).

Une grande partie de la bibliothèque C++ repose sur la bibliothèque de modèles standard (STL). Parmi les outils utiles fournis par la STL figurent des conteneurs sous forme de collections d'objets (tels que des vecteurs et des listes ), des itérateurs offrant un accès aux conteneurs de type tableau, et des algorithmes effectuant des opérations telles que la recherche et le tri.

De plus, des (multi)maps ( tableaux associatifs ) et des (multi)sets sont fournis, exportant tous des interfaces compatibles. Par conséquent, l'utilisation de modèles permet d'écrire des algorithmes génériques fonctionnant avec n'importe quel conteneur ou sur n'importe quelle séquence définie par des itérateurs.

Comme en C, les fonctionnalités de la bibliothèque sont accessibles via la #include directive « include un en-tête standard » . La bibliothèque standard C++ fournit 105 en-têtes standard, dont 27 sont obsolètes. Avec l'introduction des modules en C++20 , ces en-têtes sont accessibles via import, et en C++23 , l'intégralité de la bibliothèque standard peut désormais être importée directement en tant que module, via . Actuellement, la bibliothèque standard C++ fournit deux modules, et (un module de compatibilité pour lequel exporte les fonctionnalités de la bibliothèque standard C dans l'espace de noms global). import std;stdstd.compatstd

La norme intègre la STL, initialement conçue par Alexander Stepanov , qui a expérimenté des algorithmes et des conteneurs génériques pendant de nombreuses années. En commençant avec le C++, il a finalement trouvé un langage permettant de créer des algorithmes génériques (par exemple, le tri STL) encore plus performants que, par exemple, la bibliothèque standard C qsort, grâce à des fonctionnalités C++ comme l'utilisation de l'inlining et de la liaison à la compilation au lieu de pointeurs de fonction. La norme ne la désigne pas comme « STL », car elle n'en est qu'une partie, mais ce terme reste largement utilisé pour la distinguer du reste de la bibliothèque standard (flux d'entrée/sortie, internationalisation, diagnostics, sous-ensemble de la bibliothèque C, etc.). [ 74 ]

La plupart des compilateurs C++, et tous les principaux, fournissent une implémentation conforme aux normes de la bibliothèque standard C++.

Directives de base C++
Les C++ Core Guidelines [ 75 ] sont une initiative menée par Bjarne Stroustrup, l'inventeur du C++, et Herb Sutter, le coordinateur et président du groupe de travail ISO C++, pour aider les programmeurs à écrire du « C++ moderne » en utilisant les meilleures pratiques pour les normes de langage C++11 et plus récentes, et pour aider les développeurs de compilateurs et d'outils de vérification statique à créer des règles pour détecter les mauvaises pratiques de programmation.

L'objectif principal est d'écrire de manière efficace et cohérente du C++ sûr en termes de type et de ressources.

Les lignes directrices de base ont été annoncées [ 76 ] lors du discours d’ouverture du CPPCon 2015.

Les lignes directrices sont accompagnées de la bibliothèque de support des lignes directrices (GSL), [ 77 ] une bibliothèque d'en-têtes uniquement de types et de fonctions pour implémenter les lignes directrices de base et des outils de vérification statique pour appliquer les règles des lignes directrices. [ 78 ]

Compatibilité
Afin de donner plus de liberté aux fournisseurs de compilateurs, le comité de normalisation C++ a décidé de ne pas imposer l'implémentation de la modification des noms , de la gestion des exceptions et d'autres fonctionnalités spécifiques à l'implémentation. L'inconvénient de cette décision est que le code objet produit par différents compilateurs est susceptible d'être incompatible. Il existe cependant des tentatives de normalisation des compilateurs pour des machines ou des systèmes d'exploitation spécifiques . Par exemple, l'ABI Itanium C++ est indépendante du processeur (malgré son nom) et est implémentée par GCC et Clang. [ 79 ]

Avec C
Article principal : Compatibilité de C et C++
Le C++ est souvent considéré comme un sur-ensemble du C , mais ce n'est pas tout à fait vrai. [ 80 ] La plupart du code C peut facilement être compilé correctement en C++, mais il existe quelques différences qui rendent certains codes C valides invalides ou se comportent différemment en C++. Par exemple, le C autorise la conversion implicite de vers d'autres types de pointeurs, mais pas le C++ (pour des raisons de sécurité des types). De plus, le C++ définit de nombreux nouveaux mots-clés, tels que et , qui peuvent être utilisés comme identifiants (par exemple, des noms de variables) dans un programme C. void*newclass

Français Certaines incompatibilités ont été supprimées par la révision de 1999 de la norme C ( C99 ), qui prend désormais en charge les fonctionnalités C++ telles que les commentaires de ligne ( //) et les déclarations mélangées au code. D'autre part, C99 a introduit un certain nombre de nouvelles fonctionnalités que C++ ne prenait pas en charge et qui étaient incompatibles ou redondantes en C++, telles que les tableaux de longueur variable , les types de nombres complexes natifs (cependant, la classe de la bibliothèque standard C++ fournit des fonctionnalités similaires, bien que non compatibles avec le code), les initialiseurs désignés, les littéraux composés et le mot-clé. [ 81 ] Certaines des fonctionnalités introduites par C99 ont été incluses dans la version ultérieure de la norme C++, C++11 (parmi celles qui n'étaient pas redondantes). [ 82 ] [ 83 ] [ 84 ] Cependant, la norme C++11 introduit de nouvelles incompatibilités, telles que l'interdiction d'assigner un littéral de chaîne à un pointeur de caractère, ce qui reste valide en C. std::complexrestrict

Pour mélanger du code C et du code C++, toute déclaration ou définition de fonction appelée ou utilisée à la fois en C et en C++ doit être déclarée avec une liaison C, en la plaçant dans un bloc. Une telle fonction ne doit pas dépendre de fonctionnalités dépendant de la modification des noms (c'est-à-dire de la surcharge de fonction). extern "C" {/*...*/}

Assemblage en ligne
Les programmes développés en C ou C++ utilisent souvent l'assembleur en ligne pour tirer parti de ses fonctionnalités de bas niveau, de sa vitesse supérieure et de son contrôle amélioré par rapport aux langages de programmation de haut niveau [ 85 ] [ 86 ] lorsque l'optimisation des performances est essentielle. C++ prend en charge l'intégration du langage assembleur à l'aide de déclarations asm [ 87 ] , mais la compatibilité de l'assembleur en ligne varie considérablement entre les compilateurs et les architectures. Contrairement aux fonctionnalités des langages de haut niveau tels que Python ou Java , le code assembleur dépend fortement du processeur sous-jacent et de l'implémentation du compilateur.

Variations entre les compilateurs
Différents compilateurs C++ implémentent l'assemblage en ligne de manières distinctes.

GCC ( GNU Compiler Collection ) et Clang [ 88 ] : Utilisent la syntaxe d'assemblage en ligne étendue de GCC. L'utilisation __asm__du mot-clé plutôt que asmde lors de l'écriture de code pouvant être compilé avec les options et permet de spécifier les opérandes d'entrée/sortie et les registres écrasés. Cette approche est largement adoptée, notamment par les compilateurs Intel [ 89 ] et IBM [ 90 ] .-ansi-std
MSVC ( Microsoft Visual C++ ) : l'assembleur en ligne est intégré au compilateur. Auparavant, l'assembleur en ligne était pris en charge via le __asmmot-clé, mais cette prise en charge a été supprimée en mode 64 bits, nécessitant des modules .asm distincts [ 91 ] .
TI ARM Clang et compilateurs embarqués [ 92 ] : Certains compilateurs de systèmes embarqués, comme TI Arm Clang de Texas Instruments, autorisent l'assemblage en ligne mais imposent des règles plus strictes pour éviter les conflits avec les conventions de registre et les conventions d'appel.
Interopérabilité entre C++ et Assembleur
C++ fournit deux méthodes principales d’intégration du code ASM.

1. Fichiers d'assemblage autonomes – Le code d'assemblage est écrit séparément et lié au code C++. [ 93 ]

2. Assemblage en ligne – Le code assembleur est intégré au code C++ à l’aide d’extensions spécifiques au compilateur.

Exemple de code pour la compatibilité ASM

Lors de l'appel d'une fonction d'assemblage à partir de C++, utilisez pour empêcher la modification du nom C++.extern "C"
//main.cpp
importer std ;

extern "C" int add_asm ( int , int ); // Déclarer la fonction d'assemblage

int main () {
    int résultat = add_asm ( 5 , 7 );
    std :: println ( "Résultat de l'ASM : {}" , result );
    renvoie 0 ;
}
#code asm utilisant l'architecture RISC-V
. section . texte
. global add_asm

add_asm :
    ajouter a0 , a0 , a1 # Ajouter le premier argument ( a0 ) et le deuxième argument ( a1 ), stocker dans a0
    ret # Retour ( a0 contient la valeur de retour )
Les variables globales dans l'assembly doivent être déclarées comme externen C++ et marquées .globaldans l'assembly.
// main.cpp
importer std ;

extern "C" int global_var ; // Déclarer une variable globale à partir de l'assembly

int main () {
    std :: println ( "Variable globale de l'ASM : {}" , global_var );
    renvoie 0 ;
}
#asm utilisant l'architecture RISC-V
. section . données
. global global_var
. aligner 4
global_var :
    . mot 42 # Définir la valeur entière
L'assemblage en ligne permet d'intégrer ASM directement dans C++ à l'aide du asmmot-clé.
//main.cpp (en utilisant le compilateur GCC/CLANG)
importer std ;

int main () {
    int x = 10 , y = 20 , somme ;

    asm volatile (
        "ajouter %0, %1, %2"
        : "=r" ( sum ) // Opérande de sortie (stocké dans un registre)
        : "r" ( x ), "r" ( y ) // Opérandes d'entrée (stockés dans des registres)
    );

    std :: println ( "Somme en utilisant ASM en ligne : {}" , sum );
    renvoie 0 ;
}
Voir aussi
icône	Portail de programmation informatique
Carbone (langage de programmation)
Comparaison des langages de programmation
Liste des compilateurs C++
Aperçu du C++
Catégorie : Bibliothèques C++
Notes de bas de page
 Pour l'idée des coroutines sans pile C++20.
 Ce code est directement copié de la page d'errata de Bjarne Stroustrup (p. 633). Il aborde l'utilisation de'\n'plutôt questd::endl. Voir également « Puis-je écrire « void main() » ? » (archivé le 2 juillet 2020 sur Wayback Machine) pour une explication de l'implicitereturn 0;de lamainfonction. Ce retour implicite n'est pas disponible dans les autres fonctions.
Références
« Présentation des modules en C++ » . Microsoft. 24 avril 2023.
 Stroustrup, Bjarne (1996). « Une histoire du C++ : 1979-1991 ».Histoire des langages de programmation --- II.ACM. pp. 699–769.doi: 10.1145/234286.1057836 .
 Stroustrup, Bjarne (16 décembre 2021). « C++20 : Atteindre les objectifs du C++ - Bjarne Stroustrup - CppCon 2021 » . CppCon. Archivé de l'original le 30 décembre 2021. Consulté le 30 décembre 2021 .
 Stroustrup, Bjarne (12 juin 2020). « Prospérer dans un monde saturé et en constante évolution : C++ 2006–2020 » . Actes de l'ACM sur les langages de programmation . 4 (HOPL). Association for Computing Machinery (ACM) : 1– 168. doi : 10.1145/3386320 . ISSN : 2475-1421 . S2CID : 219603741 .
 Naugler, David (mai 2007). « C# 2.0 pour les programmeurs C++ et Java : atelier de conférence ». Journal of Computing Sciences in Colleges . 22 (5). Bien que C# ait été fortement influencé par Java, il l'a également été par C++ et doit être considéré comme un descendant à la fois de C++ et de Java.
« Spécifications de la chapelle (Remerciements) » (PDF) . Cray Inc., 1er octobre 2015. Archivé (PDF) de l'original le 24 juin 2018. Consulté le 14 janvier 2016 .
 Fogus, Michael. « Rich Hickey Q&R » . Code Quarterly . Archivé de l'original le 11 janvier 2017. Consulté le 11 janvier 2017 .
 Harry. H. Chaudhary (28 juillet 2014). « Décrypter l'entretien de programmation Java : plus de 2 000 questions/réponses d'entretien Java » . Archivé de l'original le 27 mai 2021. Consulté le 29 mai 2016 .
 Roger Poon (1er mai 2017). « Mise à l'échelle de JS++ : abstraction, performances et lisibilité » . Archivé de l'original le 11 mai 2020. Consulté le 21 avril 2020 .
« L'évolution d'un langage d'extension : une histoire de Lua » . www.lua.org . Consulté le 4 janvier 2023 .
« FAQ sur le langage de programmation Nim » . Archivé de l'original le 11 juillet 2017. Consulté le 21 avril 2020 .
« 9. Classes — Documentation Python 3.6.4 » . docs.python.org . Archivé de l'original le 23 octobre 2012 . Consulté le 9 janvier 2018 .
« Influences – La référence Rust » . doc.rust-lang.org . Consulté le 4 janvier 2023 .
Stroustrup, Bjarne (1997). « 1 ». Le langage de programmation C++ (3e éd.). Addison-Wesley. ISBN 0-201-88954-4. OCLC  59193992 .
 Stroustrup, B. (6 mai 2014).« Lecture: The essence of C++. University of Edinburgh ». YouTube .Archivéde l'original le 28 avril 2015. Consulté le 12 juin 2015.
 Stroustrup, Bjarne (17 février 2014). « Applications C++ » . stroustrup.com . Archivé de l'original le 4 avril 2021. Consulté le 5 mai 2014 .
 « ISO/IEC 14882:2024 ». Organisation internationale de normalisation. Consulté le 21 octobre 2020.
« Page d'accueil de Bjarne Stroustrup » . www.stroustrup.com . Archivé de l'original le 14 mai 2019. Consulté le 15 mai 2013 .
« Calendrier IS C++ » (PDF) . Archivé (PDF) de l'original le 10 août 2020. Consulté le 9 août 2020 .
« C++ ; Vers où il va » . Archivé de l'original le 3 décembre 2018. Consulté le 3 décembre 2018 .
« Re : [RFC] Convertir builin-mailinfo.c pour utiliser The Better String Library » (Liste de diffusion). 6 septembre 2007. Archivé de l'original le 8 mars 2021. Consulté le 31 mars 2015 .
« Re : Des efforts pour attirer plus d'utilisateurs ? » (Liste de diffusion). 12 juillet 2010. Archivé de l'original le 21 mars 2015. Consulté le 31 mars 2015 .
 Andrew Binstock (18 mai 2011). « Dr. Dobb's : Entretien avec Ken Thompson » . Dr. Dobb's . Archivé de l'original le 13 mars 2014. Consulté le 7 février 2014 .
 Peter Seibel (16 septembre 2009). Codeurs au travail : Réflexions sur l'art de programmer . Apress. pp.  475–476 . ISBN 978-1-4302-1948-4. Archivé de l'original le 1er décembre 2019 . Récupéré le 9 novembre 2017 .
« C++ dans Coders at Work » . 16 octobre 2009. Archivé de l'original le 10 novembre 2017. Consulté le 9 novembre 2017 .
« Entretien avec Donald Knuth » . Dr. Dobb's . Archivé de l'original le 8 mars 2021. Consulté le 18 juillet 2021 .
« (La)TeX Navigator » . Archivé de l'original le 20 novembre 2017. Consulté le 10 novembre 2017 .
 Claburn, Thomas (2 mars 2025). « Le créateur du C++ appelle à l'aide pour défendre son langage de programmation contre les « attaques graves »" . Le Registre . Récupéré le 5 mars 2025 .
 Stroustrup, Bjarne (7 mars 2010).« FAQ de Bjarne Stroustrup : Quand le C++ a-t-il été inventé ? ».stroustrup.com.Archivéde l'original le 6 février 2016. Consulté le 16 septembre 2010.
 Stroustrup, Bjarne.« Évolution d'un langage dans et pour le monde réel : C++ 1991-2006 »(PDF).Archivé(PDF)de l'original le 20 novembre 2007.Consulté le 14 août 2013.
 Stroustrup, Bjarne.« Histoire du C++ : 1979-1991 »(PDF).Archivé(PDF)de l'original le 2 février 2019.Consulté le 18 juillet 2013.
 Stroustrup, Bjarne. « Le langage de programmation C++ » (première éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Stroustrup, Bjarne. « Le langage de programmation C++ » (deuxième éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Sutter, Herb (30 juin 2016). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Oulu) » . herbsutter.com . Archivé de l'original le 8 octobre 2016. La prochaine norme après C++17 sera C++20.
 Dusíková, Hana (6 novembre 2019). « N4817 : Invitation et informations à la réunion de Prague 2020 » (PDF) . Archivé (PDF) de l'original le 29 décembre 2019. Consulté le 13 février 2020 .
« État actuel » . isocpp.org . Archivé de l'original le 8 septembre 2020. Consulté le 7 septembre 2020 .
« C++20 approuvé – Herb Sutter » . isocpp.org . Archivé de l'original le 11 septembre 2020. Consulté le 8 septembre 2020 .
« Le pionnier de l'informatique Bjarne Stroustrup recevra le prix Charles Stark Draper d'ingénierie 2018 » (communiqué de presse). Académie nationale d'ingénierie. 3 janvier 2018. Archivé de l'original le 3 janvier 2018. Consulté le 14 décembre 2021 .
 TIOBE (novembre 2024). « Indice TIOBE de novembre 2024 » . TIOBE.com . Société TIOBE. Archivé de l'original le 18 novembre 2024. Consulté le 18 novembre 2024 .
« FAQ de Bjarne Stroustrup – D'où vient le nom « C++ » ? » . Archivé de l'original le 6 février 2016. Consulté le 16 janvier 2008 .
« C pour les programmeurs C++ » . Université Northeastern . Archivé de l'original le 17 novembre 2010. Consulté le 7 septembre 2015 .
« ISO/CEI 14882:1998 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2017. Consulté le 23 novembre 2018 .
« ISO/CEI 14882:2003 » . Organisation internationale de normalisation. Archivé de l'original le 13 août 2021. Consulté le 23 novembre 2018 .
 « ISO/IEC 14882:2011 ». Organisation internationale de normalisation.Archivéde l'original le 27 mai 2016.Consulté le 23 novembre 2018.
« ISO/IEC 14882:2014 » . Organisation internationale de normalisation. Archivé de l'original le 29 avril 2016. Consulté le 23 novembre 2018 .
« ISO/IEC 14882:2017 » . Organisation internationale de normalisation. Archivé de l'original le 29 janvier 2013. Consulté le 2 décembre 2017 .
« ISO/IEC 14882:2020 » . Organisation internationale de normalisation. Archivé de l'original le 16 décembre 2020. Consulté le 16 décembre 2020 .
« Nous disposons d'une norme internationale : C++0x est approuvé à l'unanimité . » Sutter's Mill . 12 août 2011. Archivé de l'original le 28 juin 2018. Consulté le 23 novembre 2018 .
« L'avenir du C++ » . Archivé de l'original le 23 octobre 2018. Consulté le 23 novembre 2018 via channel9.msdn.com.
« Nous avons C++14 ! : C++ standard » . isocpp.org . Archivé de l'original le 19 août 2014 . Consulté le 19 août 2014 .
 Sutter, Herb (15 juillet 2017). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Toronto) » . Archivé de l'original le 6 août 2017. Consulté le 4 août 2017 .
« ISO/IEC TR 18015:2006 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 19768:2007 » . Organisation internationale de normalisation. Archivé de l'original le 4 mars 2016. Consulté le 15 février 2019 .
« ISO/IEC TR 29124:2010 » . Organisation internationale de normalisation. Archivé de l'original le 12 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 24733:2011 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 18822:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19841:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19217:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19571:2016 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21425:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 22277:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19216:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21544:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 23619:2021 » . Organisation internationale de normalisation. Archivé de l'original le 15 décembre 2018. Consulté le 11 octobre 2021 .
« ISO/IEC TS 9922:2024 » . Organisation internationale de normalisation. Archivé de l'original le 1er avril 2025. Consulté le 1er avril 2025 .
« ISO/IEC TS 19568:2024 » . Organisation internationale de normalisation. Archivé de l'original le 25 février 2025. Consulté le 1er avril 2025 .
 B. Stroustrup (interviewé par Sergio De Simone) (30 avril 2015). « Stroustrup : Réflexions sur C++17 - Une interview » . Archivé de l'original le 8 juillet 2015. Consulté le 8 juillet 2015 .
 Stroustrup, Bjarne (2000). Le langage de programmation C++ (éd. spéciale). Addison-Wesley. p. 46. ISBN 0-201-70073-5.
 Stroustrup, Bjarne. « Problèmes en suspens concernant le langage de programmation C++ (3e édition) » . Archivé de l'original le 5 mai 2014. Consulté le 5 mai 2014 .
 Graziano Lo Russo (2008). « Entretien avec A. Stepanov » . stlport.org . Archivé de l'original le 4 mars 2009. Consulté le 8 octobre 2015 .
« Directives C++ Core » . isocpp.github.io . Archivé de l'original le 16 février 2020 . Consulté le 9 février 2020 .
« Bjarne Stroustrup annonce les directives de base du C++ : C++ standard » . isocpp.org . Archivé de l'original le 11 mai 2020. Consulté le 31 mars 2020 .
« microsoft/GSL » . 18 juillet 2021. Archivé de l'original le 18 juillet 2021. Consulté le 18 juillet 2021 via GitHub.
« Utilisation des vérificateurs des directives de base C++ » . Microsoft Learn . Archivé de l'original le 13 août 2021. Consulté le 31 mars 2020 .
« Résumé de l'ABI C++ » . 20 mars 2001. Archivé de l'original le 10 juillet 2018. Consulté le 30 mai 2006 .
« FAQ de Bjarne Stroustrup – Le C est-il un sous-ensemble du C++ ? » . Archivé de l'original le 6 février 2016. Consulté le 5 mai 2014 .
« C9X – La nouvelle norme C » . Archivé de l'original le 21 juin 2018. Consulté le 27 décembre 2008 .
« Prise en charge de C++0x dans GCC » . Archivé de l'original le 21 juillet 2010. Consulté le 12 octobre 2010 .
« Fonctionnalités principales du langage C++0x dans VC10 : le tableau » . Archivé de l'original le 21 août 2010. Consulté le 12 octobre 2010 .
« Clang - État des versions C++98, C++11 et C++14 » . Clang.llvm.org. 12 mai 2013. Archivé de l'original le 4 juillet 2013. Consulté le 10 juin 2013 .
 Bokil, Milind A. (2021). « Écriture de routines d'assemblage dans les programmes C/C++ et Java ». ResearchGate. Consulté le 1er avril 2025.
 Vilhena, Paulo Emílio de ; Lahav, Ori ; Vafeiadis, Viktor ; Raad, Azalea (2024). « Extension du modèle de mémoire C/C++ avec l'assemblage en ligne ». Actes de l'ACM sur les langages de programmation, vol. 8, OOPSLA2, article 309. doi:10.1145/3689749.
 Contributeurs de cppreference.com. « Déclaration ASM ». cppreference.com . Consulté le 1er avril 2025.
« Asm étendu (utilisation de la collection de compilateurs GNU) » . Documentation en ligne de GCC . Projet GNU . Consulté le 1er avril 2025 .
 Intel Corporation. « Assemblage en ligne ». Guide du développeur et référence du compilateur Intel® C++ Classic , version 2021.9. Consulté le 1er avril 2025.
 IBM. « Instructions d'assemblage en ligne (extension IBM) ». Documentation IBM . Consulté le 1er avril 2025.
« Présentation de l'assembleur en ligne » . Microsoft Learn . Microsoft . Consulté le 1er avril 2025 .
« Interfaçage de C et C++ avec le langage assembleur » . Texas Instruments . Texas Instruments Incorporated. 23 février 2025. Consulté le 1er avril 2025 .
« Liaison C++ vers ASM dans GCC » . Wiki OSDev . Consulté le 1er avril 2025 .
Lectures complémentaires
Abrahams, David ; Gurtovoy, Aleksey (2005). Métaprogrammation de modèles C++ : concepts, outils et techniques issus de Boost et au-delà . Addison-Wesley. ISBN 0-321-22725-5.
Alexandrescu, Andrei (2001). Conception C++ moderne : Programmation générique et modèles de conception appliqués . Addison-Wesley. ISBN. 0-201-70431-5.
Alexandrescu, Andrei ; Sutter, Herb (2004). Normes de conception et de codage C++ : règles et directives pour l'écriture de programmes . Addison-Wesley. ISBN 0-321-11358-6.
Becker, Pete (2006). Les extensions de la bibliothèque standard C++ : tutoriel et référence . Addison-Wesley. ISBN. 0-321-41299-0.
Cassé, Frank (2010). Annotations C++ . Université de Groningue. ISBN 978-90-367-0470-0. Archivé de l'original le 28 avril 2010 . Récupéré le 28 avril 2010 .
Coplien, James O. (1994) [réédité avec corrections, année de publication originale : 1992]. C++ avancé : Styles et expressions idiomatiques de programmation . Addison-Wesley. ISBN 0-201-54855-0.
Dewhurst, Stephen C. (2005). C++ Common Knowledge : Programmation intermédiaire essentielle . Addison-Wesley. ISBN. 0-321-32192-8.
Conseil de l'industrie des technologies de l'information (15 octobre 2003). Langages de programmation – C++ (deuxième éd.). Genève : ISO/IEC. 14882:2003(E).
Josuttis, Nicolai M. (2012). La bibliothèque standard C++ : tutoriel et référence (deuxième éd.). Addison-Wesley. ISBN. 978-0-321-62321-8.
Koenig, Andrew ; Moo, Barbara E. (2000). C++ accéléré – Programmation pratique par l'exemple . Addison-Wesley. ISBN 0-201-70353-X.
Lippman, Stanley B. ; Lajoie, Josée; Moo, Barbara E. (2011). Introduction à C++ (Cinquième éd.). Addison-Wesley. ISBN 978-0-321-71411-4.
Lippman, Stanley B. (1996). Au cœur du modèle objet C++ . Addison-Wesley. ISBN. 0-201-83454-5.
Meyers, Scott (2005). Effective C++ (3e éd.). Addison-Wesley. ISBN. 0-321-33487-6.
Stroustrup, Bjarne (2013). Le langage de programmation C++ (quatrième éd.). Addison-Wesley. ISBN. 978-0-321-56384-2.
Stroustrup, Bjarne (1994). Conception et évolution de C++ . Addison-Wesley. ISBN. 0-201-54330-3.
Stroustrup, Bjarne (2014). Programmation : Principes et pratique en C++ (2e éd.). Addison-Wesley. ISBN. 978-0-321-99278-9.
Sutter, Herb (2001). C++ encore plus exceptionnel : 40 nouveaux casse-têtes d'ingénierie, problèmes de programmation et solutions . Addison-Wesley. ISBN 0-201-70434-X.
Sutter, Herb (2004). Style C++ exceptionnel . Addison-Wesley. ISBN. 0-201-76042-8.
Vandevoorde, David; Josuttis, Nicolai M. (2003). Modèles C++ : le guide complet . Addison-Wesley. ISBN 0-201-73484-2.
Liens externes
JTC1/SC22/WG21 – Groupe de travail sur la norme ISO/IEC C++
Standard C++ Foundation – une organisation à but non lucratif qui promeut l'utilisation et la compréhension du C++ standard. Bjarne Stroustrup est l'un des directeurs de l'organisation.
Mots-clés C++
Expressions C++
Priorité des opérateurs C++
C++ dans les projets frères de Wikipédia :

Médias de Commons

Citations de Wikiquote

Manuels scolaires de Wikibooks

Ressources de Wikiversité
vtet
C++
vtet
Langages de programmation
ComparaisonChronologieHistoire
AdaALGOL SimulaAPLAssembléeBASIQUE Visual Basic classique.FILETCC++C#COBOLErlang ÉlixirEn avantFortranAllerHaskellJavaJavaScript ManuscritJuliaKotlinZézayerLuaMATLABML Caml OCamlPascal Pascal ObjetPerl RakuPHPProloguePythonRRubisRouillerSQLGratterCoquillePetite conversationRapideplus...
 Listes : alphabétiqueCatégoriqueGénérationnelNon basé sur l'anglais Catégorie
vtet
Normes de l'Organisation internationale de normalisation (ISO)
vtet
normes CEI
Bases de données de contrôle d'autorité Modifiez ceci sur Wikidata
Catégories :C++Famille de langages de programmation AlgolFamille de langages de programmation C++Langages de programmation basés sur les classesLogiciel multiplateformeLangages de programmation de haut niveauLangages de programmation orientés objetLangages de programmation créés en 1983Langages de programmation avec une norme ISOLangages de programmation à typage statiqueLangages de programmation compilés
===================(04)======================
### [C++]
C++ ( / ˈsiːplʌsplʌs / , prononcé « C plus plus » et parfois abrégé en CPP ) est un langage de programmation de haut niveau à usage général créé par l' informaticien danois Bjarne Stroustrup . Initialement publié en 1985 comme une extension du langage de programmation C , il s'est depuis considérablement développé au fil du temps ; en 1997 , C++ possède des fonctionnalités orientées objet , génériques et fonctionnelles , en plus de fonctionnalités de manipulation de mémoire de bas niveau pour des systèmes comme les micro-ordinateurs ou pour créer des systèmes d'exploitation comme Linux ou Windows . Il est généralement implémenté comme un langage compilé , et de nombreux fournisseurs fournissent des compilateurs C++ , notamment la Free Software Foundation , LLVM , Microsoft , Intel , Embarcadero , Oracle et IBM . [ 14 ]

C++ a été conçu pour la programmation de systèmes et de logiciels embarqués , à ressources limitées et de grands systèmes, avec la performance , l'efficacité et la flexibilité d'utilisation comme points forts de sa conception. [ 15 ] C++ s'est également avéré utile dans de nombreux autres contextes, ses principaux atouts étant l'infrastructure logicielle et les applications à ressources limitées, [ 15 ] y compris les applications de bureau , les jeux vidéo , les serveurs (par exemple, le commerce électronique , la recherche sur le Web ou les bases de données ) et les applications critiques en termes de performances (par exemple, les commutateurs téléphoniques ou les sondes spatiales ). [ 16 ]

Français C++ est normalisé par l' Organisation internationale de normalisation (ISO), la dernière version de la norme ayant été ratifiée et publiée par l'ISO en octobre 2024 sous le nom d' ISO/IEC 14882:2024 (connue officieusement sous le nom de C++23 ). [ 17 ] Le langage de programmation C++ a été initialement normalisé en 1998 sous le nom d'ISO/IEC 14882:1998 , qui a ensuite été modifié par les normes C++03 , C++11 , C ++14 , C++17 et C++20 . La norme C++23 actuelle les remplace par de nouvelles fonctionnalités et une bibliothèque standard élargie . Avant la normalisation initiale en 1998, C++ a été développé par Stroustrup aux Bell Labs depuis 1979 comme une extension du langage C ; il voulait un langage efficace et flexible similaire à C qui fournisse également des fonctionnalités de haut niveau pour l'organisation des programmes. [ 18 ] Depuis 2012, C++ suit un calendrier de publication de trois ans [ 19 ] avec C++26 comme prochaine norme prévue. [ 20 ]

Malgré son adoption généralisée, certains programmeurs notables ont critiqué le langage C++ , notamment Linus Torvalds , [ 21 ] Richard Stallman , [ 22 ] Joshua Bloch , Ken Thompson , [ 23 ] [ 24 ] [ 25 ] et Donald Knuth . [ 26 ] [ 27 ] Cela est dû en grande partie à sa gestion manuelle de la mémoire, qui le rend vulnérable aux bogues de dépassement de tampon , qui représentent un risque de sécurité. [ 28 ]

Histoire

Bjarne Stroustrup, le créateur de C++, dans son bureau d'AT&T dans le New Jersey, vers  2000
En 1979, Bjarne Stroustrup , un informaticien danois , a commencé à travailler sur «C avec classes , prédécesseur de C++. [ 29 ] La création d'un nouveau langage est née de l'expérience de Stroustrup en programmation pour sa thèse de doctorat. Stroustrup a constaté que Simula possédait des fonctionnalités très utiles pour le développement de logiciels de grande envergure, mais que le langage était trop lent pour une utilisation pratique, tandis que BCPL était rapide mais trop bas niveau pour convenir au développement de logiciels de grande envergure. Lorsque Stroustrup a commencé à travailler chez AT&T Bell Labs , il a dû analyser le noyau UNIX en termes de calcul distribué . Se souvenant de son doctorat, Stroustrup a entrepris d'améliorer le langage C avec des fonctionnalités similaires à Simula. [ 30 ] Le C a été choisi pour sa polyvalence, sa rapidité, sa portabilité et sa large diffusion. Outre l'influence de C et de Simula, d'autres langages ont influencé ce nouveau langage, notamment ALGOL 68 , Ada , CLU et ML . [ citation requise ]

Initialement, le « C avec classes » de Stroustrup ajoutait des fonctionnalités au compilateur C, Cpre, notamment les classes , les classes dérivées , le typage fort , l'inlining et les arguments par défaut . [ 31 ]


Un quiz sur les fonctionnalités de C++11 donné à Paris en 2015
En 1982, Stroustrup commença à développer un successeur au C avec des classes, qu'il baptisa « C++ » ( ++opérateur d'incrémentation en C) après avoir essayé plusieurs autres noms. De nouvelles fonctionnalités furent ajoutées, notamment les fonctions virtuelles , la surcharge des noms de fonctions et des opérateurs , les références , les constantes, l'allocation de mémoire libre sécurisée (nouveau/suppression), une vérification de type améliorée et des commentaires sur une seule ligne de style BCPL avec deux barres obliques ( //). De plus, Stroustrup développa un nouveau compilateur autonome pour C++, Cfront .

En 1984, Stroustrup a implémenté la première bibliothèque d'entrée/sortie de flux. L'idée de fournir un opérateur de sortie plutôt qu'une fonction de sortie nommée a été suggérée par Doug McIlroy [ 2 ] (qui avait précédemment suggéré les tubes Unix ).

En 1985, la première édition du langage de programmation C++ a été publiée, qui est devenue la référence définitive pour le langage, car il n'y avait pas encore de norme officielle. [ 32 ] La première implémentation commerciale de C++ a été publiée en octobre de la même année. [ 29 ]

En 1989, C++ 2.0 a été publié, suivi par la deuxième édition mise à jour du langage de programmation C++ en 1991. [ 33 ] Les nouvelles fonctionnalités de la version 2.0 comprenaient l'héritage multiple, les classes abstraites, les fonctions membres statiques, les fonctions membres const et les membres protégés. En 1990, le Manuel de référence C++ annoté a été publié. Ce travail est devenu la base de la future norme. Les ajouts de fonctionnalités ultérieurs comprenaient les modèles , les exceptions , les espaces de noms , les nouveaux casts et un type booléen .

En 1998, C++98 a été publié, standardisant le langage, et une mise à jour mineure ( C++03 ) a été publiée en 2003.

Après C++98, le C++ a évolué relativement lentement jusqu'à la publication, en 2011, de la norme C++11 , qui ajoutait de nombreuses nouvelles fonctionnalités, élargissait la bibliothèque standard et offrait davantage de fonctionnalités aux programmeurs C++. Après une mise à jour mineure de C++14 publiée en décembre 2014, divers ajouts ont été introduits dans C++17 . [ 34 ] Après sa finalisation en février 2020, [ 35 ] un projet de norme C++20 a été approuvé le 4 septembre 2020 et officiellement publié le 15 décembre 2020. [ 36 ] [ 37 ]

Le 3 janvier 2018, Stroustrup a été annoncé comme le lauréat 2018 du prix Charles Stark Draper d'ingénierie, « pour la conceptualisation et le développement du langage de programmation C++ ». [ 38 ]

En décembre 2022, C++ se classait troisième au classement TIOBE , surpassant Java pour la première fois dans l'histoire de l'indice. En novembre 2024 , le langage se classait deuxième après Python , Java étant troisième. [ 39 ]

Étymologie
Selon Stroustrup, « le nom signifie la nature évolutive des changements par rapport à C. » [ 40 ] Ce nom est attribué à Rick Mascitti (mi-1983) [ 31 ] et a été utilisé pour la première fois en décembre 1983. Lorsque Mascitti a été interrogé de manière informelle en 1992 sur le nom, il a indiqué qu'il avait été donné dans un esprit ironique . Le nom vient de ++ l'opérateur de C (qui incrémente la valeur d'une variable ) et d'une convention de nommage courante consistant à utiliser « + » pour indiquer un programme informatique amélioré.

Au cours de la période de développement du C++, le langage a été appelé « nouveau C » et « C avec classes » [ 31 ] [ 41 ] avant d'acquérir son nom définitif.

Philosophie
Tout au long de la vie de C++, son développement et son évolution ont été guidés par un ensemble de principes : [ 30 ]

Il doit être motivé par des problèmes réels et ses fonctionnalités doivent être immédiatement utiles dans les programmes du monde réel.
Chaque fonctionnalité doit être implémentable (avec une manière raisonnablement évidente de le faire).
Les programmeurs devraient être libres de choisir leur propre style de programmation, et ce style devrait être entièrement pris en charge par C++.
Autoriser une fonctionnalité utile est plus important que d’empêcher toute mauvaise utilisation possible de C++.
Il devrait fournir des moyens d’organiser les programmes en parties distinctes et bien définies, ainsi que des moyens de combiner des parties développées séparément.
Aucune violation implicite du système de types (mais autorise les violations explicites, c'est-à-dire celles explicitement demandées par le programmeur).
Les types créés par l’utilisateur doivent bénéficier du même support et des mêmes performances que les types intégrés.
Les fonctionnalités inutilisées ne doivent pas avoir d'impact négatif sur les exécutables créés (par exemple, en réduisant les performances).
Il ne devrait y avoir aucun langage sous C++ (à l'exception du langage assembleur ).
C++ devrait fonctionner aux côtés d’autres langages de programmation existants , plutôt que de favoriser son propre environnement de programmation séparé et incompatible .
Si l’intention du programmeur est inconnue, permettez-lui de la spécifier en fournissant un contrôle manuel.
Standardisation
Articles principaux : C++03 , C++11 , C++14 , C++17 , C++20 , C++23 et C++26
Normes C++
Année	Norme ISO/CEI	Nom informel
1998	14882:1998 [ 42 ]	C++98
2003	14882:2003 [ 43 ]	C++03
2011	14882:2011 [ 44 ]	C++11 , C++0x
2014	14882:2014 [ 45 ]	C++14 , C++1y
2017	14882:2017 [ 46 ]	C++17 , C++1z
2020	14882:2020 [ 47 ]	C++20 , C++2a
2024	14882:2024 [ 17 ]	C++23 , C++2b
À déterminer		C++26 , C++2c
Le C++ est normalisé par un groupe de travail ISO appelé JTC1/SC22/WG21 . À ce jour, sept révisions de la norme C++ ont été publiées et la prochaine révision, C++26 , est actuellement en cours .


Scène lors de la réunion du comité des normes C++ à Stockholm en 1996
En 1998, le groupe de travail ISO a normalisé C++ pour la première fois sous la norme ISO/IEC 14882:1998 , plus connue sous le nom informel de C++98 . En 2003, il a publié une nouvelle version de la norme C++, appelée ISO/IEC 14882:2003 , qui corrigeait les problèmes identifiés dans C++98.

La prochaine révision majeure de la norme a été appelée de manière informelle « C++0x », mais elle n'a été publiée qu'en 2011. [ 48 ] C++11 (14882:2011) comprenait de nombreux ajouts au langage de base et à la bibliothèque standard. [ 44 ]

En 2014, C++14 (également connu sous le nom de C++1y) a été publié comme une petite extension de C++11, comportant principalement des corrections de bogues et de petites améliorations. [ 49 ] Les procédures de vote du projet de norme internationale se sont achevées à la mi-août 2014. [ 50 ]

Après C++14, une révision majeure C++17 , connue officieusement sous le nom de C++1z, a été achevée par le comité ISO C++ à la mi-juillet 2017 et a été approuvée et publiée en décembre 2017. [ 51 ]

Dans le cadre du processus de normalisation, l’ISO publie également des rapports et des spécifications techniques :

ISO/IEC TR 18015:2006 [ 52 ] sur l'utilisation du C++ dans les systèmes embarqués et sur les implications en termes de performances des fonctionnalités du langage et de la bibliothèque C++,
ISO/IEC TR 19768:2007 [ 53 ] (également connu sous le nom de Rapport technique C++ 1 ) sur les extensions de bibliothèque principalement intégrées dans C++11 ,
ISO/IEC TR 29124:2010 [ 54 ] sur les fonctions mathématiques spéciales, intégrées dans C++17 ,
ISO/IEC TR 24733:2011 [ 55 ] sur l'arithmétique décimale à virgule flottante ,
ISO/IEC TS 18822:2015 [ 56 ] sur la bibliothèque de systèmes de fichiers standard, intégrée dans C++17 ,
ISO/IEC TS 19570:2015 [ 57 ] sur les versions parallèles des algorithmes de la bibliothèque standard, intégrés dans C++17 ,
ISO/IEC TS 19841:2015 [ 58 ] sur la mémoire transactionnelle logicielle ,
ISO/IEC TS 19568:2015 [ 59 ] sur un nouvel ensemble d'extensions de bibliothèque, dont certaines sont déjà intégrées dans C++17 ,
ISO/IEC TS 19217:2015 [ 60 ] sur les concepts C++ , intégrés dans C++20 ,
ISO/IEC TS 19571:2016 [ 61 ] sur les extensions de bibliothèque pour la concurrence, dont certaines sont déjà intégrées dans C++20 ,
ISO/IEC TS 19568:2017 [ 62 ] sur un nouvel ensemble d'extensions de bibliothèque à usage général,
ISO/IEC TS 21425:2017 [ 63 ] sur les extensions de bibliothèque pour les plages, intégrées dans C++20 ,
ISO/IEC TS 22277:2017 [ 64 ] sur les coroutines, intégrées dans C++20 ,
ISO/IEC TS 19216:2018 [ 65 ] sur la bibliothèque réseau,
ISO/IEC TS 21544:2018 [ 66 ] sur les modules, intégrés dans C++20 ,
ISO/IEC TS 19570:2018 [ 67 ] sur un nouvel ensemble d'extensions de bibliothèque pour le parallélisme
ISO/IEC TS 23619:2021 [ 68 ] sur les nouvelles extensions pour la programmation réflexive (réflexion),
ISO/IEC TS 9922:2024 [ 69 ] sur un nouvel ensemble d'extensions de concurrence, et
ISO/IEC TS 19568:2024 [ 70 ] sur un autre nouvel ensemble d'extensions de bibliothèque.
D’autres spécifications techniques sont en cours de développement et en attente d’approbation.

Langue
Article principal : Syntaxe C++
Le langage C++ comporte deux composantes principales : un mappage direct des fonctionnalités matérielles fournies principalement par le sous-ensemble C, et des abstractions sans surcharge basées sur ces mappages. Stroustrup décrit le C++ comme « un langage de programmation d'abstraction léger [conçu] pour construire et utiliser des abstractions efficaces et élégantes » ; [ 15 ] et « offrir à la fois accès au matériel et abstraction est la base du C++. Son efficacité le distingue des autres langages. » [ 71 ]

Le C++ hérite de la majeure partie de la syntaxe du C. Un programme « Hello World » conforme à la norme C est également un programme « Hello World » C++ valide. Voici la version de Bjarne Stroustrup du programme « Hello World » , qui utilise la fonctionnalité de flux de la bibliothèque standard C++ pour écrire un message sur la sortie standard : [ 72 ] [ 73 ] [ note 2 ]

#include <iostream>

int main ()
{
    std :: cout << "Bonjour tout le monde ! \n " ;
}
Bibliothèque standard

Le projet de norme « Working Paper » qui a été approuvé sous le nom de C++98 ; la moitié de sa taille était consacrée à la bibliothèque standard C++.
Article principal : Bibliothèque standard C++
La norme C++ se compose de deux parties : le langage principal et la bibliothèque standard. Les programmeurs C++ s'attendent à la présence de cette dernière sur chaque implémentation majeure de C++ ; elle inclut des types d'agrégats ( vecteurs , listes, cartes, ensembles, files d'attente, piles, tableaux, tuples), des algorithmes (find, for_each , binary_search , random_shuffle, etc.), des fonctions d'entrée/sortie ( iostream , pour la lecture et l'écriture sur la console et les fichiers), une bibliothèque de systèmes de fichiers, la prise en charge de la localisation, des pointeurs intelligents pour la gestion automatique de la mémoire, la prise en charge des expressions régulières , une bibliothèque multithreading , la prise en charge des atomes (permettant la lecture ou l'écriture d'une variable par un seul thread à la fois sans synchronisation externe), des utilitaires de temps (mesure, obtention de l'heure actuelle, etc.), un système de conversion des rapports d'erreurs n'utilisant pas d'exceptions C++ en exceptions C++, un générateur de nombres aléatoires et une version légèrement modifiée de la bibliothèque standard C (pour la rendre compatible avec le système de types C++).

Une grande partie de la bibliothèque C++ repose sur la bibliothèque de modèles standard (STL). Parmi les outils utiles fournis par la STL figurent des conteneurs sous forme de collections d'objets (tels que des vecteurs et des listes ), des itérateurs offrant un accès aux conteneurs de type tableau, et des algorithmes effectuant des opérations telles que la recherche et le tri.

De plus, des (multi)maps ( tableaux associatifs ) et des (multi)sets sont fournis, exportant tous des interfaces compatibles. Par conséquent, l'utilisation de modèles permet d'écrire des algorithmes génériques fonctionnant avec n'importe quel conteneur ou sur n'importe quelle séquence définie par des itérateurs.

Comme en C, les fonctionnalités de la bibliothèque sont accessibles via la #include directive « include un en-tête standard » . La bibliothèque standard C++ fournit 105 en-têtes standard, dont 27 sont obsolètes. Avec l'introduction des modules en C++20 , ces en-têtes sont accessibles via import, et en C++23 , l'intégralité de la bibliothèque standard peut désormais être importée directement en tant que module, via . Actuellement, la bibliothèque standard C++ fournit deux modules, et (un module de compatibilité pour lequel exporte les fonctionnalités de la bibliothèque standard C dans l'espace de noms global). import std;stdstd.compatstd

La norme intègre la STL, initialement conçue par Alexander Stepanov , qui a expérimenté des algorithmes et des conteneurs génériques pendant de nombreuses années. En commençant avec le C++, il a finalement trouvé un langage permettant de créer des algorithmes génériques (par exemple, le tri STL) encore plus performants que, par exemple, la bibliothèque standard C qsort, grâce à des fonctionnalités C++ comme l'utilisation de l'inlining et de la liaison à la compilation au lieu de pointeurs de fonction. La norme ne la désigne pas comme « STL », car elle n'en est qu'une partie, mais ce terme reste largement utilisé pour la distinguer du reste de la bibliothèque standard (flux d'entrée/sortie, internationalisation, diagnostics, sous-ensemble de la bibliothèque C, etc.). [ 74 ]

La plupart des compilateurs C++, et tous les principaux, fournissent une implémentation conforme aux normes de la bibliothèque standard C++.

Directives de base C++
Les C++ Core Guidelines [ 75 ] sont une initiative menée par Bjarne Stroustrup, l'inventeur du C++, et Herb Sutter, le coordinateur et président du groupe de travail ISO C++, pour aider les programmeurs à écrire du « C++ moderne » en utilisant les meilleures pratiques pour les normes de langage C++11 et plus récentes, et pour aider les développeurs de compilateurs et d'outils de vérification statique à créer des règles pour détecter les mauvaises pratiques de programmation.

L'objectif principal est d'écrire de manière efficace et cohérente du C++ sûr en termes de type et de ressources.

Les lignes directrices de base ont été annoncées [ 76 ] lors du discours d’ouverture du CPPCon 2015.

Les lignes directrices sont accompagnées de la bibliothèque de support des lignes directrices (GSL), [ 77 ] une bibliothèque d'en-têtes uniquement de types et de fonctions pour implémenter les lignes directrices de base et des outils de vérification statique pour appliquer les règles des lignes directrices. [ 78 ]

Compatibilité
Afin de donner plus de liberté aux fournisseurs de compilateurs, le comité de normalisation C++ a décidé de ne pas imposer l'implémentation de la modification des noms , de la gestion des exceptions et d'autres fonctionnalités spécifiques à l'implémentation. L'inconvénient de cette décision est que le code objet produit par différents compilateurs est susceptible d'être incompatible. Il existe cependant des tentatives de normalisation des compilateurs pour des machines ou des systèmes d'exploitation spécifiques . Par exemple, l'ABI Itanium C++ est indépendante du processeur (malgré son nom) et est implémentée par GCC et Clang. [ 79 ]

Avec C
Article principal : Compatibilité de C et C++
Le C++ est souvent considéré comme un sur-ensemble du C , mais ce n'est pas tout à fait vrai. [ 80 ] La plupart du code C peut facilement être compilé correctement en C++, mais il existe quelques différences qui rendent certains codes C valides invalides ou se comportent différemment en C++. Par exemple, le C autorise la conversion implicite de vers d'autres types de pointeurs, mais pas le C++ (pour des raisons de sécurité des types). De plus, le C++ définit de nombreux nouveaux mots-clés, tels que et , qui peuvent être utilisés comme identifiants (par exemple, des noms de variables) dans un programme C. void*newclass

Français Certaines incompatibilités ont été supprimées par la révision de 1999 de la norme C ( C99 ), qui prend désormais en charge les fonctionnalités C++ telles que les commentaires de ligne ( //) et les déclarations mélangées au code. D'autre part, C99 a introduit un certain nombre de nouvelles fonctionnalités que C++ ne prenait pas en charge et qui étaient incompatibles ou redondantes en C++, telles que les tableaux de longueur variable , les types de nombres complexes natifs (cependant, la classe de la bibliothèque standard C++ fournit des fonctionnalités similaires, bien que non compatibles avec le code), les initialiseurs désignés, les littéraux composés et le mot-clé. [ 81 ] Certaines des fonctionnalités introduites par C99 ont été incluses dans la version ultérieure de la norme C++, C++11 (parmi celles qui n'étaient pas redondantes). [ 82 ] [ 83 ] [ 84 ] Cependant, la norme C++11 introduit de nouvelles incompatibilités, telles que l'interdiction d'assigner un littéral de chaîne à un pointeur de caractère, ce qui reste valide en C. std::complexrestrict

Pour mélanger du code C et du code C++, toute déclaration ou définition de fonction appelée ou utilisée à la fois en C et en C++ doit être déclarée avec une liaison C, en la plaçant dans un bloc. Une telle fonction ne doit pas dépendre de fonctionnalités dépendant de la modification des noms (c'est-à-dire de la surcharge de fonction). extern "C" {/*...*/}

Assemblage en ligne
Les programmes développés en C ou C++ utilisent souvent l'assembleur en ligne pour tirer parti de ses fonctionnalités de bas niveau, de sa vitesse supérieure et de son contrôle amélioré par rapport aux langages de programmation de haut niveau [ 85 ] [ 86 ] lorsque l'optimisation des performances est essentielle. C++ prend en charge l'intégration du langage assembleur à l'aide de déclarations asm [ 87 ] , mais la compatibilité de l'assembleur en ligne varie considérablement entre les compilateurs et les architectures. Contrairement aux fonctionnalités des langages de haut niveau tels que Python ou Java , le code assembleur dépend fortement du processeur sous-jacent et de l'implémentation du compilateur.

Variations entre les compilateurs
Différents compilateurs C++ implémentent l'assemblage en ligne de manières distinctes.

GCC ( GNU Compiler Collection ) et Clang [ 88 ] : Utilisent la syntaxe d'assemblage en ligne étendue de GCC. L'utilisation __asm__du mot-clé plutôt que asmde lors de l'écriture de code pouvant être compilé avec les options et permet de spécifier les opérandes d'entrée/sortie et les registres écrasés. Cette approche est largement adoptée, notamment par les compilateurs Intel [ 89 ] et IBM [ 90 ] .-ansi-std
MSVC ( Microsoft Visual C++ ) : l'assembleur en ligne est intégré au compilateur. Auparavant, l'assembleur en ligne était pris en charge via le __asmmot-clé, mais cette prise en charge a été supprimée en mode 64 bits, nécessitant des modules .asm distincts [ 91 ] .
TI ARM Clang et compilateurs embarqués [ 92 ] : Certains compilateurs de systèmes embarqués, comme TI Arm Clang de Texas Instruments, autorisent l'assemblage en ligne mais imposent des règles plus strictes pour éviter les conflits avec les conventions de registre et les conventions d'appel.
Interopérabilité entre C++ et Assembleur
C++ fournit deux méthodes principales d’intégration du code ASM.

1. Fichiers d'assemblage autonomes – Le code d'assemblage est écrit séparément et lié au code C++. [ 93 ]

2. Assemblage en ligne – Le code assembleur est intégré au code C++ à l’aide d’extensions spécifiques au compilateur.

Exemple de code pour la compatibilité ASM

Lors de l'appel d'une fonction d'assemblage à partir de C++, utilisez pour empêcher la modification du nom C++.extern "C"
//main.cpp
importer std ;

extern "C" int add_asm ( int , int ); // Déclarer la fonction d'assemblage

int main () {
    int résultat = add_asm ( 5 , 7 );
    std :: println ( "Résultat de l'ASM : {}" , result );
    renvoie 0 ;
}
#code asm utilisant l'architecture RISC-V
. section . texte
. global add_asm

add_asm :
    ajouter a0 , a0 , a1 # Ajouter le premier argument ( a0 ) et le deuxième argument ( a1 ), stocker dans a0
    ret # Retour ( a0 contient la valeur de retour )
Les variables globales dans l'assembly doivent être déclarées comme externen C++ et marquées .globaldans l'assembly.
// main.cpp
importer std ;

extern "C" int global_var ; // Déclarer une variable globale à partir de l'assembly

int main () {
    std :: println ( "Variable globale de l'ASM : {}" , global_var );
    renvoie 0 ;
}
#asm utilisant l'architecture RISC-V
. section . données
. global global_var
. aligner 4
global_var :
    . mot 42 # Définir la valeur entière
L'assemblage en ligne permet d'intégrer ASM directement dans C++ à l'aide du asmmot-clé.
//main.cpp (en utilisant le compilateur GCC/CLANG)
importer std ;

int main () {
    int x = 10 , y = 20 , somme ;

    asm volatile (
        "ajouter %0, %1, %2"
        : "=r" ( sum ) // Opérande de sortie (stocké dans un registre)
        : "r" ( x ), "r" ( y ) // Opérandes d'entrée (stockés dans des registres)
    );

    std :: println ( "Somme en utilisant ASM en ligne : {}" , sum );
    renvoie 0 ;
}
Voir aussi
icône	Portail de programmation informatique
Carbone (langage de programmation)
Comparaison des langages de programmation
Liste des compilateurs C++
Aperçu du C++
Catégorie : Bibliothèques C++
Notes de bas de page
 Pour l'idée des coroutines sans pile C++20.
 Ce code est directement copié de la page d'errata de Bjarne Stroustrup (p. 633). Il aborde l'utilisation de'\n'plutôt questd::endl. Voir également « Puis-je écrire « void main() » ? » (archivé le 2 juillet 2020 sur Wayback Machine) pour une explication de l'implicitereturn 0;de lamainfonction. Ce retour implicite n'est pas disponible dans les autres fonctions.
Références
« Présentation des modules en C++ » . Microsoft. 24 avril 2023.
 Stroustrup, Bjarne (1996). « Une histoire du C++ : 1979-1991 ».Histoire des langages de programmation --- II.ACM. pp. 699–769.doi: 10.1145/234286.1057836 .
 Stroustrup, Bjarne (16 décembre 2021). « C++20 : Atteindre les objectifs du C++ - Bjarne Stroustrup - CppCon 2021 » . CppCon. Archivé de l'original le 30 décembre 2021. Consulté le 30 décembre 2021 .
 Stroustrup, Bjarne (12 juin 2020). « Prospérer dans un monde saturé et en constante évolution : C++ 2006–2020 » . Actes de l'ACM sur les langages de programmation . 4 (HOPL). Association for Computing Machinery (ACM) : 1– 168. doi : 10.1145/3386320 . ISSN : 2475-1421 . S2CID : 219603741 .
 Naugler, David (mai 2007). « C# 2.0 pour les programmeurs C++ et Java : atelier de conférence ». Journal of Computing Sciences in Colleges . 22 (5). Bien que C# ait été fortement influencé par Java, il l'a également été par C++ et doit être considéré comme un descendant à la fois de C++ et de Java.
« Spécifications de la chapelle (Remerciements) » (PDF) . Cray Inc., 1er octobre 2015. Archivé (PDF) de l'original le 24 juin 2018. Consulté le 14 janvier 2016 .
 Fogus, Michael. « Rich Hickey Q&R » . Code Quarterly . Archivé de l'original le 11 janvier 2017. Consulté le 11 janvier 2017 .
 Harry. H. Chaudhary (28 juillet 2014). « Décrypter l'entretien de programmation Java : plus de 2 000 questions/réponses d'entretien Java » . Archivé de l'original le 27 mai 2021. Consulté le 29 mai 2016 .
 Roger Poon (1er mai 2017). « Mise à l'échelle de JS++ : abstraction, performances et lisibilité » . Archivé de l'original le 11 mai 2020. Consulté le 21 avril 2020 .
« L'évolution d'un langage d'extension : une histoire de Lua » . www.lua.org . Consulté le 4 janvier 2023 .
« FAQ sur le langage de programmation Nim » . Archivé de l'original le 11 juillet 2017. Consulté le 21 avril 2020 .
« 9. Classes — Documentation Python 3.6.4 » . docs.python.org . Archivé de l'original le 23 octobre 2012 . Consulté le 9 janvier 2018 .
« Influences – La référence Rust » . doc.rust-lang.org . Consulté le 4 janvier 2023 .
Stroustrup, Bjarne (1997). « 1 ». Le langage de programmation C++ (3e éd.). Addison-Wesley. ISBN 0-201-88954-4. OCLC  59193992 .
 Stroustrup, B. (6 mai 2014).« Lecture: The essence of C++. University of Edinburgh ». YouTube .Archivéde l'original le 28 avril 2015. Consulté le 12 juin 2015.
 Stroustrup, Bjarne (17 février 2014). « Applications C++ » . stroustrup.com . Archivé de l'original le 4 avril 2021. Consulté le 5 mai 2014 .
 « ISO/IEC 14882:2024 ». Organisation internationale de normalisation. Consulté le 21 octobre 2020.
« Page d'accueil de Bjarne Stroustrup » . www.stroustrup.com . Archivé de l'original le 14 mai 2019. Consulté le 15 mai 2013 .
« Calendrier IS C++ » (PDF) . Archivé (PDF) de l'original le 10 août 2020. Consulté le 9 août 2020 .
« C++ ; Vers où il va » . Archivé de l'original le 3 décembre 2018. Consulté le 3 décembre 2018 .
« Re : [RFC] Convertir builin-mailinfo.c pour utiliser The Better String Library » (Liste de diffusion). 6 septembre 2007. Archivé de l'original le 8 mars 2021. Consulté le 31 mars 2015 .
« Re : Des efforts pour attirer plus d'utilisateurs ? » (Liste de diffusion). 12 juillet 2010. Archivé de l'original le 21 mars 2015. Consulté le 31 mars 2015 .
 Andrew Binstock (18 mai 2011). « Dr. Dobb's : Entretien avec Ken Thompson » . Dr. Dobb's . Archivé de l'original le 13 mars 2014. Consulté le 7 février 2014 .
 Peter Seibel (16 septembre 2009). Codeurs au travail : Réflexions sur l'art de programmer . Apress. pp.  475–476 . ISBN 978-1-4302-1948-4. Archivé de l'original le 1er décembre 2019 . Récupéré le 9 novembre 2017 .
« C++ dans Coders at Work » . 16 octobre 2009. Archivé de l'original le 10 novembre 2017. Consulté le 9 novembre 2017 .
« Entretien avec Donald Knuth » . Dr. Dobb's . Archivé de l'original le 8 mars 2021. Consulté le 18 juillet 2021 .
« (La)TeX Navigator » . Archivé de l'original le 20 novembre 2017. Consulté le 10 novembre 2017 .
 Claburn, Thomas (2 mars 2025). « Le créateur du C++ appelle à l'aide pour défendre son langage de programmation contre les « attaques graves »" . Le Registre . Récupéré le 5 mars 2025 .
 Stroustrup, Bjarne (7 mars 2010).« FAQ de Bjarne Stroustrup : Quand le C++ a-t-il été inventé ? ».stroustrup.com.Archivéde l'original le 6 février 2016. Consulté le 16 septembre 2010.
 Stroustrup, Bjarne.« Évolution d'un langage dans et pour le monde réel : C++ 1991-2006 »(PDF).Archivé(PDF)de l'original le 20 novembre 2007.Consulté le 14 août 2013.
 Stroustrup, Bjarne.« Histoire du C++ : 1979-1991 »(PDF).Archivé(PDF)de l'original le 2 février 2019.Consulté le 18 juillet 2013.
 Stroustrup, Bjarne. « Le langage de programmation C++ » (première éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Stroustrup, Bjarne. « Le langage de programmation C++ » (deuxième éd.). Archivé de l'original le 9 août 2012. Consulté le 16 septembre 2010 .
 Sutter, Herb (30 juin 2016). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Oulu) » . herbsutter.com . Archivé de l'original le 8 octobre 2016. La prochaine norme après C++17 sera C++20.
 Dusíková, Hana (6 novembre 2019). « N4817 : Invitation et informations à la réunion de Prague 2020 » (PDF) . Archivé (PDF) de l'original le 29 décembre 2019. Consulté le 13 février 2020 .
« État actuel » . isocpp.org . Archivé de l'original le 8 septembre 2020. Consulté le 7 septembre 2020 .
« C++20 approuvé – Herb Sutter » . isocpp.org . Archivé de l'original le 11 septembre 2020. Consulté le 8 septembre 2020 .
« Le pionnier de l'informatique Bjarne Stroustrup recevra le prix Charles Stark Draper d'ingénierie 2018 » (communiqué de presse). Académie nationale d'ingénierie. 3 janvier 2018. Archivé de l'original le 3 janvier 2018. Consulté le 14 décembre 2021 .
 TIOBE (novembre 2024). « Indice TIOBE de novembre 2024 » . TIOBE.com . Société TIOBE. Archivé de l'original le 18 novembre 2024. Consulté le 18 novembre 2024 .
« FAQ de Bjarne Stroustrup – D'où vient le nom « C++ » ? » . Archivé de l'original le 6 février 2016. Consulté le 16 janvier 2008 .
« C pour les programmeurs C++ » . Université Northeastern . Archivé de l'original le 17 novembre 2010. Consulté le 7 septembre 2015 .
« ISO/CEI 14882:1998 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2017. Consulté le 23 novembre 2018 .
« ISO/CEI 14882:2003 » . Organisation internationale de normalisation. Archivé de l'original le 13 août 2021. Consulté le 23 novembre 2018 .
 « ISO/IEC 14882:2011 ». Organisation internationale de normalisation.Archivéde l'original le 27 mai 2016.Consulté le 23 novembre 2018.
« ISO/IEC 14882:2014 » . Organisation internationale de normalisation. Archivé de l'original le 29 avril 2016. Consulté le 23 novembre 2018 .
« ISO/IEC 14882:2017 » . Organisation internationale de normalisation. Archivé de l'original le 29 janvier 2013. Consulté le 2 décembre 2017 .
« ISO/IEC 14882:2020 » . Organisation internationale de normalisation. Archivé de l'original le 16 décembre 2020. Consulté le 16 décembre 2020 .
« Nous disposons d'une norme internationale : C++0x est approuvé à l'unanimité . » Sutter's Mill . 12 août 2011. Archivé de l'original le 28 juin 2018. Consulté le 23 novembre 2018 .
« L'avenir du C++ » . Archivé de l'original le 23 octobre 2018. Consulté le 23 novembre 2018 via channel9.msdn.com.
« Nous avons C++14 ! : C++ standard » . isocpp.org . Archivé de l'original le 19 août 2014 . Consulté le 19 août 2014 .
 Sutter, Herb (15 juillet 2017). « Compte rendu de voyage : Réunion d'été sur les normes ISO C++ (Toronto) » . Archivé de l'original le 6 août 2017. Consulté le 4 août 2017 .
« ISO/IEC TR 18015:2006 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 19768:2007 » . Organisation internationale de normalisation. Archivé de l'original le 4 mars 2016. Consulté le 15 février 2019 .
« ISO/IEC TR 29124:2010 » . Organisation internationale de normalisation. Archivé de l'original le 12 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TR 24733:2011 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 18822:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19841:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19217:2015 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19571:2016 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19568:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21425:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 22277:2017 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19216:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 21544:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 19570:2018 » . Organisation internationale de normalisation. Archivé de l'original le 15 janvier 2019. Consulté le 15 février 2019 .
« ISO/IEC TS 23619:2021 » . Organisation internationale de normalisation. Archivé de l'original le 15 décembre 2018. Consulté le 11 octobre 2021 .
« ISO/IEC TS 9922:2024 » . Organisation internationale de normalisation. Archivé de l'original le 1er avril 2025. Consulté le 1er avril 2025 .
« ISO/IEC TS 19568:2024 » . Organisation internationale de normalisation. Archivé de l'original le 25 février 2025. Consulté le 1er avril 2025 .
 B. Stroustrup (interviewé par Sergio De Simone) (30 avril 2015). « Stroustrup : Réflexions sur C++17 - Une interview » . Archivé de l'original le 8 juillet 2015. Consulté le 8 juillet 2015 .
 Stroustrup, Bjarne (2000). Le langage de programmation C++ (éd. spéciale). Addison-Wesley. p. 46. ISBN 0-201-70073-5.
 Stroustrup, Bjarne. « Problèmes en suspens concernant le langage de programmation C++ (3e édition) » . Archivé de l'original le 5 mai 2014. Consulté le 5 mai 2014 .
 Graziano Lo Russo (2008). « Entretien avec A. Stepanov » . stlport.org . Archivé de l'original le 4 mars 2009. Consulté le 8 octobre 2015 .
« Directives C++ Core » . isocpp.github.io . Archivé de l'original le 16 février 2020 . Consulté le 9 février 2020 .
« Bjarne Stroustrup annonce les directives de base du C++ : C++ standard » . isocpp.org . Archivé de l'original le 11 mai 2020. Consulté le 31 mars 2020 .
« microsoft/GSL » . 18 juillet 2021. Archivé de l'original le 18 juillet 2021. Consulté le 18 juillet 2021 via GitHub.
« Utilisation des vérificateurs des directives de base C++ » . Microsoft Learn . Archivé de l'original le 13 août 2021. Consulté le 31 mars 2020 .
« Résumé de l'ABI C++ » . 20 mars 2001. Archivé de l'original le 10 juillet 2018. Consulté le 30 mai 2006 .
« FAQ de Bjarne Stroustrup – Le C est-il un sous-ensemble du C++ ? » . Archivé de l'original le 6 février 2016. Consulté le 5 mai 2014 .
« C9X – La nouvelle norme C » . Archivé de l'original le 21 juin 2018. Consulté le 27 décembre 2008 .
« Prise en charge de C++0x dans GCC » . Archivé de l'original le 21 juillet 2010. Consulté le 12 octobre 2010 .
« Fonctionnalités principales du langage C++0x dans VC10 : le tableau » . Archivé de l'original le 21 août 2010. Consulté le 12 octobre 2010 .
« Clang - État des versions C++98, C++11 et C++14 » . Clang.llvm.org. 12 mai 2013. Archivé de l'original le 4 juillet 2013. Consulté le 10 juin 2013 .
 Bokil, Milind A. (2021). « Écriture de routines d'assemblage dans les programmes C/C++ et Java ». ResearchGate. Consulté le 1er avril 2025.
 Vilhena, Paulo Emílio de ; Lahav, Ori ; Vafeiadis, Viktor ; Raad, Azalea (2024). « Extension du modèle de mémoire C/C++ avec l'assemblage en ligne ». Actes de l'ACM sur les langages de programmation, vol. 8, OOPSLA2, article 309. doi:10.1145/3689749.
 Contributeurs de cppreference.com. « Déclaration ASM ». cppreference.com . Consulté le 1er avril 2025.
« Asm étendu (utilisation de la collection de compilateurs GNU) » . Documentation en ligne de GCC . Projet GNU . Consulté le 1er avril 2025 .
 Intel Corporation. « Assemblage en ligne ». Guide du développeur et référence du compilateur Intel® C++ Classic , version 2021.9. Consulté le 1er avril 2025.
 IBM. « Instructions d'assemblage en ligne (extension IBM) ». Documentation IBM . Consulté le 1er avril 2025.
« Présentation de l'assembleur en ligne » . Microsoft Learn . Microsoft . Consulté le 1er avril 2025 .
« Interfaçage de C et C++ avec le langage assembleur » . Texas Instruments . Texas Instruments Incorporated. 23 février 2025. Consulté le 1er avril 2025 .
« Liaison C++ vers ASM dans GCC » . Wiki OSDev . Consulté le 1er avril 2025 .
Lectures complémentaires
Abrahams, David ; Gurtovoy, Aleksey (2005). Métaprogrammation de modèles C++ : concepts, outils et techniques issus de Boost et au-delà . Addison-Wesley. ISBN 0-321-22725-5.
Alexandrescu, Andrei (2001). Conception C++ moderne : Programmation générique et modèles de conception appliqués . Addison-Wesley. ISBN. 0-201-70431-5.
Alexandrescu, Andrei ; Sutter, Herb (2004). Normes de conception et de codage C++ : règles et directives pour l'écriture de programmes . Addison-Wesley. ISBN 0-321-11358-6.
Becker, Pete (2006). Les extensions de la bibliothèque standard C++ : tutoriel et référence . Addison-Wesley. ISBN. 0-321-41299-0.
Cassé, Frank (2010). Annotations C++ . Université de Groningue. ISBN 978-90-367-0470-0. Archivé de l'original le 28 avril 2010 . Récupéré le 28 avril 2010 .
Coplien, James O. (1994) [réédité avec corrections, année de publication originale : 1992]. C++ avancé : Styles et expressions idiomatiques de programmation . Addison-Wesley. ISBN 0-201-54855-0.
Dewhurst, Stephen C. (2005). C++ Common Knowledge : Programmation intermédiaire essentielle . Addison-Wesley. ISBN. 0-321-32192-8.
Conseil de l'industrie des technologies de l'information (15 octobre 2003). Langages de programmation – C++ (deuxième éd.). Genève : ISO/IEC. 14882:2003(E).
Josuttis, Nicolai M. (2012). La bibliothèque standard C++ : tutoriel et référence (deuxième éd.). Addison-Wesley. ISBN. 978-0-321-62321-8.
Koenig, Andrew ; Moo, Barbara E. (2000). C++ accéléré – Programmation pratique par l'exemple . Addison-Wesley. ISBN 0-201-70353-X.
Lippman, Stanley B. ; Lajoie, Josée; Moo, Barbara E. (2011). Introduction à C++ (Cinquième éd.). Addison-Wesley. ISBN 978-0-321-71411-4.
Lippman, Stanley B. (1996). Au cœur du modèle objet C++ . Addison-Wesley. ISBN. 0-201-83454-5.
Meyers, Scott (2005). Effective C++ (3e éd.). Addison-Wesley. ISBN. 0-321-33487-6.
Stroustrup, Bjarne (2013). Le langage de programmation C++ (quatrième éd.). Addison-Wesley. ISBN. 978-0-321-56384-2.
Stroustrup, Bjarne (1994). Conception et évolution de C++ . Addison-Wesley. ISBN. 0-201-54330-3.
Stroustrup, Bjarne (2014). Programmation : Principes et pratique en C++ (2e éd.). Addison-Wesley. ISBN. 978-0-321-99278-9.
Sutter, Herb (2001). C++ encore plus exceptionnel : 40 nouveaux casse-têtes d'ingénierie, problèmes de programmation et solutions . Addison-Wesley. ISBN 0-201-70434-X.
Sutter, Herb (2004). Style C++ exceptionnel . Addison-Wesley. ISBN. 0-201-76042-8.
Vandevoorde, David; Josuttis, Nicolai M. (2003). Modèles C++ : le guide complet . Addison-Wesley. ISBN 0-201-73484-2.
Liens externes
JTC1/SC22/WG21 – Groupe de travail sur la norme ISO/IEC C++
Standard C++ Foundation – une organisation à but non lucratif qui promeut l'utilisation et la compréhension du C++ standard. Bjarne Stroustrup est l'un des directeurs de l'organisation.
Mots-clés C++
Expressions C++
Priorité des opérateurs C++
C++ dans les projets frères de Wikipédia :

Médias de Commons

Citations de Wikiquote

Manuels scolaires de Wikibooks

Ressources de Wikiversité
vtet
C++
vtet
Langages de programmation
ComparaisonChronologieHistoire
AdaALGOL SimulaAPLAssembléeBASIQUE Visual Basic classique.FILETCC++C#COBOLErlang ÉlixirEn avantFortranAllerHaskellJavaJavaScript ManuscritJuliaKotlinZézayerLuaMATLABML Caml OCamlPascal Pascal ObjetPerl RakuPHPProloguePythonRRubisRouillerSQLGratterCoquillePetite conversationRapideplus...
 Listes : alphabétiqueCatégoriqueGénérationnelNon basé sur l'anglais Catégorie
vtet
Normes de l'Organisation internationale de normalisation (ISO)
vtet
normes CEI
Bases de données de contrôle d'autorité Modifiez ceci sur Wikidata
Catégories :C++Famille de langages de programmation AlgolFamille de langages de programmation C++Langages de programmation basés sur les classesLogiciel multiplateformeLangages de programmation de haut niveauLangages de programmation orientés objetLangages de programmation créés en 1983Langages de programmation avec une norme ISOLangages de programmation à typage statiqueLangages de programmation compilés
===================(10)======================
